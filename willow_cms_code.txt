METADATA:
Export Date: 2025-07-22 04:05:23
CakePHP Version: 5.2.4
PHP Version: 8.3.15

================================================================================



================================================================================
BEGIN SECTION: Models
================================================================================

FILE: src/Model/Behavior/QueueableImageBehavior.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 7253 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Behavior;

use App\Utility\SettingsManager;
use ArrayObject;
use Cake\Datasource\EntityInterface;
use Cake\Event\EventInterface;
use Cake\ORM\Behavior;
use Cake\Utility\Text;

/**
 * QueueableImage Behavior
 *
 * This behavior handles file uploads, deletion of old files, and queues image processing
 * and AI analysis jobs for uploaded images. It integrates with the Josegonzalez/Upload
 * plugin for file handling.
 */
class QueueableImageBehavior extends Behavior
{
    /**
     * Default configuration.
     *
     * @var array<string, mixed>
     */
    protected array $_defaultConfig = [
        'folder_path' => 'files/', // Relative path within webroot where images are stored (e.g., 'img/uploads')
        'field' => 'image', // The entity field name that holds the uploaded file.
    ];

    /**
     * Initialize method.
     *
     * Sets up the Josegonzalez/Upload behavior configuration for the image field.
     *
     * @param array<string, mixed> $config The configuration settings provided to the behavior.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $field = $this->getConfig('field');

        // Prepare Upload behavior configuration
        $uploadConfig = [
            $field => [
                'fields' => [
                    'dir' => 'dir', // Field to store the directory info (optional)
                    'size' => 'size', // Field to store the file size
                    'type' => 'mime', // Field to store the MIME type
                ],
                /**
                 * Callback to generate a unique filename for the uploaded file.
                 *
                 * @param \Cake\ORM\Table $table The table instance.
                 * @param \Cake\Datasource\EntityInterface $entity The entity instance.
                 * @param array<string, mixed> $data The uploaded file data.
                 * @param string $field The field name.
                 * @param array<string, mixed> $settings The behavior settings.
                 * @return string The generated unique filename.
                 */
                'nameCallback' => function ($table, $entity, $data, $field, $settings) {
                    $file = $entity->{$field};
                    $clientFilename = $file->getClientFilename();
                    $ext = pathinfo($clientFilename, PATHINFO_EXTENSION);

                    return Text::uuid() . '.' . strtolower($ext);
                },
                /**
                 * Callback to specify paths to delete when an entity is deleted or updated
                 * with a new file.
                 *
                 * @param string $path The base path where the file is stored.
                 * @param \Cake\Datasource\EntityInterface $entity The entity instance.
                 * @param string $field The field name.
                 * @param array<string, mixed> $settings The behavior settings.
                 * @return array<string> An array of file paths to delete.
                 */
                'deleteCallback' => function ($path, $entity, $field, $settings) {
                    $paths = [
                        $path . $entity->{$field}, // Original file path
                    ];

                    // Add paths for all resized versions based on 'ImageSizes' setting
                    $imageSizes = SettingsManager::read('ImageSizes', []);
                    foreach ($imageSizes as $width) {
                        $paths[] = $path . $width . DS . $entity->{$field};
                    }

                    return $paths;
                },
                'keepFilesOnDelete' => false, // Ensure files are deleted from disk when entity is deleted.
            ],
        ];

        // Add the Upload behavior if it's not already added to prevent re-adding.
        if (!$this->_table->hasBehavior('Josegonzalez/Upload.Upload')) {
            $this->_table->addBehavior('Josegonzalez/Upload.Upload', $uploadConfig);
        }
    }

    /**
     * beforeSave callback.
     *
     * Handles deletion of the old image file and its resized versions when a new image
     * is uploaded during an entity update.
     *
     * @param \Cake\Event\EventInterface $event The event object.
     * @param \Cake\Datasource\EntityInterface $entity The entity being saved.
     * @param \ArrayObject $options Options for the save operation.
     * @return void
     */
    public function beforeSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        if (!$entity->isNew() && $entity->isDirty($this->getConfig('field'))) {
            $originalImage = $entity->getOriginal($this->getConfig('field'));

            if ($originalImage) {
                $tableName = $this->_table->getTable();
                $field = $this->getConfig('field');
                $basePath = WWW_ROOT . 'files' . DS . ucfirst($tableName) . DS . $field . DS;

                $mainFilePath = $basePath . $originalImage;
                if (file_exists($mainFilePath)) {
                    unlink($mainFilePath);
                }

                $imageSizes = SettingsManager::read('ImageSizes', []);
                foreach ($imageSizes as $width) {
                    $resizedPath = $basePath . $width . DS . $originalImage;
                    if (file_exists($resizedPath)) {
                        unlink($resizedPath);
                    }
                }

                // Clear file stat cache after deletions
                clearstatcache();
            }
        }
    }

    /**
     * afterSave callback.
     *
     * Queues an image processing job and optionally an AI image analysis job
     * after an entity with an image is successfully saved.
     *
     * @param \Cake\Event\EventInterface $event The event object.
     * @param \Cake\Datasource\EntityInterface $entity The entity that was saved.
     * @param \ArrayObject $options Options for the save operation.
     * @return void
     */
    public function afterSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        $config = $this->getConfig();
        // Check if the image field was changed/uploaded in this save operation
        if ($entity->isDirty($config['field'])) {
            $data = [
                'folder_path' => WWW_ROOT . $config['folder_path'],
                'file' => $entity->{$config['field']},
                'id' => $entity->id,
            ];

            // Queue up an image processing job to generate different sizes/versions.
            $this->_table->queueJob('App\Job\ProcessImageJob', $data);

            // Check if AI features are enabled for image analysis.
            if (SettingsManager::read('AI.enabled')) {
                // Add the model alias to the data for AI job.
                $data['model'] = $event->getSubject()->getAlias();

                // If image analysis is specifically enabled, queue that job.
                if (SettingsManager::read('AI.imageAnalysis')) {
                    $this->_table->queueJob('App\Job\ImageAnalysisJob', $data);
                }
            }
        }
    }
}


// ----- END FILE: src/Model/Behavior/QueueableImageBehavior.php -----

FILE: src/Model/Behavior/OrderableBehavior.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 10354 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Behavior;

use Cake\ORM\Behavior;
use Cake\ORM\Exception\PersistenceFailedException;
use InvalidArgumentException;
use LogicException;
use RuntimeException;

/**
 * OrderableBehavior provides hierarchical ordering capabilities for CakePHP models.
 *
 * This behavior automatically includes and configures the Tree behavior, providing
 * methods to manage hierarchical data structures with ordering capabilities.
 * It allows for:
 * - Moving items between different levels of hierarchy
 * - Reordering items within the same level
 * - Root level and nested level ordering
 *
 * Required table columns (configurable via TreeBehavior):
 * - parent_id (integer|null): References the parent record
 * - lft (integer): Left value for nested set model
 * - rght (integer): Right value for nested set model
 *
 * @property \Cake\ORM\Table $_table The table instance this behavior is attached to
 */
class OrderableBehavior extends Behavior
{
    /**
     * Default configuration for the behavior.
     *
     * Configuration options:
     * - treeConfig: Configuration array for the Tree behavior
     *   - parent: The foreign key column for the parent (default: 'parent_id')
     *   - left: The column for the left value (default: 'lft')
     *   - right: The column for the right value (default: 'rght')
     * - displayField: The field to use for display in the tree (default: null, uses table's displayField)
     *
     * @var array<string, mixed>
     */
    protected array $_defaultConfig = [
        'treeConfig' => [
            'parent' => 'parent_id',
            'left' => 'lft',
            'right' => 'rght',
        ],
        'displayField' => null,
    ];

    /**
     * Initializes the behavior.
     *
     * Sets up the Tree behavior with merged configuration settings if it's not
     * already present on the table. This ensures all necessary tree functionality
     * is available for ordering operations.
     *
     * @param array $config Configuration array with optional 'treeConfig' key for
     *                      customizing the Tree behavior settings.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        // Merge any provided tree configuration with defaults
        $treeConfig = array_merge(
            $this->_defaultConfig['treeConfig'],
            $config['treeConfig'] ?? [],
        );

        // Add the Tree behavior if it's not already added
        if (!$this->_table->hasBehavior('Tree')) {
            $this->_table->addBehavior('Tree', $treeConfig);
        }
    }

    /**
     * Reorders a model record within a hierarchical structure.
     *
     * This method handles both the parent reassignment and sibling reordering
     * in a single operation, wrapped in a database transaction. It supports:
     * - Moving an item to the root level
     * - Moving an item under a new parent
     * - Reordering items within their current level
     *
     * The method ensures proper tree structure maintenance through the Tree behavior
     * and updates the nested set values accordingly.
     *
     * @param array $data An associative array containing:
     *                    - 'id' (int|string): The ID of the record to be reordered.
     *                    - 'newParentId' (mixed): The ID of the new parent record, or 'root' to move to the root level.
     *                    - 'newIndex' (int): The new position index among siblings (zero-based).
     * @throws \InvalidArgumentException If the provided data is missing required keys or has invalid types.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException If the record to move or target parent is not found.
     * @throws \Cake\ORM\Exception\PersistenceFailedException If the record cannot be saved during parent update.
     * @throws \RuntimeException If moving the item up/down fails.
     * @throws \LogicException If the item cannot be found among its new siblings after parent move.
     * @return bool Returns true on successful reordering.
     */
    public function reorder(array $data): bool
    {
        $result = $this->_table->getConnection()->transactional(function () use ($data) {
            if (
                !isset($data['id'], $data['newParentId'], $data['newIndex']) ||
                (!is_numeric($data['id']) && !is_string($data['id'])) || // ID can be int or string (e.g. UUID)
                !is_numeric($data['newIndex'])
            ) {
                throw new InvalidArgumentException(
                    'Required data (id, newParentId, newIndex) missing or newIndex is not numeric for reorder.',
                );
            }
            if (
                $data['newParentId'] !== 'root'
                && !is_numeric($data['newParentId'])
                && !is_string($data['newParentId'])
            ) {
                 throw new InvalidArgumentException('newParentId must be "root", numeric, or string.');
            }

            $itemId = $data['id'];
            $newParentIdentifier = $data['newParentId'];
            $newIndex = (int)$data['newIndex'];

            /** @var \Cake\ORM\Entity&\Cake\ORM\Behavior\Tree\NodeInterface $item */
            $item = $this->_table->get($itemId); // Throws RecordNotFoundException if not found

            $actualNewParentId = $newParentIdentifier === 'root' ? null : $newParentIdentifier;
            $parentField = $this->getConfig('treeConfig.parent');

            if ($item->get($parentField) !== $actualNewParentId) {
                if ($actualNewParentId !== null) {
                    // Ensure the new parent exists (unless it's root)
                    $this->_table->get($actualNewParentId); // Throws RecordNotFoundException
                    $item->set($parentField, $actualNewParentId);
                } else {
                    $item->set($parentField, null);
                }

                if (!$this->_table->save($item, ['checkRules' => false])) {
                    throw new PersistenceFailedException($item, ['Save failed during parent update.']);
                }
            }

            // Adjust position among new siblings
            $siblingsQuery = null;
            $parentFieldValue = $item->get($parentField); // Get parent_id value

            if ($parentFieldValue === null) { // Item is now a root node
                $siblingsQuery = $this->_table->find()
                    ->where([$this->_table->aliasField($parentField) . ' IS' => null]);
            } else { // Item has a parent
                $siblingsQuery = $this->_table->find(
                    'children',
                    for: $parentFieldValue, // Use named argument 'for'
                    direct: true, // Use named argument 'direct'
                );
            }

            $leftField = $this->getConfig('treeConfig.left');
            $siblings = $siblingsQuery->orderBy([$this->_table->aliasField($leftField) => 'ASC'])
                ->all()
                ->toArray();

            $currentPosition = false;
            $primaryKeyField = (array)$this->_table->getPrimaryKey(); // getPrimaryKey can return string or array
            $primaryKeyField = reset($primaryKeyField); // Use the first primary key

            foreach ($siblings as $index => $sibling) {
                if ($sibling->get($primaryKeyField) == $item->get($primaryKeyField)) {
                    $currentPosition = $index;
                    break;
                }
            }

            if ($currentPosition === false) {
                throw new LogicException("Moved item not found among its new siblings. Item ID: {$itemId}");
            }

            $targetPosition = $newIndex;

            if ($currentPosition !== $targetPosition) {
                $distance = abs($targetPosition - $currentPosition);
                if ($targetPosition > $currentPosition) { // Moving down the list
                    // TreeBehavior's moveDown moves it $number positions *lower* (larger lft)
                    if (!$this->_table->moveDown($item, $distance)) {
                        throw new RuntimeException("Failed to move item ID {$itemId} down by {$distance} positions.");
                    }
                } else { // Moving up the list
                    // TreeBehavior's moveUp moves it $number positions *higher* (smaller lft)
                    if (!$this->_table->moveUp($item, $distance)) {
                        throw new RuntimeException("Failed to move item ID {$itemId} up by {$distance} positions.");
                    }
                }
            }

            return true; // Transactional callback succeeded
        });

        return $result;
    }

    /**
     * Gets a hierarchical tree structure of records.
     *
     * Retrieves records in a threaded format, including essential fields for tree structure
     * and any additional conditions specified.
     *
     * @param array $additionalConditions Additional conditions to apply to the query.
     * @param array $fields Additional fields to select (beyond id, parent_id, and displayField).
     * @return array<\Cake\Datasource\EntityInterface> Array of entities in threaded format.
     */
    public function getTree(array $additionalConditions = [], array $fields = []): array
    {
        $displayField = $this->getConfig('displayField') ?? $this->_table->getDisplayField();
        $parentFieldKey = $this->getConfig('treeConfig.parent');
        $leftFieldKey = $this->getConfig('treeConfig.left');
        $primaryKey = (array)$this->_table->getPrimaryKey();
        $primaryKeyField = reset($primaryKey);

        // Base fields that are always needed for tree structure
        $baseFields = [
            $this->_table->aliasField($primaryKeyField),
            $this->_table->aliasField($parentFieldKey),
            $this->_table->aliasField($displayField),
        ];

        // Merge base fields with any additional fields
        $selectFields = array_unique(array_merge($baseFields, $fields));

        $query = $this->_table->find()
            ->select($selectFields)
            ->where($additionalConditions)
            ->orderBy([$this->_table->aliasField($leftFieldKey) => 'ASC']);

        return $query->find('threaded')->toArray();
    }
}


// ----- END FILE: src/Model/Behavior/OrderableBehavior.php -----

FILE: src/Model/Behavior/SlugBehavior.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 6953 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Behavior;

use ArrayObject;
use Cake\Database\Expression\QueryExpression;
use Cake\Datasource\EntityInterface;
use Cake\Event\EventInterface;
use Cake\I18n\DateTime;
use Cake\ORM\Behavior;
use Cake\ORM\Locator\LocatorAwareTrait;
use Cake\Utility\Text;
use Exception;

/**
 * Slug Behavior
 *
 * This behavior automatically generates and manages URL-friendly slugs for model entities.
 * It maintains a history of slugs in a separate table and ensures slug uniqueness across the application.
 *
 * Features:
 * - Customizable maximum slug length
 * - Slug history tracking
 * - Uniqueness validation across current and historical slugs
 *
 * @property \Cake\ORM\Table $table The table this behavior is attached to
 */
class SlugBehavior extends Behavior
{
    use LocatorAwareTrait;

    /**
     * Default configuration for the behavior
     *
     * @var array<string, mixed>
     */
    protected array $_defaultConfig = [
        'sourceField' => 'title',
        'targetField' => 'slug',
        'maxLength' => 255,
    ];

    /**
     * Initialize the behavior
     *
     * Sets up the hasMany relationship to Slugs table and adds slug uniqueness validation.
     *
     * @param array<string, mixed> $config The configuration settings provided to this behavior
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        // Add the hasMany relationship to Slugs
        $this->_table->hasMany('Slugs', [
            'foreignKey' => 'foreign_key',
            'conditions' => ['Slugs.model' => $this->_table->getAlias()],
            'dependent' => true,
        ]);

        $this->_table->getValidator()->add($this->getConfig('targetField'), [
            'unique' => [
                'rule' => [$this, 'validateUniqueSlug'],
                'message' => __('This slug is already in use.'),
                'provider' => 'table',
            ],
        ]);
    }

    /**
     * Before save callback
     *
     * Generates and sets the slug on the entity before saving if necessary.
     *
     * @param \Cake\Event\EventInterface $event The beforeSave event that was fired
     * @param \Cake\Datasource\EntityInterface $entity The entity that is going to be saved
     * @param \ArrayObject $options The options passed to the save method
     * @return void
     */
    public function beforeSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        $sourceField = $this->getConfig('sourceField');
        $targetField = $this->getConfig('targetField');
        $maxLength = $this->getConfig('maxLength');

        if (!empty($entity->get($targetField))) {
            $slug = $this->generateSlug($entity->get($targetField), $maxLength);
            $entity->set($targetField, $slug);
        } elseif (!empty($entity->get($sourceField))) {
            $slug = $this->generateSlug($entity->get($sourceField), $maxLength);
            $entity->set($targetField, $slug);
        }
    }

    /**
     * After save callback
     *
     * @param \Cake\Event\EventInterface $event The afterSave event that was fired
     * @param \Cake\Datasource\EntityInterface $entity The entity that was saved
     * @param \ArrayObject $options The options passed to the save method
     * @return void
     */
    public function afterSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        $targetField = $this->getConfig('targetField');
        $slug = $entity->get($targetField);

        if (empty($slug)) {
            return;
        }

        $slugsTable = $this->fetchTable('Slugs');

        // Check if the slug has actually changed
        $original = $entity->getOriginal($targetField);

        if (!$entity->isNew() && $original === $slug) {
            return;
        }

        // Check if this slug is already in the history for this entity
        $existingSlug = $slugsTable->find()
            ->select(['Slugs.id'])
            ->where([
                'Slugs.model' => $this->_table->getAlias(),
                'Slugs.foreign_key' => $entity->get($this->_table->getPrimaryKey()),
                'Slugs.slug' => $slug,
            ])
            ->first();

        if ($existingSlug === null) {
            $slugData = [
                'model' => $this->_table->getAlias(),
                'foreign_key' => $entity->get($this->_table->getPrimaryKey()),
                'slug' => $slug,
                'created' => new DateTime(),
            ];

            try {
                // Save slug history - use regular save to avoid transaction conflicts
                $slugEntity = $slugsTable->newEntity($slugData);
                if (!$slugsTable->save($slugEntity)) {
                    $event->getSubject()->log(sprintf(
                        'Failed to save slug history for slug: %s',
                        $slug,
                    ));
                }
            } catch (Exception $e) {
                $event->getSubject()->log(sprintf(
                    'Failed to save slug history: %s',
                    $e->getMessage(),
                ));
            }
        }
    }

    /**
     * Generates a URL-safe slug from the given text
     *
     * @param string $text The text to convert into a slug
     * @param int $maxLength The maximum length for the generated slug
     * @return string The generated slug
     */
    protected function generateSlug(string $text, int $maxLength): string
    {
        $slug = Text::slug(strtolower($text), ['transliterator' => null]);

        return substr($slug, 0, $maxLength);
    }

    /**
     * Validates that a slug is unique across both the model table and slugs history
     *
     * @param mixed $value The slug value to check for uniqueness
     * @param array<string, mixed> $context The validation context including the current entity data
     * @return bool True if the slug is unique, false otherwise
     */
    public function validateUniqueSlug(mixed $value, array $context): bool
    {
        if (empty($value)) {
            return true;
        }

        $targetField = $this->getConfig('targetField');

        $conditions = [$targetField => $value];

        if (!empty($context['data']['id'])) {
            $conditions['id !='] = $context['data']['id'];
        }

        if ($this->_table->exists($conditions)) {
            return false;
        }

        $slugsTable = $this->fetchTable('Slugs');

        $slugConditions = [
            'Slugs.slug' => $value,
            'Slugs.model' => $this->_table->getAlias(),
        ];

        if (!empty($context['data']['id'])) {
            $slugConditions[] = function (QueryExpression $exp) use ($context) {
                return $exp->notEq('Slugs.foreign_key', $context['data']['id']);
            };
        }

        return !$slugsTable->exists($slugConditions);
    }
}


// ----- END FILE: src/Model/Behavior/SlugBehavior.php -----

FILE: src/Model/Behavior/ImageValidationTrait.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4635 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Behavior;

use Cake\Validation\Validator;

/**
 * ImageValidationTrait
 *
 * Provides reusable image validation rules for models that handle image uploads.
 * This trait consolidates common image validation logic that was previously
 * duplicated across multiple table classes (Images, Articles, Users, Tags).
 *
 * Usage:
 * ```php
 * use App\Model\Behavior\ImageValidationTrait;
 *
 * class ImagesTable extends Table
 * {
 *     use ImageValidationTrait;
 *
 *     public function validationCreate(Validator $validator): Validator
 *     {
 *         return $this->addImageValidationRules($validator, 'image', true);
 *     }
 * }
 * ```
 */
trait ImageValidationTrait
{
    /**
     * Add standard image validation rules to a validator
     *
     * @param \Cake\Validation\Validator $validator The validator instance
     * @param string $field The field name to validate (default: 'image')
     * @param bool $required Whether the image field is required (default: false)
     * @param array $options Additional options for customization
     * @return \Cake\Validation\Validator
     */
    public function addImageValidationRules(
        Validator $validator,
        string $field = 'image',
        bool $required = false,
        array $options = [],
    ): Validator {
        // Merge default options with provided options
        $config = array_merge([
            'allowedMimeTypes' => ['image/jpeg', 'image/png', 'image/gif'],
            'maxFileSize' => '10MB',
            'messages' => [
                'mimeType' => __('Please upload only images (jpeg, png, gif).'),
                'fileSize' => __('Image must be less than 10MB.'),
                'required' => __('An image file is required.'),
            ],
        ], $options);

        // Handle required validation
        if ($required) {
            $validator
                ->requirePresence($field, 'create')
                ->notEmptyFile($field, $config['messages']['required']);
        } else {
            $validator->allowEmptyFile($field);
        }

        // Add file-specific validation rules
        return $validator->add($field, [
            'mimeType' => [
                'rule' => ['mimeType', $config['allowedMimeTypes']],
                'message' => $config['messages']['mimeType'],
                'on' => function ($context) use ($field) {
                    // Only validate mime type if file was uploaded successfully
                    return !empty($context['data'][$field])
                        && is_object($context['data'][$field])
                        && method_exists($context['data'][$field], 'getError')
                        && $context['data'][$field]->getError() === UPLOAD_ERR_OK;
                },
            ],
            'fileSize' => [
                'rule' => ['fileSize', '<=', $config['maxFileSize']],
                'message' => $config['messages']['fileSize'],
                'on' => function ($context) use ($field) {
                    // Only validate file size if file was uploaded successfully
                    return !empty($context['data'][$field])
                        && is_object($context['data'][$field])
                        && method_exists($context['data'][$field], 'getError')
                        && $context['data'][$field]->getError() === UPLOAD_ERR_OK;
                },
            ],
        ]);
    }

    /**
     * Add image validation rules for create operations (required)
     *
     * @param \Cake\Validation\Validator $validator The validator instance
     * @param string $field The field name to validate (default: 'image')
     * @param array $options Additional options for customization
     * @return \Cake\Validation\Validator
     */
    public function addRequiredImageValidation(
        Validator $validator,
        string $field = 'image',
        array $options = [],
    ): Validator {
        return $this->addImageValidationRules($validator, $field, true, $options);
    }

    /**
     * Add image validation rules for update operations (optional)
     *
     * @param \Cake\Validation\Validator $validator The validator instance
     * @param string $field The field name to validate (default: 'image')
     * @param array $options Additional options for customization
     * @return \Cake\Validation\Validator
     */
    public function addOptionalImageValidation(
        Validator $validator,
        string $field = 'image',
        array $options = [],
    ): Validator {
        return $this->addImageValidationRules($validator, $field, false, $options);
    }
}


// ----- END FILE: src/Model/Behavior/ImageValidationTrait.php -----

FILE: src/Model/Behavior/ImageAssociableBehavior.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3666 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Behavior;

use ArrayObject;
use Cake\Datasource\EntityInterface;
use Cake\Event\EventInterface;
use Cake\ORM\Behavior;
use Cake\ORM\TableRegistry;

/**
 * ImageAssociable Behavior
 *
 * This behavior allows models to associate multiple images with their entities.
 * It provides functionality for saving new image associations and unlinking existing ones.
 * It uses the Images model so you get the resizing and AI analysis for free!
 */
class ImageAssociableBehavior extends Behavior
{
    /**
     * Initialize method
     *
     * Sets up the belongsToMany association with the Images table.
     *
     * @param array $config The configuration settings for the behavior.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->_table->belongsToMany('Images', [
            'foreignKey' => 'foreign_key',
            'targetForeignKey' => 'image_id',
            'joinTable' => 'models_images',
            'conditions' => ['ModelsImages.model' => $this->_table->getAlias()],
        ]);
    }

    /**
     * After save callback
     *
     * Handles saving new image uploads and unlinking images after an entity is saved.
     *
     * @param \Cake\Event\EventInterface $event The afterSave event that was fired.
     * @param \Cake\Datasource\EntityInterface $entity The entity that was saved.
     * @param \ArrayObject $options The options passed to the save method.
     * @return void
     */
    public function afterSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        if (!empty($entity->imageUploads)) {
            $this->saveImages($entity);
        }

        if (!empty($entity->unlinkedImages)) {
            $this->unlinkImages($entity, $entity->unlinkedImages);
        }
    }

    /**
     * Save images associated with an entity
     *
     * @param \Cake\Datasource\EntityInterface $entity The entity to associate images with.
     * @return void
     */
    protected function saveImages(EntityInterface $entity): void
    {
        $imagesTable = TableRegistry::getTableLocator()->get('Images');
        $modelsImagesTable = TableRegistry::getTableLocator()->get('ModelsImages');

        foreach ($entity->imageUploads as $image) {
            $imageEntity = $imagesTable->newEntity([
                'file' => $image,
                'name' => $image->getClientFilename(),
            ]);
            if ($imagesTable->save($imageEntity)) {
                $modelsImagesTable->save($modelsImagesTable->newEntity([
                    'model' => $this->_table->getAlias(),
                    'foreign_key' => $entity->id,
                    'image_id' => $imageEntity->id,
                ]));
            }
        }
    }

    /**
     * Unlink images from an entity
     *
     * @param \Cake\Datasource\EntityInterface $entity The entity to unlink images from.
     * @param array $imageIds The IDs of images to unlink.
     * @return void
     */
    public function unlinkImages(EntityInterface $entity, array $imageIds): void
    {
        $imageIds = array_filter($imageIds, function ($value) {
            return $value !== '0';
        });

        if (empty($imageIds)) {
            return;
        }

        $modelsImagesTable = TableRegistry::getTableLocator()->get('ModelsImages');

        foreach ($imageIds as $imageId) {
            $modelsImagesTable->deleteAll([
                'model' => $this->_table->getAlias(),
                'foreign_key' => $entity->id,
                'image_id' => $imageId,
            ]);
        }
    }
}


// ----- END FILE: src/Model/Behavior/ImageAssociableBehavior.php -----

FILE: src/Model/Behavior/CommentableBehavior.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4887 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Behavior;

use ArrayObject;
use Cake\Cache\Cache;
use Cake\Datasource\EntityInterface;
use Cake\Event\EventInterface;
use Cake\ORM\Behavior;
use Cake\ORM\ResultSet;

/**
 * CommentableBehavior class
 *
 * This behavior provides functionality to manage comments associated with a model.
 */
class CommentableBehavior extends Behavior
{
    /**
     * @var array<string, mixed>
     */
    protected array $_defaultConfig = [
        'commentsTable' => 'Comments',
        'foreignKey' => 'foreign_key',
        'modelField' => 'model',
        'userField' => 'user_id',
        'contentField' => 'content',
    ];

    /**
     * Initialize the behavior with the given configuration.
     *
     * @param array<string, mixed> $config The configuration settings provided to the behavior.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->_table->hasMany($this->getConfig('commentsTable'), [
            'foreignKey' => $this->getConfig('foreignKey'),
            'conditions' => [
                $this->getConfig('commentsTable') . '.' . $this->getConfig('modelField') => $this->_table->getAlias(),
            ],
            'dependent' => true,
        ]);
    }

    /**
     * Clear the cache for a specific entity.
     *
     * @param string $entityId The ID of the entity to clear cache for.
     * @return void
     */
    protected function clearEntityCache(string $entityId): void
    {
        $entity = $this->_table->get($entityId);
        if ($entity->slug) {
            Cache::delete("article_{$entity->slug}", 'content');
        }
    }

    /**
     * Before save callback.
     *
     * Automatically saves new comments associated with the entity.
     *
     * @param \Cake\Event\EventInterface $event The beforeSave event that was fired.
     * @param \Cake\Datasource\EntityInterface $entity The entity that is going to be saved.
     * @param \ArrayObject $options The options passed to the save operation.
     * @return void
     */
    public function beforeSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        if ($entity->isNew() && !empty($entity->comments)) {
            $commentsTable = $this->_table->getAssociation($this->getConfig('commentsTable'))->getTarget();
            foreach ($entity->comments as $comment) {
                $commentEntity = $commentsTable->newEntity($comment);
                $commentEntity->set($this->getConfig('foreignKey'), $entity->id);
                $commentEntity->set($this->getConfig('modelField'), $this->_table->getAlias());
                $commentsTable->save($commentEntity);
            }
        }
    }

    /**
     * Add a comment to an entity.
     *
     * @param string $entityId The ID of the entity to which the comment is related.
     * @param string $userId The ID of the user who made the comment.
     * @param string $content The content of the comment.
     * @return \Cake\Datasource\EntityInterface|false The saved comment entity or false on failure.
     */
    public function addComment(string $entityId, string $userId, string $content): EntityInterface|false
    {
        $commentsTable = $this->_table->getAssociation($this->getConfig('commentsTable'))->getTarget();
        $comment = $commentsTable->newEntity([
            $this->getConfig('foreignKey') => $entityId,
            $this->getConfig('modelField') => $this->_table->getAlias(),
            $this->getConfig('userField') => $userId,
            $this->getConfig('contentField') => $content,
        ]);

        $result = $commentsTable->save($comment);

        if ($result) {
            $this->clearEntityCache($entityId);
        }

        return $result;
    }

    /**
     * Retrieve comments associated with an entity.
     *
     * @param string $entityId The ID of the entity for which to retrieve comments.
     * @param array<string, mixed> $options Options for the query, such as 'order' and 'limit'.
     * @return \Cake\ORM\ResultSet The result set containing the comments.
     */
    public function getComments(string $entityId, array $options = []): ResultSet
    {
        $commentsTable = $this->_table->getAssociation($this->getConfig('commentsTable'))->getTarget();
        $query = $commentsTable->find();
        $query->where([
            $this->getConfig('foreignKey') => $entityId,
            $this->getConfig('modelField') => $this->_table->getAlias(),
            'display' => true,
        ]);

        if (!empty($options['order'])) {
            $query->orderBy($options['order']);
        } else {
            $query->orderBy(['created' => 'DESC']);
        }

        if (!empty($options['limit'])) {
            $query->limit($options['limit']);
        }

        return $query->all();
    }
}


// ----- END FILE: src/Model/Behavior/CommentableBehavior.php -----

FILE: src/Model/Entity/Tag.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1637 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Behavior\Translate\TranslateTrait;
use Cake\ORM\Entity;

/**
 * Tag Entity
 *
 * @property string $id
 * @property string $title
 * @property \Cake\I18n\DateTime|null $created
 * @property \Cake\I18n\DateTime|null $modified
 *
 * @property \App\Model\Entity\Article[] $articles
 */
class Tag extends Entity
{
    use SeoEntityTrait;
    use TranslateTrait;
    use ImageUrlTrait;

    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'title' => true,
        'slug' => true,
        'description' => true,
        'created' => true,
        'modified' => true,
        'articles' => true,
        // SEO fields (managed by SeoEntityTrait)
        'meta_title' => true,
        'meta_description' => true,
        'meta_keywords' => true,
        'facebook_description' => true,
        'linkedin_description' => true,
        'twitter_description' => true,
        'instagram_description' => true,
        'dir' => true,
        'alt_text' => true,
        'keywords' => true,
        'size' => true,
        'mime' => true,
        'name' => true,
        'image' => true,
        'parent_id' => true,
        'main_menu' => true,
        'lft' => true,
        'rght' => true,
    ];
}


// ----- END FILE: src/Model/Entity/Tag.php -----

FILE: src/Model/Entity/Article.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 2649 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Behavior\Translate\TranslateTrait;
use Cake\ORM\Entity;

/**
 * Article Entity
 *
 * @property string $id
 * @property string $user_id
 * @property string $title
 * @property string|null $lede
 * @property bool|null $featured
 * @property bool|null $main_menu
 * @property string|null $body
 * @property string|null $markdown
 * @property string|null $summary
 * @property \Cake\I18n\DateTime|null $created
 * @property \Cake\I18n\DateTime|null $modified
 * @property string|null $slug
 * @property string|null $meta_title
 * @property string|null $meta_description
 * @property string|null $meta_keywords
 * @property string|null $facebook_description
 * @property string|null $linkedin_description
 * @property string|null $twitter_description
 * @property string|null $instagram_description
 * @property int|null $word_count
 * @property string $kind
 * @property string|null $parent_id
 * @property int|null $lft
 * @property int|null $rght
 * @property bool $published
 * @property bool $is_published
 * @property string|null $image
 *
 * @property \App\Model\Entity\User $user
 * @property \App\Model\Entity\Tag[] $tags
 * @property \App\Model\Entity\Image[] $images
 */
class Article extends Entity
{
    use SeoEntityTrait;
    use TranslateTrait;
    use ImageUrlTrait;

    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'user_id' => true,
        'title' => true,
        'lede' => true,
        'featured' => true,
        'main_menu' => true,
        'slug' => true,
        'body' => true,
        'markdown' => true,
        'summary' => true,
        'created' => true,
        'modified' => true,
        'word_count' => true,
        'kind' => true,
        'parent_id' => true,
        'lft' => true,
        'rght' => true,
        'published' => true,
        'is_published' => true,
        'tags' => true,
        'images' => true,
        'image' => true,
        // SEO fields (managed by SeoEntityTrait)
        'meta_title' => true,
        'meta_description' => true,
        'meta_keywords' => true,
        'facebook_description' => true,
        'linkedin_description' => true,
        'twitter_description' => true,
        'instagram_description' => true,
    ];
}


// ----- END FILE: src/Model/Entity/Article.php -----

FILE: src/Model/Entity/ModelsImage.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1000 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * ModelsImage Entity
 *
 * @property string $id
 * @property string $model
 * @property string $foreign_key
 * @property string $image_id
 * @property \Cake\I18n\DateTime|null $created
 * @property \Cake\I18n\DateTime|null $modified
 *
 * @property \App\Model\Entity\Image $image
 */
class ModelsImage extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'model' => true,
        'foreign_key' => true,
        'image_id' => true,
        'created' => true,
        'modified' => true,
        'image' => true,
    ];
}


// ----- END FILE: src/Model/Entity/ModelsImage.php -----

FILE: src/Model/Entity/BlockedIp.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1026 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * BlockedIp Entity
 *
 * @property string $id
 * @property string $ip_address
 * @property string|null $reason
 * @property \Cake\I18n\DateTime $blocked_at
 * @property \Cake\I18n\DateTime|null $expires_at
 * @property \Cake\I18n\DateTime|null $created
 * @property \Cake\I18n\DateTime|null $modified
 */
class BlockedIp extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'ip_address' => true,
        'reason' => true,
        'blocked_at' => true,
        'expires_at' => true,
        'created' => true,
        'modified' => true,
    ];
}


// ----- END FILE: src/Model/Entity/BlockedIp.php -----

FILE: src/Model/Entity/CookieConsent.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1945 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * CookieConsent Entity
 *
 * @property string $id
 * @property int|null $user_id
 * @property string|null $session_id
 * @property bool $analytics_consent
 * @property bool $functional_consent
 * @property bool $marketing_consent
 * @property bool $essential_consent
 * @property string $ip_address
 * @property string $user_agent
 * @property \Cake\I18n\DateTime|null $created
 * @property \Cake\I18n\DateTime|null $updated
 *
 * @property \App\Model\Entity\User $user
 */
class CookieConsent extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'user_id' => true,
        'session_id' => true,
        'analytics_consent' => true,
        'functional_consent' => true,
        'marketing_consent' => true,
        'essential_consent' => true,
        'ip_address' => true,
        'user_agent' => true,
        'created' => true,
        'updated' => true,
    ];

    /**
     * Check if analytics cookies are allowed.
     *
     * @return bool
     */
    public function hasAnalyticsConsent(): bool
    {
        return (bool)$this->analytics_consent;
    }

    /**
     * Check if functional cookies are allowed.
     *
     * @return bool
     */
    public function hasFunctionalConsent(): bool
    {
        return (bool)$this->functional_consent;
    }

    /**
     * Check if marketing cookies are allowed.
     *
     * @return bool
     */
    public function hasMarketingConsent(): bool
    {
        return (bool)$this->marketing_consent;
    }
}


// ----- END FILE: src/Model/Entity/CookieConsent.php -----

FILE: src/Model/Entity/ImageGallery.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4033 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Behavior\Translate\TranslateTrait;
use Cake\ORM\Entity;

/**
 * ImageGallery Entity
 *
 * @property string $id
 * @property string $name
 * @property string $slug
 * @property string|null $description
 * @property string|null $preview_image
 * @property bool $is_published
 * @property string|null $meta_title
 * @property string|null $meta_description
 * @property string|null $meta_keywords
 * @property string|null $facebook_description
 * @property string|null $linkedin_description
 * @property string|null $instagram_description
 * @property string|null $twitter_description
 * @property \Cake\I18n\DateTime|null $created
 * @property \Cake\I18n\DateTime|null $modified
 * @property string|null $created_by
 * @property string|null $modified_by
 *
 * @property \App\Model\Entity\Image[] $images
 */
class ImageGallery extends Entity
{
    use SeoEntityTrait;
    use TranslateTrait;

    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'name' => true,
        'slug' => true,
        'description' => true,
        'preview_image' => true,
        'is_published' => true,
        // SEO fields (managed by SeoEntityTrait)
        'meta_title' => true,
        'meta_description' => true,
        'meta_keywords' => true,
        'facebook_description' => true,
        'linkedin_description' => true,
        'instagram_description' => true,
        'twitter_description' => true,
        'created' => true,
        'modified' => true,
        'created_by' => true,
        'modified_by' => true,
        'images' => true,
    ];

    /**
     * Get the preview image URL for this gallery
     *
     * @return string|null Preview image URL or null if no preview exists
     */
    public function getPreviewImageUrl(): ?string
    {
        if (!$this->preview_image) {
            return null;
        }

        $previewPath = WWW_ROOT . 'files' . DS . 'ImageGalleries' . DS . 'preview' . DS . $this->preview_image;
        if (!file_exists($previewPath)) {
            return null;
        }

        return '/files/ImageGalleries/preview/' . $this->preview_image;
    }

    /**
     * Check if this gallery has a preview image available
     *
     * @return bool True if preview image exists and is accessible
     */
    public function hasPreviewImage(): bool
    {
        return $this->getPreviewImageUrl() !== null;
    }

    /**
     * Get the status display name
     *
     * @return string Published or Un-Published
     */
    public function getStatusDisplay(): string
    {
        return $this->is_published ? __('Published') : __('Un-Published');
    }

    /**
     * Get the status CSS class for badges
     *
     * @return string CSS class for status badge
     */
    public function getStatusClass(): string
    {
        return $this->is_published ? 'bg-success' : 'bg-warning';
    }

    /**
     * Get the number of images in this gallery
     *
     * @return int Number of images
     */
    public function getImageCount(): int
    {
        return is_array($this->images) ? count($this->images) : 0;
    }

    /**
     * Get the total file size of all images in this gallery
     *
     * @return int Total file size in bytes
     */
    public function getTotalFileSize(): int
    {
        if (!is_array($this->images) || empty($this->images)) {
            return 0;
        }

        $totalSize = 0;
        foreach ($this->images as $image) {
            if (isset($image->file_size) && is_numeric($image->file_size)) {
                $totalSize += (int)$image->file_size;
            }
        }

        return $totalSize;
    }
}


// ----- END FILE: src/Model/Entity/ImageGallery.php -----

FILE: src/Model/Entity/SystemLog.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 900 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * SystemLog Entity
 *
 * @property string $id
 * @property string $level
 * @property string $message
 * @property string|null $context
 * @property \Cake\I18n\DateTime $created
 * @property string $group_name
 */
class SystemLog extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'level' => true,
        'message' => true,
        'context' => true,
        'created' => true,
        'group_name' => true,
    ];
}


// ----- END FILE: src/Model/Entity/SystemLog.php -----

FILE: src/Model/Entity/Comment.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1170 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * Comment Entity
 *
 * @property string $id
 * @property string $foreign_key
 * @property string $model
 * @property string $user_id
 * @property string $content
 * @property bool $display
 * @property bool $is_inappropriate
 * @property \Cake\I18n\DateTime|null $created
 * @property \Cake\I18n\DateTime|null $modified
 *
 * @property \App\Model\Entity\User $user
 */
class Comment extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'foreign_key' => true,
        'model' => true,
        'user_id' => true,
        'content' => true,
        'display' => true,
        'is_inappropriate' => false,
        'created' => true,
        'modified' => true,
        'user' => true,
    ];
}


// ----- END FILE: src/Model/Entity/Comment.php -----

FILE: src/Model/Entity/ArticlesTag.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 837 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * ArticlesTag Entity
 *
 * @property string $article_id
 * @property string $tag_id
 *
 * @property \App\Model\Entity\Article $article
 * @property \App\Model\Entity\Tag $tag
 */
class ArticlesTag extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'article_id' => true,
        'tag_id' => true,
        'article' => true,
        'tag' => true,
    ];
}


// ----- END FILE: src/Model/Entity/ArticlesTag.php -----

FILE: src/Model/Entity/ArticlesTranslation.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 821 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * ArticlesTranslation Entity
 *
 * @property string $id
 * @property string $locale
 * @property string|null $title
 * @property string|null $body
 * @property string|null $summary
 */
class ArticlesTranslation extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'title' => true,
        'body' => true,
        'summary' => true,
    ];
}


// ----- END FILE: src/Model/Entity/ArticlesTranslation.php -----

FILE: src/Model/Entity/Slug.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 825 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * Slug Entity
 *
 * @property string $id
 * @property string $model
 * @property string $foreign_key
 * @property string $slug
 * @property \Cake\I18n\DateTime $created
 */
class Slug extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'model' => true,
        'foreign_key' => true,
        'slug' => true,
        'created' => true,
    ];
}


// ----- END FILE: src/Model/Entity/Slug.php -----

FILE: src/Model/Entity/ImageUrlTrait.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 2743 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use App\Utility\SettingsManager;

trait ImageUrlTrait
{
    /**
     * Retrieves the URL for an image at original size by removing the 'webroot/' prefix from the directory path.
     *
     * This method constructs the image URL by concatenating the directory and image name,
     * and then removes the 'webroot/' part from the path to generate a relative URL.
     *
     * @return string The relative URL of the image.
     */
    protected function _getImageUrl(): string
    {
        $url = str_replace('webroot/', '', $this->dir . $this->image);
        // Ensure URL starts with a slash for absolute path
        return '/' . ltrim($url, '/');
    }

    /**
     * Magic method to dynamically retrieve image URLs based on image size names.
     *
     * This method checks if the requested attribute name matches the pattern for image URLs
     * (e.g., "smallImageUrl") and returns the corresponding image URL if available.
     * If the attribute does not match the pattern, it delegates to the parent::__get() method.
     *
     * @param string $attribute The name of the attribute being accessed.
     * @return mixed The URL of the image if the attribute matches the pattern, otherwise the result of parent::__get().
     */
    public function &__get(string $attribute): mixed
    {
        if (preg_match('/^(.+)ImageUrl$/', $attribute, $matches)) {
            $size = lcfirst($matches[1]);
            $imageSizes = SettingsManager::read('ImageSizes');
            if (isset($imageSizes[$size])) {
                $url = $this->getImageUrlBySize($size);

                return $url;
            }
        }

        return parent::__get($attribute);
    }

    /**
     * Retrieves the URL for an image of a specified size.
     *
     * This method constructs the URL for an image based on the provided size by
     * removing the 'webroot/' prefix and appending the directory, size, and image name.
     *
     * @param string $size The size of the image (e.g., 'thumbnail', 'medium').
     * @return string The constructed URL for the image.
     */
    public function getImageUrlBySize(string $size): string
    {
        $imageSizes = SettingsManager::read('ImageSizes');

        // Use the width value as directory name (e.g., 100, 300, 600)
        if (isset($imageSizes[$size])) {
            $url = str_replace('webroot/', '', $this->dir . $imageSizes[$size] . DS . $this->image);
        } else {
            // Fallback to original image if size not found
            $url = str_replace('webroot/', '', $this->dir . $this->image);
        }

        // Ensure URL starts with a slash for absolute path
        return '/' . ltrim($url, '/');
    }
}


// ----- END FILE: src/Model/Entity/ImageUrlTrait.php -----

FILE: src/Model/Entity/Internationalisation.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 947 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * Internationalisation Entity
 *
 * @property string $id
 * @property string $locale
 * @property string $message_id
 * @property string|null $message_str
 * @property \Cake\I18n\DateTime $created
 * @property \Cake\I18n\DateTime $modified
 */
class Internationalisation extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'locale' => true,
        'message_id' => true,
        'message_str' => true,
        'created' => true,
        'modified' => true,
    ];
}


// ----- END FILE: src/Model/Entity/Internationalisation.php -----

FILE: src/Model/Entity/PageView.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1002 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * PageView Entity
 *
 * @property string $id
 * @property string $article_id
 * @property string $ip_address
 * @property string|null $user_agent
 * @property string|null $referer
 * @property \Cake\I18n\DateTime|null $created
 *
 * @property \App\Model\Entity\Article $article
 */
class PageView extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'article_id' => true,
        'ip_address' => true,
        'user_agent' => true,
        'referer' => true,
        'created' => true,
        'article' => true,
    ];
}


// ----- END FILE: src/Model/Entity/PageView.php -----

FILE: src/Model/Entity/Image.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 984 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * Image Entity
 *
 * @property string $id
 * @property string $path
 * @property string $path
 * @property \Cake\I18n\DateTime $created
 * @property \Cake\I18n\DateTime $modified
 */
class Image extends Entity
{
    use ImageUrlTrait;

    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'name' => true,
        'alt_text' => true,
        'keywords' => true,
        'image' => true,
        'dir' => true,
        'size' => true,
        'mime' => true,
        'created' => true,
        'modified' => true,
    ];
}


// ----- END FILE: src/Model/Entity/Image.php -----

FILE: src/Model/Entity/Aiprompt.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1040 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * Aiprompt Entity
 *
 * @property string $id
 * @property string $task_type
 * @property string $system_prompt
 * @property string $model
 * @property int $max_tokens
 * @property float $temperature
 * @property \Cake\I18n\DateTime $created
 * @property \Cake\I18n\DateTime $modified
 */
class Aiprompt extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'task_type' => true,
        'system_prompt' => true,
        'model' => true,
        'max_tokens' => true,
        'temperature' => true,
        'created' => true,
        'modified' => true,
    ];
}


// ----- END FILE: src/Model/Entity/Aiprompt.php -----

FILE: src/Model/Entity/SeoEntityTrait.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3557 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

/**
 * SeoEntityTrait
 *
 * Provides common SEO field accessibility and helper methods for Entity classes.
 * This trait consolidates duplicate SEO field accessibility patterns that were
 * previously scattered across multiple entity classes.
 */
trait SeoEntityTrait
{
    /**
     * Get the standard SEO fields accessibility array
     *
     * @return array<string, bool> SEO fields with accessibility set to true
     */
    protected function getSeoAccessibleFields(): array
    {
        return [
            'meta_title' => true,
            'meta_description' => true,
            'meta_keywords' => true,
            'facebook_description' => true,
            'linkedin_description' => true,
            'twitter_description' => true,
            'instagram_description' => true,
        ];
    }

    /**
     * Check if any SEO fields have values
     *
     * @return bool True if at least one SEO field has a value
     */
    public function hasSeoContent(): bool
    {
        $seoFields = array_keys($this->getSeoAccessibleFields());

        foreach ($seoFields as $field) {
            if (!empty($this->{$field})) {
                return true;
            }
        }

        return false;
    }

    /**
     * Get all SEO field values as an array
     *
     * @return array<string, string|null> Array of SEO field name => value pairs
     */
    public function getSeoData(): array
    {
        $seoFields = array_keys($this->getSeoAccessibleFields());
        $seoData = [];

        foreach ($seoFields as $field) {
            $seoData[$field] = $this->{$field} ?? null;
        }

        return $seoData;
    }

    /**
     * Set multiple SEO fields at once
     *
     * @param array<string, string> $seoData Array of SEO field name => value pairs
     * @return $this
     */
    public function setSeoData(array $seoData)
    {
        $allowedFields = array_keys($this->getSeoAccessibleFields());

        foreach ($seoData as $field => $value) {
            if (in_array($field, $allowedFields)) {
                $this->{$field} = $value;
            }
        }

        return $this;
    }

    /**
     * Get the effective meta title (falls back to title if meta_title is empty)
     *
     * @return string|null
     */
    public function getEffectiveMetaTitle(): ?string
    {
        if (!empty($this->meta_title)) {
            return $this->meta_title;
        }

        // Fall back to entity title if available
        if (property_exists($this, 'title') && !empty($this->title)) {
            return $this->title;
        }

        // Fall back to entity name if available (for galleries)
        if (property_exists($this, 'name') && !empty($this->name)) {
            return $this->name;
        }

        return null;
    }

    /**
     * Get the effective meta description (falls back to description/lede if meta_description is empty)
     *
     * @return string|null
     */
    public function getEffectiveMetaDescription(): ?string
    {
        if (!empty($this->meta_description)) {
            return $this->meta_description;
        }

        // Fall back to entity description if available
        if (property_exists($this, 'description') && !empty($this->description)) {
            return $this->description;
        }

        // Fall back to entity lede if available (for articles)
        if (property_exists($this, 'lede') && !empty($this->lede)) {
            return $this->lede;
        }

        return null;
    }
}


// ----- END FILE: src/Model/Entity/SeoEntityTrait.php -----

FILE: src/Model/Entity/Setting.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1147 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * Setting Entity
 *
 * @property string $id
 * @property string $category
 * @property string $key_name
 * @property string|null $value
 * @property string $type
 * @property \Cake\I18n\DateTime|null $created
 * @property \Cake\I18n\DateTime|null $modified
 */
class Setting extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'ordering' => true,
        'category' => true,
        'key_name' => true,
        'value' => true,
        'type' => true,
        'value_type' => true,
        'value_obscure' => true,
        'description' => true,
        'data' => true,
        'column_width' => true,
        'created' => true,
        'modified' => true,
    ];
}


// ----- END FILE: src/Model/Entity/Setting.php -----

FILE: src/Model/Entity/User.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4686 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Authentication\PasswordHasher\DefaultPasswordHasher;
use Cake\ORM\Entity;

/**
 * User Entity
 *
 * @property string $id
 * @property string $username
 * @property string $password
 * @property string|null $email
 * @property bool $is_admin
 * @property bool $active
 * @property string|null $image
 * @property string|null $keywords
 * @property string|null $alt_text
 * @property \Cake\I18n\DateTime|null $created
 * @property \Cake\I18n\DateTime|null $modified
 *
 * @property \App\Model\Entity\Article[] $articles
 */
class User extends Entity
{
    use ImageUrlTrait;

    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'username' => true,
        'password' => true,
        'email' => true,
        'created' => true,
        'modified' => true,
        'articles' => true,
        'image' => true,
        'is_admin' => false,
        'active' => false,
        'keywords' => true,
        'alt_text' => true,
    ];

    /**
     * Fields that are excluded from JSON versions of the entity.
     *
     * @var list<string>
     */
    protected array $_hidden = [
        'password',
    ];

    /**
     * Sets the password for the user entity.
     *
     * This method hashes the password using the DefaultPasswordHasher if the provided
     * password is not empty. If the password is empty, it returns the original password value.
     * This ensures that passwords are stored securely in the database and prevents
     * overwriting existing passwords with empty values during updates.
     *
     * @param string $password The plain text password to be hashed.
     * @return string|null The hashed password if the input is not empty, or the original password value.
     */
    protected function _setPassword(string $password): ?string
    {
        if (strlen($password) > 0) {
            return (new DefaultPasswordHasher())->hash($password);
        }

        return $this->getOriginal('password');
    }

    /**
     * Checks if the account associated with the given user ID is being disabled by the user themselves.
     *
     * This method evaluates whether the 'active' flag is set to true in the provided data array
     * and if the current object's ID matches the provided user ID. If both conditions are met, it returns true,
     * indicating that the user is attempting to disable their own account.
     *
     * @param string $userId The ID of the user whose account is being checked.
     * @param array $data An associative array containing account data, including the 'active' flag.
     * @return bool|null Returns true if the account is being disabled by the user themselves, false otherwise.
     *                   (Note: The method always returns a boolean, so the null part of the return type
     *                   is not utilized in the current implementation.)
     */
    public function lockAdminAccountError(string $userId, array $data): ?bool
    {
        //Setting is_admin to 0 for your own account
        if (isset($data['is_admin']) && !$data['is_admin'] && $this->id == $userId) {
            return true;
        }

        return false;
    }

    /**
     * Checks if an admin account is being demoted by the account owner.
     *
     * This method determines whether the 'is_admin' flag is being set to false (0)
     * for the account that matches the provided user ID. It returns true if the
     * account owner is attempting to remove their own admin privileges, otherwise
     * it returns false.
     *
     * @param string $userId The ID of the user attempting to modify the account.
     * @param array $data An associative array containing the account data, including the 'is_admin' flag.
     * @return bool|null Returns true if the admin account is being demoted by the owner, false otherwise.
     *                   (Note: The method always returns a boolean, so the null part of the return type
     *                   is not utilized in the current implementation.)
     */
    public function lockEnabledAccountError(string $userId, array $data): ?bool
    {
        //Setting active to 0 for your own account
        if (isset($data['active']) && !$data['active'] && $this->id == $userId) {
            return true;
        }

        return false;
    }
}


// ----- END FILE: src/Model/Entity/User.php -----

FILE: src/Model/Entity/EmailTemplate.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 986 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * EmailTemplate Entity
 *
 * @property string $id
 * @property string $name
 * @property string $subject
 * @property string|null $body_html
 * @property string|null $body_plain
 * @property \Cake\I18n\DateTime $created
 * @property \Cake\I18n\DateTime $modified
 */
class EmailTemplate extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'name' => true,
        'subject' => true,
        'body_html' => true,
        'body_plain' => true,
        'created' => true,
        'modified' => true,
    ];
}


// ----- END FILE: src/Model/Entity/EmailTemplate.php -----

FILE: src/Model/Entity/ImageGalleriesImage.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1182 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * ImageGalleriesImage Entity
 *
 * @property string $id
 * @property string $image_gallery_id
 * @property string $image_id
 * @property int $position
 * @property string|null $caption
 * @property \Cake\I18n\DateTime|null $created
 * @property \Cake\I18n\DateTime|null $modified
 *
 * @property \App\Model\Entity\ImageGallery $image_gallery
 * @property \App\Model\Entity\Image $image
 */
class ImageGalleriesImage extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'image_gallery_id' => true,
        'image_id' => true,
        'position' => true,
        'caption' => true,
        'created' => true,
        'modified' => true,
        'image_gallery' => true,
        'image' => true,
    ];
}


// ----- END FILE: src/Model/Entity/ImageGalleriesImage.php -----

FILE: src/Model/Entity/UserAccountConfirmation.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 903 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Entity;

use Cake\ORM\Entity;

/**
 * UserAccountConfirmation Entity
 *
 * @property string $id
 * @property string $user_id
 * @property string $confirmation_code
 * @property \Cake\I18n\DateTime|null $created
 *
 * @property \App\Model\Entity\User $user
 */
class UserAccountConfirmation extends Entity
{
    /**
     * Fields that can be mass assigned using newEntity() or patchEntity().
     *
     * Note that when '*' is set to true, this allows all unspecified fields to
     * be mass assigned. For security purposes, it is advised to set '*' to false
     * (or remove it), and explicitly make individual fields accessible as needed.
     *
     * @var array<string, bool>
     */
    protected array $_accessible = [
        'user_id' => true,
        'confirmation_code' => true,
        'created' => true,
        'user' => true,
    ];
}


// ----- END FILE: src/Model/Entity/UserAccountConfirmation.php -----

FILE: src/Model/Table/PageViewsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3901 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * PageViews Model
 *
 * @property \App\Model\Table\ArticlesTable&\Cake\ORM\Association\BelongsTo $Articles
 * @method \App\Model\Entity\PageView newEmptyEntity()
 * @method \App\Model\Entity\PageView newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\PageView> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\PageView get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\PageView findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\PageView patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\PageView> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\PageView|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\PageView saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\PageView>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\PageView>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\PageView>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\PageView> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\PageView>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\PageView>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\PageView>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\PageView> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class PageViewsTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('page_views');
        $this->setDisplayField('ip_address');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');

        $this->belongsTo('Articles', [
            'foreignKey' => 'article_id',
            'joinType' => 'INNER',
        ]);

        $this->addBehavior('CounterCache', [
            'Articles' => [
                'view_count',
            ],
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->uuid('article_id')
            ->notEmptyString('article_id');

        $validator
            ->scalar('ip_address')
            ->maxLength('ip_address', 45)
            ->requirePresence('ip_address', 'create')
            ->notEmptyString('ip_address');

        $validator
            ->scalar('user_agent')
            ->allowEmptyString('user_agent');

        $validator
            ->scalar('referer')
            ->allowEmptyString('referer');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->existsIn(['article_id'], 'Articles'), ['errorField' => 'article_id']);

        return $rules;
    }
}


// ----- END FILE: src/Model/Table/PageViewsTable.php -----

FILE: src/Model/Table/CookieConsentsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 7399 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use App\Model\Entity\CookieConsent;
use Cake\Http\Cookie\Cookie;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;
use DateTime;

/**
 * CookieConsents Model
 *
 * @property \App\Model\Table\UsersTable&\Cake\ORM\Association\BelongsTo $Users
 * @method \App\Model\Entity\CookieConsent newEmptyEntity()
 * @method \App\Model\Entity\CookieConsent newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\CookieConsent> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\CookieConsent get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\CookieConsent findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\CookieConsent patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\CookieConsent> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\CookieConsent|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\CookieConsent saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\CookieConsent>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\CookieConsent>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\CookieConsent>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\CookieConsent> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\CookieConsent>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\CookieConsent>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\CookieConsent>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\CookieConsent> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class CookieConsentsTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('cookie_consents');
        $this->setDisplayField('ip_address');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');

        $this->belongsTo('Users', [
            'foreignKey' => 'user_id',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->uuid('user_id')
            ->allowEmptyString('user_id');

        $validator
            ->scalar('session_id')
            ->maxLength('session_id', 255)
            ->allowEmptyString('session_id');

        $validator
            ->boolean('analytics_consent')
            ->notEmptyString('analytics_consent');

        $validator
            ->boolean('functional_consent')
            ->notEmptyString('functional_consent');

        $validator
            ->boolean('marketing_consent')
            ->notEmptyString('marketing_consent');

        $validator
            ->boolean('essential_consent')
            ->notEmptyString('essential_consent');

        $validator
            ->scalar('ip_address')
            ->maxLength('ip_address', 45)
            ->requirePresence('ip_address', 'create')
            ->notEmptyString('ip_address');

        $validator
            ->scalar('user_agent')
            ->maxLength('user_agent', 255)
            ->requirePresence('user_agent', 'create')
            ->notEmptyString('user_agent');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->existsIn(['user_id'], 'Users'), ['errorField' => 'user_id']);

        return $rules;
    }

    /**
     * Creates a consent cookie from a consent entity
     * getLatestConsent($sessionId, $user->getIdentifier())
     *
     * @param \App\Model\Entity\CookieConsent $consent The consent entity to create cookie from
     * @return \Cake\Http\Cookie\Cookie The configured cookie object
     */
    public function createConsentCookie(CookieConsent $consent): Cookie
    {
        $isHttps = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on';

        $cookie = (new Cookie('consent_cookie'))
            ->withValue(json_encode([
                'user_id' => $consent->user_id,
                'analytics_consent' => $consent->analytics_consent,
                'functional_consent' => $consent->functional_consent,
                'marketing_consent' => $consent->marketing_consent,
                'essential_consent' => true,
                'created' => time(),
            ]))
            ->withExpiry(new DateTime('+1 year'))
            ->withPath('/')
            ->withHttpOnly(true)
            ->withSameSite('Lax');

        // Only set Secure flag if we're actually on HTTPS
        if ($isHttps) {
            $cookie = $cookie->withSecure(true);
        }

        return $cookie;
    }

    /**
     * Gets the latest consent record prioritizing user_id over session_id
     *
     * @param string|null $sessionId The session ID to search for
     * @param string|null $userId The user ID to search for
     * @return array|null Array of consent data or null if no match found
     */
    public function getLatestConsent(?string $sessionId = null, ?string $userId = null): ?array
    {
        $fields = [
            'user_id',
            'session_id',
            'analytics_consent',
            'functional_consent',
            'marketing_consent',
            'essential_consent',
            'ip_address',
            'user_agent',
        ];

        // If both parameters are null, return early
        if ($sessionId === null && $userId === null) {
            return null;
        }

        // First try to find by user_id if provided
        if ($userId !== null) {
            $result = $this->find()
                ->select($fields)
                ->where(['user_id' => $userId])
                ->orderBy(['created' => 'DESC'])
                ->first();

            if ($result !== null) {
                return $result->toArray();
            }
        }

        // If no result found by user_id and session_id is provided, try finding by session_id
        if ($sessionId !== null) {
            $result = $this->find()
                ->select($fields)
                ->where(['session_id' => $sessionId])
                ->orderBy(['created' => 'DESC'])
                ->first();

            if ($result !== null) {
                return $result->toArray();
            }
        }

        // No matching record found
        return null;
    }
}


// ----- END FILE: src/Model/Table/CookieConsentsTable.php -----

FILE: src/Model/Table/TagsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 9270 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use App\Utility\SettingsManager;
use ArrayObject;
use Cake\Datasource\EntityInterface;
use Cake\Event\EventInterface;
use Cake\Log\LogTrait;
use Cake\ORM\Behavior\Translate\TranslateTrait;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * Tags Model
 *
 * @property \App\Model\Table\ArticlesTable&\Cake\ORM\Association\BelongsToMany $Articles
 * @method \App\Model\Entity\Tag newEmptyEntity()
 * @method \App\Model\Entity\Tag newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\Tag> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\Tag get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\Tag findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\Tag patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\Tag> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\Tag|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\Tag saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\Tag>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Tag>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Tag>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Tag> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Tag>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Tag>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Tag>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Tag> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class TagsTable extends Table
{
    use LogTrait;
    use QueueableJobsTrait;
    use SeoFieldsTrait;
    use TranslateTrait;

    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('tags');
        $this->setDisplayField('title');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');

        $this->addBehavior('Orderable', [
            'displayField' => 'title',
        ]);

        $this->belongsTo('ParentTag', [
            'className' => 'Tags',
            'foreignKey' => 'parent_id',
        ]);

        $this->addBehavior('Slug');

        $this->addBehavior('Translate', [
            'fields' => [
                'title',
                'description',
                'meta_title',
                'meta_description',
                'meta_keywords',
                'facebook_description',
                'linkedin_description',
                'instagram_description',
                'twitter_description',
            ],
            'defaultLocale' => 'en_GB',
            'allowEmptyTranslations' => false,
        ]);

        $this->belongsToMany('Articles', [
            'foreignKey' => 'tag_id',
            'targetForeignKey' => 'article_id',
            'joinTable' => 'articles_tags',
        ]);

        $this->addBehavior('QueueableImage', [
            'folder_path' => 'files/Tags/image/',
            'field' => 'image',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('title')
            ->maxLength('title', 255)
            ->requirePresence('title', 'create')
            ->notEmptyString('title');

        return $validator;
    }

    /**
     * After save callback.
     *
     * This method is triggered after a tag entity is saved. It queues a TagSeoUpdateJob
     * if AI settings are enabled.
     *
     * @param \Cake\Event\EventInterface $event The afterSave event that was fired.
     * @param \Cake\Datasource\EntityInterface $entity The tag entity that was saved.
     * @param \ArrayObject $options The options passed to the save method.
     * @return void
     * @throws \Exception If there is an error while queueing the SEO update job.
     */
    public function afterSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        // noMessage flag will be true if save came from a Job (stops looping)
        $noMessage = $options['noMessage'] ?? false;
        if (SettingsManager::read('AI.enabled') && !$noMessage) {
            $data = [
                'id' => $entity->id,
                'title' => $entity->title,
            ];

            if (SettingsManager::read('AI.tagSEO') && !empty($this->emptySeoFields($entity))) {
                $this->queueJob('App\Job\TagSeoUpdateJob', $data);
            }

            if (SettingsManager::read('AI.tagTranslations')) {
                $this->queueJob('App\Job\TranslateTagJob', $data);
            }
        }
    }

    /**
     * Get all SEO fields for Tags table (includes description field)
     *
     * @return array<string> List of all SEO field names for tags
     */
    protected function getAllSeoFields(): array
    {
        return array_merge(['description'], $this->getStandardSeoFields());
    }

    /**
     * Retrieves a simple threaded array of tags.
     *
     * This method performs a 'threaded' find operation on the current model, selecting
     * the 'id', 'title', and 'parent_id' fields. It then processes the result set to
     * create an associative array where each key is a tag title and its value is an
     * array of titles of its direct children.
     *
     * @return array An associative array where keys are tag titles and values are arrays
     *               of titles of their direct children.
     */
    public function getSimpleThreadedArray(): array
    {
        return $this->find('threaded')
        ->select(['id', 'title', 'parent_id'])
        ->all()
        ->reduce(function ($accumulator, $tag) {
            $childrenTitles = array_map(function ($child) {
                return $child->title;
            }, $tag->children);
            $accumulator[$tag->title] = $childrenTitles;

            return $accumulator;
        }, []);
    }

    /**
     * Retrieves root tags from the database.
     *
     * This method fetches tags that have no parent (i.e., root tags) and allows for additional conditions
     * to be applied to the query. The results are ordered by the 'lft' field in ascending order and cached
     * using the specified cache key.
     *
     * @param string $cacheKey The key used for caching the query results. The cache key is appended with 'root_tags'.
     * @param array $additionalConditions Optional array of additional query conditions to apply
     * @return array<\App\Model\Entity\Tag> List of Tag entities that are root level (no parent)
     * @throws \Cake\Database\Exception\DatabaseException When there is a database error
     * @throws \RuntimeException When the cache engine is not properly configured
     */
    public function getRootTags(string $cacheKey, array $additionalConditions = []): array
    {
        $conditions = [
            'Tags.parent_id IS' => null,
        ];
        $conditions = array_merge($conditions, $additionalConditions);
        $query = $this->find()
            ->where($conditions)
            ->orderBy(['lft' => 'ASC'])
            ->cache($cacheKey . 'root_tags', 'content');

        $results = $query->all()->toList();

        return $results;
    }

    /**
     * Retrieves tags that are marked for display in the main menu.
     *
     * This method fetches all tags that have main_menu flag set to true, ordered by their
     * tree position (lft). Results are cached using the provided cache key. Additional
     * conditions can be merged with the base conditions if needed.
     *
     * @param string $cacheKey The base cache key to use for caching the results
     * @param array $additionalConditions Optional array of additional query conditions to apply
     * @return array<\App\Model\Entity\Tag> List of Tag entities matching the criteria
     * @throws \Cake\Database\Exception\DatabaseException When there is a database error
     * @throws \RuntimeException When the cache engine is not properly configured
     */
    public function getMainMenuTags(string $cacheKey, array $additionalConditions = []): array
    {
        $conditions = [
            'Tags.main_menu' => 1,
        ];
        $conditions = array_merge($conditions, $additionalConditions);
        $query = $this->find()
            ->where($conditions)
            ->orderBy(['lft' => 'ASC'])
            ->cache($cacheKey . 'main_menu_tags', 'content');

        $results = $query->all()->toList();

        return $results;
    }
}


// ----- END FILE: src/Model/Table/TagsTable.php -----

FILE: src/Model/Table/SystemLogsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3224 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * SystemLogs Model
 *
 * @method \App\Model\Entity\SystemLog newEmptyEntity()
 * @method \App\Model\Entity\SystemLog newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\SystemLog> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\SystemLog get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\SystemLog findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\SystemLog patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\SystemLog> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\SystemLog|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\SystemLog saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\SystemLog>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\SystemLog>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\SystemLog>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\SystemLog> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\SystemLog>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\SystemLog>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\SystemLog>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\SystemLog> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class SystemLogsTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('system_logs');
        $this->setDisplayField('level');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('level')
            ->maxLength('level', 50)
            ->requirePresence('level', 'create')
            ->notEmptyString('level');

        $validator
            ->scalar('message')
            ->requirePresence('message', 'create')
            ->notEmptyString('message');

        $validator
            ->scalar('context')
            ->allowEmptyString('context');

        $validator
            ->scalar('group_name')
            ->maxLength('group_name', 100)
            ->requirePresence('group_name', 'create')
            ->notEmptyString('group_name');

        return $validator;
    }
}


// ----- END FILE: src/Model/Table/SystemLogsTable.php -----

FILE: src/Model/Table/AipromptsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3543 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * Aiprompts Model
 *
 * @method \App\Model\Entity\Aiprompt newEmptyEntity()
 * @method \App\Model\Entity\Aiprompt newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\Aiprompt> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\Aiprompt get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\Aiprompt findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\Aiprompt patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\Aiprompt> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\Aiprompt|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\Aiprompt saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\Aiprompt>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Aiprompt>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Aiprompt>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Aiprompt> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Aiprompt>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Aiprompt>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Aiprompt>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Aiprompt> deleteManyOrFail(iterable $entities, array $options = [])
 */
class AipromptsTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('aiprompts');
        $this->setDisplayField('task_type');
        $this->setPrimaryKey('id');
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('task_type')
            ->maxLength('task_type', 50)
            ->requirePresence('task_type', 'create')
            ->notEmptyString('task_type');

        $validator
            ->scalar('system_prompt')
            ->requirePresence('system_prompt', 'create')
            ->notEmptyString('system_prompt');

        $validator
            ->scalar('model')
            ->maxLength('model', 50)
            ->requirePresence('model', 'create')
            ->notEmptyString('model');

        $validator
            ->integer('max_tokens')
            ->requirePresence('max_tokens', 'create')
            ->notEmptyString('max_tokens');

        $validator
            ->numeric('temperature')
            ->requirePresence('temperature', 'create')
            ->notEmptyString('temperature');

        $validator
            ->dateTime('created')
            ->notEmptyDateTime('created');

        $validator
            ->dateTime('modified')
            ->notEmptyDateTime('modified');

        return $validator;
    }
}


// ----- END FILE: src/Model/Table/AipromptsTable.php -----

FILE: src/Model/Table/ModelsImagesTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3743 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * ModelsImages Model
 *
 * @property \App\Model\Table\ImagesTable&\Cake\ORM\Association\BelongsTo $Images
 * @method \App\Model\Entity\ModelsImage newEmptyEntity()
 * @method \App\Model\Entity\ModelsImage newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\ModelsImage> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\ModelsImage get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\ModelsImage findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\ModelsImage patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\ModelsImage> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\ModelsImage|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\ModelsImage saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\ModelsImage>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ModelsImage>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ModelsImage>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ModelsImage> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ModelsImage>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ModelsImage>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ModelsImage>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ModelsImage> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class ModelsImagesTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('models_images');
        $this->setDisplayField('id');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');

        $this->belongsTo('Images', [
            'foreignKey' => 'image_id',
            'joinType' => 'INNER',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('model')
            ->maxLength('model', 255)
            ->requirePresence('model', 'create')
            ->notEmptyString('model');

        $validator
            ->uuid('foreign_key')
            ->requirePresence('foreign_key', 'create')
            ->notEmptyString('foreign_key');

        $validator
            ->uuid('image_id')
            ->notEmptyString('image_id');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->existsIn(['image_id'], 'Images'), ['errorField' => 'image_id']);

        return $rules;
    }
}


// ----- END FILE: src/Model/Table/ModelsImagesTable.php -----

FILE: src/Model/Table/SettingsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 7067 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * Settings Model
 *
 * @method \App\Model\Entity\Setting newEmptyEntity()
 * @method \App\Model\Entity\Setting newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\Setting> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\Setting get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\Setting findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\Setting patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\Setting> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\Setting|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\Setting saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\Setting>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Setting>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Setting>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Setting> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Setting>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Setting>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Setting>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Setting> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class SettingsTable extends Table
{
    /**
     * Initialize method
     *
     * This method initializes the table configuration, including setting the table name,
     * display field, primary key, and adding behaviors.
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('settings');
        $this->setDisplayField('category');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');
    }

    /**
     * Default validation rules.
     *
     * This method sets up the validation rules for the Settings table fields.
     * It includes rules for category, key_name, value_type, and value fields.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('category')
            ->maxLength('category', 255)
            ->requirePresence('category', 'create')
            ->notEmptyString('category');

        $validator
            ->scalar('key_name')
            ->maxLength('key_name', 255)
            ->requirePresence('key_name', 'create')
            ->notEmptyString('key_name');

        $validator
            ->scalar('value_type')
            ->requirePresence('value_type', 'create')
            ->notEmptyString('value_type')
            ->inList('value_type', [
                'text',
                'numeric',
                'bool',
                'textarea',
                'select',
                'select-page',
            ], __('Invalid type'));

        $validator
            ->requirePresence('value', 'create')
            ->notEmptyString('value', __('A value is required'))
            ->add('value', 'custom', [
                'rule' => function ($value, $context) {
                    $value_type = $context['data']['value_type'] ?? null;
                    if ($value_type === 'numeric' && !is_numeric($value)) {
                        return __('The value must be a number.');
                    }
                    if ($value_type === 'bool' && !in_array($value, [0, 1], true)) {
                        return __('The value must be 0 or 1.');
                    }
                    if ($value_type === 'text' && empty($value)) {
                        return __('The value must not be empty.');
                    }

                    return true;
                },
                'message' => __('Invalid value for the specified type.'),
            ]);

        return $validator;
    }

    /**
     * Retrieves setting values based on the specified category and optional key name.
     *
     * This method can fetch either all settings for a given category or a specific setting
     * within a category, depending on whether a key name is provided.
     *
     * @param string $category The category of the setting(s) to retrieve.
     * @param string|null $keyName The specific key name of the setting. If null, all settings for the category are returned.
     * @return mixed Returns one of the following:
     *               - An associative array of all settings for the category if $keyName is null.
     *               - The value of the specific setting if $keyName is provided and the setting exists.
     *               - null if a specific setting is requested but not found.
     * @throws \Cake\Database\Exception\DatabaseException If there's an issue with the database query.
     */
    public function getSettingValue(string $category, ?string $keyName = null): mixed
    {
        if (empty($keyName)) {
            // Fetch all settings for the category
            $settings = $this->find()
                ->where(['category' => $category])
                ->all()
                ->combine('key_name', function ($setting) {
                    return $this->castValue($setting->value, $setting->value_type);
                })
                ->toArray();

            return $settings;
        }

        // Fetch a single setting
        $setting = $this->find()
            ->where(['category' => $category, 'key_name' => $keyName])
            ->first();

        return $setting ? $this->castValue($setting->value, $setting->value_type) : null;
    }

    /**
     * Casts the value to the appropriate type based on the value_type.
     *
     * This private method is used internally to ensure that the returned
     * setting values are of the correct data type.
     *
     * @param mixed $value The value to be cast.
     * @param string $valueType The type to cast the value to ('bool', 'numeric', or 'string').
     * @return mixed The cast value.
     */
    private function castValue(mixed $value, string $valueType): mixed
    {
        switch ($valueType) {
            case 'bool':
                return filter_var($value, FILTER_VALIDATE_BOOLEAN);
            case 'numeric':
                return (int)$value;
            case 'string':
            default:
                return (string)$value;
        }
    }
}


// ----- END FILE: src/Model/Table/SettingsTable.php -----

FILE: src/Model/Table/InternationalisationsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3821 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * Internationalisations Model
 *
 * @method \App\Model\Entity\Internationalisation newEmptyEntity()
 * @method \App\Model\Entity\Internationalisation newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\Internationalisation> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\Internationalisation get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\Internationalisation findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\Internationalisation patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\Internationalisation> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\Internationalisation|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\Internationalisation saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\Internationalisation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Internationalisation>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Internationalisation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Internationalisation> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Internationalisation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Internationalisation>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Internationalisation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Internationalisation> deleteManyOrFail(iterable $entities, array $options = [])
 */
class InternationalisationsTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('internationalisations');
        $this->setDisplayField('message_id');
        $this->setPrimaryKey('id');
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('locale')
            ->maxLength('locale', 10)
            ->requirePresence('locale', 'create')
            ->notEmptyString('locale');

        $validator
            ->scalar('message_id')
            ->requirePresence('message_id', 'create')
            ->notEmptyString('message_id')
            ->add('message_id', 'unique', [
                'rule' => function ($value, $context) {
                    $count = $this->find()
                        ->where(['message_id' => $value, 'locale' => $context['data']['locale']])
                        ->count();

                    return $count === 0;
                },
                'message' => __('This message_id must be unique for the given locale.'),
            ]);

        $validator
            ->scalar('message_str')
            ->allowEmptyString('message_str');

        $validator
            ->dateTime('created')
            ->notEmptyDateTime('created');

        $validator
            ->dateTime('modified')
            ->notEmptyDateTime('modified');

        return $validator;
    }
}


// ----- END FILE: src/Model/Table/InternationalisationsTable.php -----

FILE: src/Model/Table/QueueableJobsTrait.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 2139 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\Queue\QueueManager;

/**
 * QueueableJobsTrait
 *
 * Provides job queuing functionality for Table classes.
 * This trait consolidates duplicate job queuing logic that was
 * previously scattered across multiple table classes.
 */
trait QueueableJobsTrait
{
    /**
     * Queues a job with the provided job class and data
     *
     * @param string $job The fully qualified job class name
     * @param array<string, mixed> $data The data to be passed to the job
     * @param array<string, mixed> $options Additional options for the job (delay, queue name, etc.)
     * @return void
     */
    public function queueJob(string $job, array $data, array $options = []): void
    {
        // Set default queue config
        $defaultOptions = ['config' => 'default'];
        $options = array_merge($defaultOptions, $options);

        QueueManager::push($job, $data, $options);

        $this->log(
            sprintf(
                'Queued a %s with data: %s%s',
                $job,
                json_encode($data),
                !empty($options['delay']) ? sprintf(' (delayed by %d seconds)', $options['delay']) : '',
            ),
            'info',
            ['group_name' => $job],
        );
    }

    /**
     * Queue multiple jobs at once
     *
     * @param array<array{job: string, data: array, options?: array}> $jobs Array of job configurations
     * @return void
     */
    public function queueJobs(array $jobs): void
    {
        foreach ($jobs as $jobConfig) {
            $options = $jobConfig['options'] ?? [];
            $this->queueJob($jobConfig['job'], $jobConfig['data'], $options);
        }
    }

    /**
     * Queue a job with a delay
     *
     * @param string $job The fully qualified job class name
     * @param array<string, mixed> $data The data to be passed to the job
     * @param int $delaySeconds Delay in seconds
     * @return void
     */
    public function queueDelayedJob(string $job, array $data, int $delaySeconds): void
    {
        $this->queueJob($job, $data, ['delay' => $delaySeconds]);
    }
}


// ----- END FILE: src/Model/Table/QueueableJobsTrait.php -----

FILE: src/Model/Table/CommentsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3481 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use App\Utility\SettingsManager;
use ArrayObject;
use Cake\Datasource\EntityInterface;
use Cake\Event\EventInterface;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * CommentsTable Entity
 *
 * Represents the comments table in the database. Manages relationships with Users and Articles,
 * defines validation rules, and sets up integrity checks for the comments data.
 */
class CommentsTable extends Table
{
    use QueueableJobsTrait;

    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('comments');
        $this->setDisplayField('model');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');

        $this->belongsTo('Users', [
            'foreignKey' => 'user_id',
            'joinType' => 'INNER',
        ]);

        $this->belongsTo('Articles', [
            'foreignKey' => 'foreign_key',
            'conditions' => ['Comments.model' => 'Articles'],
            'joinType' => 'LEFT',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->uuid('foreign_key')
            ->requirePresence('foreign_key', 'create')
            ->notEmptyString('foreign_key');

        $validator
            ->scalar('model')
            ->maxLength('model', 255)
            ->requirePresence('model', 'create')
            ->notEmptyString('model');

        $validator
            ->uuid('user_id')
            ->notEmptyString('user_id');

        $validator
            ->scalar('content')
            ->requirePresence('content', 'create')
            ->notEmptyString('content');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->existsIn(['user_id'], 'Users'), ['errorField' => 'user_id']);

        return $rules;
    }

    /**
     * After save callback.
     *
     * This method is called after a comment entity is saved. If AI analysis is enabled,
     * it queues up a job to analyze the comment content for inappropriate language.
     *
     * @param \Cake\Event\EventInterface $event The event that was fired
     * @param \Cake\Datasource\EntityInterface $entity The entity that was saved
     * @param \ArrayObject $options The options passed to the save method
     * @return void
     */
    public function afterSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        if (SettingsManager::read('AI.enabled')) {
            $data = [
                'comment_id' => $entity->id,
                'content' => $entity->content,
                'user_id' => $entity->user_id,
            ];

            // Queue up a comment analysis job
            $this->queueJob('App\Job\CommentAnalysisJob', $data);
        }
    }
}


// ----- END FILE: src/Model/Table/CommentsTable.php -----

FILE: src/Model/Table/ArticlesTagsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3699 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * ArticlesTags Model
 *
 * @property \App\Model\Table\ArticlesTable&\Cake\ORM\Association\BelongsTo $Articles
 * @property \App\Model\Table\TagsTable&\Cake\ORM\Association\BelongsTo $Tags
 * @method \App\Model\Entity\ArticlesTag newEmptyEntity()
 * @method \App\Model\Entity\ArticlesTag newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\ArticlesTag> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\ArticlesTag get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\ArticlesTag findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\ArticlesTag patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\ArticlesTag> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\ArticlesTag|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\ArticlesTag saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\ArticlesTag>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ArticlesTag>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ArticlesTag>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ArticlesTag> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ArticlesTag>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ArticlesTag>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ArticlesTag>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ArticlesTag> deleteManyOrFail(iterable $entities, array $options = [])
 */
class ArticlesTagsTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('articles_tags');

        $this->setPrimaryKey(['article_id', 'tag_id']);

        $this->belongsTo('Articles', [
            'foreignKey' => 'article_id',
            'joinType' => 'INNER',
        ]);
        $this->belongsTo('Tags', [
            'foreignKey' => 'tag_id',
            'joinType' => 'INNER',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->uuid('article_id')
            ->notEmptyString('article_id');

        $validator
            ->uuid('tag_id')
            ->notEmptyString('tag_id');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->existsIn(['article_id'], 'Articles'), ['errorField' => 'article_id']);
        $rules->add($rules->existsIn(['tag_id'], 'Tags'), ['errorField' => 'tag_id']);

        return $rules;
    }
}


// ----- END FILE: src/Model/Table/ArticlesTagsTable.php -----

FILE: src/Model/Table/EmailTemplatesTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3921 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * EmailTemplates Model
 *
 * @method \App\Model\Entity\EmailTemplate newEmptyEntity()
 * @method \App\Model\Entity\EmailTemplate newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\EmailTemplate> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\EmailTemplate get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\EmailTemplate findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\EmailTemplate patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\EmailTemplate> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\EmailTemplate|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\EmailTemplate saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\EmailTemplate>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\EmailTemplate>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\EmailTemplate>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\EmailTemplate> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\EmailTemplate>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\EmailTemplate>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\EmailTemplate>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\EmailTemplate> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class EmailTemplatesTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('email_templates');
        $this->setDisplayField('name');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('template_identifier')
            ->maxLength('template_identifier', 255)
            ->requirePresence('template_identifier', 'create')
            ->notEmptyString('template_identifier');

        $validator
            ->scalar('name')
            ->maxLength('name', 255)
            ->requirePresence('name', 'create')
            ->notEmptyString('name');

        $validator
            ->scalar('subject')
            ->maxLength('subject', 255)
            ->requirePresence('subject', 'create')
            ->notEmptyString('subject');

        $validator
            ->scalar('body_html')
            ->allowEmptyString('body_html');

        $validator
            ->scalar('body_plain')
            ->allowEmptyString('body_plain');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->isUnique(['id']), ['errorField' => 'id']);

        return $rules;
    }
}


// ----- END FILE: src/Model/Table/EmailTemplatesTable.php -----

FILE: src/Model/Table/SeoFieldsTrait.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 2837 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\Datasource\EntityInterface;

/**
 * SeoFieldsTrait
 *
 * Provides common SEO field management functionality for Table classes.
 * This trait consolidates duplicate SEO field handling logic that was
 * previously scattered across multiple table classes.
 */
trait SeoFieldsTrait
{
    /**
     * Get the standard SEO fields used across the application
     *
     * @return array<string> List of standard SEO field names
     */
    protected function getStandardSeoFields(): array
    {
        return [
            'meta_title',
            'meta_description',
            'meta_keywords',
            'facebook_description',
            'linkedin_description',
            'twitter_description',
            'instagram_description',
        ];
    }

    /**
     * Get all SEO fields for this table (override in table classes if needed)
     *
     * @return array<string> List of all SEO field names for this table
     */
    protected function getAllSeoFields(): array
    {
        return $this->getStandardSeoFields();
    }

    /**
     * Checks if any of the SEO fields are empty
     *
     * @param \Cake\Datasource\EntityInterface $entity The entity to check
     * @return array<string> List of empty SEO field names
     */
    public function emptySeoFields(EntityInterface $entity): array
    {
        $seoFields = $this->getAllSeoFields();

        return array_filter($seoFields, fn($field) => empty($entity->{$field}));
    }

    /**
     * Checks if any of the original language fields for translation are empty
     *
     * @param \Cake\Datasource\EntityInterface $entity The entity to check
     * @return array<string> List of empty translation field names
     */
    public function emptyTranslationFields(EntityInterface $entity): array
    {
        if ($this->behaviors()->has('Translate')) {
            $config = $this->behaviors()->get('Translate')->getConfig();

            return array_filter($config['fields'], fn($field) => empty($entity->{$field}));
        }

        return [];
    }

    /**
     * Update only empty SEO fields with new values
     *
     * @param \Cake\Datasource\EntityInterface $entity The entity to update
     * @param array<string, string> $seoData Array of SEO field values
     * @return array<string> List of fields that were updated
     */
    public function updateEmptySeoFields(EntityInterface $entity, array $seoData): array
    {
        $emptyFields = $this->emptySeoFields($entity);
        $updatedFields = [];

        foreach ($emptyFields as $field) {
            if (isset($seoData[$field]) && !empty($seoData[$field])) {
                $entity->{$field} = $seoData[$field];
                $updatedFields[] = $field;
            }
        }

        return $updatedFields;
    }
}


// ----- END FILE: src/Model/Table/SeoFieldsTrait.php -----

FILE: src/Model/Table/ImageGalleriesImagesTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 9456 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use ArrayObject;
use Cake\Cache\Cache;
use Cake\Datasource\EntityInterface;
use Cake\Datasource\FactoryLocator;
use Cake\Event\EventInterface;
use Cake\Log\LogTrait;
use Cake\ORM\Query\SelectQuery;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * ImageGalleriesImages Model
 *
 * @property \App\Model\Table\ImageGalleriesTable&\Cake\ORM\Association\BelongsTo $ImageGalleries
 * @property \App\Model\Table\ImagesTable&\Cake\ORM\Association\BelongsTo $Images
 * @method \App\Model\Entity\ImageGalleriesImage newEmptyEntity()
 * @method \App\Model\Entity\ImageGalleriesImage newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\ImageGalleriesImage> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\ImageGalleriesImage get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\ImageGalleriesImage findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\ImageGalleriesImage patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\ImageGalleriesImage> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\ImageGalleriesImage|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\ImageGalleriesImage saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\ImageGalleriesImage>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ImageGalleriesImage>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ImageGalleriesImage>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ImageGalleriesImage> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ImageGalleriesImage>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ImageGalleriesImage>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ImageGalleriesImage>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ImageGalleriesImage> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class ImageGalleriesImagesTable extends Table
{
    use LogTrait;

    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('image_galleries_images');
        $this->setDisplayField('id');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');

        $this->belongsTo('ImageGalleries', [
            'foreignKey' => 'image_gallery_id',
            'joinType' => 'INNER',
        ]);
        $this->belongsTo('Images', [
            'foreignKey' => 'image_id',
            'joinType' => 'INNER',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->uuid('image_gallery_id')
            ->requirePresence('image_gallery_id', 'create')
            ->notEmptyString('image_gallery_id');

        $validator
            ->uuid('image_id')
            ->requirePresence('image_id', 'create')
            ->notEmptyString('image_id');

        $validator
            ->integer('position')
            ->requirePresence('position', 'create')
            ->notEmptyString('position');

        $validator
            ->scalar('caption')
            ->allowEmptyString('caption');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->existsIn(['image_gallery_id'], 'ImageGalleries'), ['errorField' => 'image_gallery_id']);
        $rules->add($rules->existsIn(['image_id'], 'Images'), ['errorField' => 'image_id']);

        return $rules;
    }

    /**
     * afterSave callback - Queue preview regeneration when images are added to gallery
     *
     * @param \Cake\Event\EventInterface $event The event object
     * @param \Cake\Datasource\EntityInterface $entity The gallery-image association
     * @param \ArrayObject $options Options for the save operation
     * @return void
     */
    public function afterSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        // Queue preview regeneration for the gallery when images are added
        $this->log(sprintf(
            'ImageGalleriesImagesTable::afterSave triggered for gallery %s, image %s',
            $entity->image_gallery_id,
            $entity->image_id,
        ), 'info', ['group_name' => 'ImageGalleriesImagesTable']);
        $this->queuePreviewRegeneration($entity->image_gallery_id);
        $this->clearGalleryCache($entity->image_gallery_id);
    }

    /**
     * afterDelete callback - Queue preview regeneration when images are removed from gallery
     *
     * @param \Cake\Event\EventInterface $event The event object
     * @param \Cake\Datasource\EntityInterface $entity The gallery-image association
     * @param \ArrayObject $options Options for the delete operation
     * @return void
     */
    public function afterDelete(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        // Queue preview regeneration for the gallery when images are removed
        $this->queuePreviewRegeneration($entity->image_gallery_id);
        $this->clearGalleryCache($entity->image_gallery_id);
    }

    /**
     * Reorder images within a gallery
     *
     * @param string $galleryId The gallery ID
     * @param array $imageIds Array of image IDs in the desired order
     * @return bool Success
     */
    public function reorderImages(string $galleryId, array $imageIds): bool
    {
        $connection = $this->getConnection();

        $result = $connection->transactional(function () use ($galleryId, $imageIds) {
            foreach ($imageIds as $position => $imageId) {
                $this->updateAll(
                    ['position' => $position],
                    [
                        'image_gallery_id' => $galleryId,
                        'image_id' => $imageId,
                    ],
                );
            }

            return true;
        });

        // Queue preview regeneration and clear gallery cache after reordering
        if ($result) {
            $this->queuePreviewRegeneration($galleryId);
            $this->clearGalleryCache($galleryId);
        }

        return $result;
    }

    /**
     * Get the next available position for a gallery
     *
     * @param string $galleryId The gallery ID
     * @return int The next position
     */
    public function getNextPosition(string $galleryId): int
    {
        $query = $this->find()
            ->where(['image_gallery_id' => $galleryId])
            ->select(['max_position' => $this->find()->func()->max('position')]);

        $result = $query->first();

        return $result && $result->max_position !== null ? (int)$result->max_position + 1 : 0;
    }

    /**
     * Custom finder to get images ordered by position
     *
     * @param \Cake\ORM\Query\SelectQuery $query The query object
     * @param array $options Options array
     * @return \Cake\ORM\Query\SelectQuery
     */
    public function findOrdered(SelectQuery $query, array $options): SelectQuery
    {
        return $query->orderBy(['ImageGalleriesImages.position' => 'ASC']);
    }

    /**
     * Queue preview regeneration for a gallery
     *
     * @param string $galleryId Gallery ID
     * @return void
     */
    private function queuePreviewRegeneration(string $galleryId): void
    {
        // Get the ImageGalleries table and call its preview generation method
        $imageGalleriesTable = FactoryLocator::get('Table')->get('ImageGalleries');
        $imageGalleriesTable->queuePreviewGeneration($galleryId);
    }

    /**
     * Clear gallery placeholder cache for both admin and public contexts
     *
     * @param string $galleryId Gallery ID
     * @return void
     */
    private function clearGalleryCache(string $galleryId): void
    {
        // Clear both public and admin gallery caches
        Cache::delete("gallery_placeholder_{$galleryId}", 'default');
        Cache::delete("gallery_placeholder_admin_{$galleryId}", 'default');

        // Clear article cache to update articles containing this gallery
        // This ensures articles immediately reflect gallery image changes
        Cache::clear('content');
        $this->log(
            sprintf('Cleared article cache due to gallery %s image changes', $galleryId),
            'info',
            ['group_name' => 'ImageGalleriesImagesTable'],
        );
    }
}


// ----- END FILE: src/Model/Table/ImageGalleriesImagesTable.php -----

FILE: src/Model/Table/SlugsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 5818 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\Core\App;
use Cake\ORM\Query\SelectQuery;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;
use Exception;

/**
 * Slugs Model
 *
 * @method \App\Model\Entity\Slug newEmptyEntity()
 * @method \App\Model\Entity\Slug newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\Slug> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\Slug get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\Slug findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\Slug patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\Slug> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\Slug|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\Slug saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\Slug>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Slug>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Slug>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Slug> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Slug>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Slug>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Slug>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Slug> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class SlugsTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('slugs');
        $this->setDisplayField('slug');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp', [
            'events' => [
                'Model.beforeSave' => [
                    'created' => 'new',
                ],
            ],
        ]);

        // Set up dynamic associations based on existing slugs
        $this->setupAssociations();
    }

    /**
     * Sets up dynamic associations based on the unique model values in the slugs table.
     * Uses cache to improve performance.
     *
     * @return void
     */
    protected function setupAssociations(): void
    {
        $models = $this->find()
            ->select(['model'])
            ->distinct()
            ->disableHydration()
            ->all()
            ->extract('model')
            ->toArray();

        foreach ($models as $model) {
            try {
                $className = App::className($model, 'Model/Table', 'Table');
                if ($className) {
                    $this->belongsTo($model, [
                        'className' => $className,
                        'foreignKey' => 'foreign_key',
                        'conditions' => [$this->getAlias() . '.model' => $model],
                        'joinType' => 'LEFT',
                    ]);
                }
            } catch (Exception $e) {
                $this->log(sprintf(
                    'Failed to setup association for model %s: %s',
                    $model,
                    $e->getMessage(),
                ), 'error');
            }
        }
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->uuid('id')
            ->allowEmptyString('id', 'create');

        $validator
            ->scalar('model')
            ->maxLength('model', 20)
            ->requirePresence('model', 'create')
            ->notEmptyString('model');

        $validator
            ->uuid('foreign_key')
            ->requirePresence('foreign_key', 'create')
            ->notEmptyString('foreign_key');

        $validator
            ->scalar('slug')
            ->maxLength('slug', 255)
            ->requirePresence('slug', 'create')
            ->notEmptyString('slug')
            ->regex(
                'slug',
                '/^[a-z0-9-]+$/',
                __('The slug must be URL-safe (only lowercase letters, numbers, and hyphens)'),
            );

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->isUnique(
            ['slug', 'model'],
            __('This slug is already in use for this model type.'),
        ));

        return $rules;
    }

    /**
     * Find by slug and model.
     *
     * @param \Cake\ORM\Query\SelectQuery $query The query to modify
     * @param array $options The options containing slug and model
     * @return \Cake\ORM\Query\SelectQuery
     */
    public function findBySlugAndModel(SelectQuery $query, array $options): SelectQuery
    {
        return $query->where([
            $this->getAlias() . '.slug' => $options['slug'],
            $this->getAlias() . '.model' => $options['model'],
        ]);
    }
}


// ----- END FILE: src/Model/Table/SlugsTable.php -----

FILE: src/Model/Table/BlockedIpsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3727 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * BlockedIps Model
 *
 * @method \App\Model\Entity\BlockedIp newEmptyEntity()
 * @method \App\Model\Entity\BlockedIp newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\BlockedIp> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\BlockedIp get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\BlockedIp findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\BlockedIp patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\BlockedIp> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\BlockedIp|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\BlockedIp saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\BlockedIp>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\BlockedIp>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\BlockedIp>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\BlockedIp> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\BlockedIp>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\BlockedIp>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\BlockedIp>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\BlockedIp> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class BlockedIpsTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('blocked_ips');
        $this->setDisplayField('ip_address');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('ip_address')
            ->maxLength('ip_address', 45)
            ->requirePresence('ip_address', 'create')
            ->notEmptyString('ip_address')
            ->add('ip_address', 'unique', ['rule' => 'validateUnique', 'provider' => 'table'])
            ->add('ip_address', 'validIP', ['rule' => 'ip']);

        $validator
            ->scalar('reason')
            ->allowEmptyString('reason');

        $validator
            ->dateTime('blocked_at')
            ->notEmptyDateTime('blocked_at');

        $validator
            ->dateTime('expires_at')
            ->allowEmptyDateTime('expires_at');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->isUnique(['ip_address']), ['errorField' => 'ip_address']);

        return $rules;
    }
}


// ----- END FILE: src/Model/Table/BlockedIpsTable.php -----

FILE: src/Model/Table/ArticlesTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 14727 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use App\Model\Behavior\ImageValidationTrait;
use App\Utility\SettingsManager;
use ArrayObject;
use Cake\Datasource\EntityInterface;
use Cake\Event\EventInterface;
use Cake\Log\LogTrait;
use Cake\ORM\Behavior\Translate\TranslateTrait;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;
use DateTime;

/**
 * Articles Table
 *
 * Manages article content with features including:
 * - Multi-language support
 * - SEO metadata
 * - Image handling
 * - Commenting system
 * - Page view tracking
 * - AI-powered content enhancement
 *
 * @property \Cake\ORM\Association\BelongsTo $Users
 * @property \Cake\ORM\Association\BelongsToMany $Tags
 * @property \Cake\ORM\Association\HasMany $PageViews
 * @property \Cake\ORM\Association\HasMany $Slugs
 * @method \App\Model\Entity\Article newEmptyEntity()
 * @method \App\Model\Entity\Article newEntity(array $data, array $options = [])
 * @method \App\Model\Entity\Article[] newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\Article get($primaryKey, $options = [])
 * @method \App\Model\Entity\Article findOrCreate($search, ?callable $callback = null, $options = [])
 * @method \App\Model\Entity\Article patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method \App\Model\Entity\Article[] patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\Article|false save(\Cake\Datasource\EntityInterface $entity, $options = [])
 */
class ArticlesTable extends Table
{
    use ImageValidationTrait;
    use LogTrait;
    use QueueableJobsTrait;
    use SeoFieldsTrait;
    use TranslateTrait;

    /**
     * Initialize method
     *
     * Configures table associations, behaviors, and other settings
     *
     * @param array<string, mixed> $config Configuration array
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('articles');
        $this->setDisplayField('title');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');

        $this->addBehavior('Commentable');

        $this->addBehavior('Orderable', [
            'displayField' => 'title',
        ]);

        $this->addBehavior('Slug');

        $this->addBehavior('ImageAssociable');

        $this->addBehavior('QueueableImage', [
            'folder_path' => 'files/Articles/image/',
            'field' => 'image',
        ]);

        $this->addBehavior('Translate', [
            'fields' => [
                'title',
                'body',
                'summary',
                'meta_title',
                'meta_description',
                'meta_keywords',
                'facebook_description',
                'linkedin_description',
                'instagram_description',
                'twitter_description',
            ],
            'defaultLocale' => 'en_GB',
            'allowEmptyTranslations' => false,
        ]);

        $this->belongsTo('Users', [
            'foreignKey' => 'user_id',
            'joinType' => 'LEFT',
        ]);
        $this->belongsToMany('Tags', [
            'foreignKey' => 'article_id',
            'targetForeignKey' => 'tag_id',
            'joinTable' => 'articles_tags',
        ]);

        $this->hasMany('PageViews', [
            'foreignKey' => 'article_id',
            'dependent' => true,
            'cascadeCallbacks' => true,
        ]);
    }

    /**
     * Default validation rules
     *
     * Sets up validation rules for article fields including:
     * - User ID validation
     * - Title requirements
     * - Body content validation
     * - Image upload restrictions
     *
     * @param \Cake\Validation\Validator $validator Validator instance
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->uuid('user_id')
            ->notEmptyString('user_id');

        $validator
            ->scalar('title')
            ->maxLength('title', 255)
            ->requirePresence('title', 'create')
            ->notEmptyString('title');

        $validator
            ->scalar('body')
            ->allowEmptyString('body');

        $this->addOptionalImageValidation($validator, 'image');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating application integrity
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->existsIn(['user_id'], 'Users'), ['errorField' => 'user_id']);

        return $rules;
    }

    /**
     * Before save callback
     *
     * Handles:
     * - Setting publication date when article is published
     * - Calculating word count for article body
     *
     * @param \Cake\Event\EventInterface $event The beforeSave event that was fired
     * @param \Cake\Datasource\EntityInterface $entity The entity that is going to be saved
     * @param \ArrayObject $options The options passed to the save method
     * @return void
     */
    public function beforeSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        // Check if is_published has changed to published
        if ($entity->isDirty('is_published') && $entity->is_published) {
            $entity->published = new DateTime('now');
        }

        // Calculate word count if body is set or modified
        if ($entity->isDirty('body') || ($entity->isNew() && !empty($entity->body))) {
            $strippedBody = strip_tags((string)$entity->body); // Ensure body is a string
            $wordCount = str_word_count($strippedBody);
            $entity->word_count = $wordCount;
        }
    }

    /**
     * After save callback
     *
     * Handles AI-powered enhancements including:
     * - Article tagging
     * - Summary generation
     * - SEO field population
     * - Content translation
     *
     * @param \Cake\Event\EventInterface $event The afterSave event that was fired
     * @param \Cake\Datasource\EntityInterface $entity The entity that was saved
     * @param \ArrayObject $options The options passed to the save method
     * @return void
     */
    public function afterSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        // noMessage flag will be true if save came from a Job (stops looping)
        $noMessage = $options['noMessage'] ?? false;

        // All Articles should be tagged from the start
        if (
            SettingsManager::read('AI.enabled')
            && !$noMessage
        ) {
            $data = [
                'id' => $entity->id,
                'title' => $entity->title,
            ];

            if (
                $entity->kind == 'article' &&
                ((isset($options['regenerateTags']) &&
                $options['regenerateTags'] == 1) ||
                !isset($options['regenerateTags']))
            ) {
                // Queue up an ArticleTagUpdateJob
                if (SettingsManager::read('AI.articleTags')) {
                    $this->queueJob('App\Job\ArticleTagUpdateJob', $data);
                }
            }

            // Queue up an ArticleSummaryUpdateJob
            if (SettingsManager::read('AI.articleSummaries') && empty($entity->summary)) {
                $this->queueJob('App\Job\ArticleSummaryUpdateJob', $data);
            }
        }

        // Published Articles should be SEO ready with translations
        if (
            $entity->is_published
            && SettingsManager::read('AI.enabled')
            && !$noMessage
        ) {
            $data = [
                'id' => $entity->id,
                'title' => $entity->title,
            ];

            // Queue a job to update the Article SEO fields
            if (SettingsManager::read('AI.articleSEO') && !empty($this->emptySeoFields($entity))) {
                $this->queueJob('App\Job\ArticleSeoUpdateJob', $data);
            }

            // Queue a job to translate the Article
            if (SettingsManager::read('AI.articleTranslations')) {
                $this->queueJob('App\Job\TranslateArticleJob', $data);
            }
        }
    }

    /**
     * Retrieves a list of featured articles with optional additional conditions.
     *
     * This method constructs a query to find articles that are marked as featured.
     * Additional conditions can be provided to further filter the results.
     * The results are ordered by the 'lft' field in ascending order.
     *
     * @param array $additionalConditions An array of additional conditions to apply to the query.
     * @return array A list of featured articles that match the specified conditions.
     */
    public function getFeatured(string $cacheKey, array $additionalConditions = []): array
    {
        $conditions = [
            'Articles.kind' => 'article',
            'Articles.featured' => 1,
            'Articles.is_published' => 1,
        ];
        $conditions = array_merge($conditions, $additionalConditions);
        $query = $this->find()
            ->where($conditions)
            ->orderBy(['lft' => 'ASC'])
            ->cache($cacheKey . 'featured_articles', 'content');

        $results = $query->all()->toList();

        return $results;
    }

    /**
     * Retrieves a list of root pages from the Articles table.
     *
     * This method fetches articles that are categorized as 'page', have no parent (i.e., root pages),
     * and are published. Additional conditions can be provided to further filter the results.
     *
     * @param array $additionalConditions An associative array of additional conditions to apply to the query.
     *                                    These conditions will be merged with the default conditions.
     * @return array An array of root pages that match the specified conditions,
     * ordered by the 'lft' field in ascending order.
     */
    public function getRootPages(string $cacheKey, array $additionalConditions = []): array
    {
        $conditions = [
            'Articles.kind' => 'page',
            'Articles.parent_id IS' => null,
            'Articles.is_published' => 1,
        ];
        $conditions = array_merge($conditions, $additionalConditions);
        $query = $this->find()
            ->where($conditions)
            ->orderBy(['lft' => 'ASC'])
            ->cache($cacheKey . 'root_pages', 'content');

        $results = $query->all()->toList();

        return $results;
    }

    /**
     * Retrieves published pages marked for display in the main menu.
     *
     * This method fetches articles that meet the following criteria:
     * - Are of type 'page'
     * - Are published (is_published = 1)
     * - Are marked for main menu display (main_menu = 1)
     * Results are ordered by the 'lft' field for proper tree structure display.
     * Results are cached using the 'main_menu_pages' key in the 'content' cache config.
     *
     * @param array $additionalConditions Additional conditions to merge with the default query conditions
     * @return array List of Article entities matching the criteria
     * @throws \Cake\Database\Exception\DatabaseException When the database query fails
     * @throws \Cake\Cache\Exception\InvalidArgumentException When cache configuration is invalid
     */
    public function getMainMenuPages(string $cacheKey, array $additionalConditions = []): array
    {
        $conditions = [
            'Articles.kind' => 'page',
            'Articles.is_published' => 1,
            'Articles.main_menu' => 1,
        ];
        $conditions = array_merge($conditions, $additionalConditions);
        $query = $this->find()
            ->where($conditions)
            ->orderBy(['lft' => 'ASC'])
            ->cache($cacheKey . 'main_menu_pages', 'content');

        $results = $query->all()->toList();

        return $results;
    }

    /**
     * Gets an array of years and months that have published articles.
     *
     * This method queries the articles table to find all unique year/month combinations
     * where articles were published, organizing them in a hierarchical array structure
     * with years as keys and months as values. Results are cached using the 'content'
     * cache configuration to improve performance.
     *
     * @return array An array where keys are years and values are arrays of month numbers
     *              that have published articles, sorted in descending order.
     */
    public function getArchiveDates(string $cacheKey): array
    {
        $query = $this->find()
            ->select([
                'year' => 'YEAR(published)',
                'month' => 'MONTH(published)',
            ])
            ->where([
                'Articles.is_published' => 1,
                'Articles.kind' => 'article',
                'Articles.published IS NOT' => null,
            ])
            ->groupBy(['year', 'month'])
            ->orderBy([
                'year' => 'DESC',
                'month' => 'DESC',
            ])
            ->cache($cacheKey . 'archive_dates', 'content');

        $dates = [];
        foreach ($query as $result) {
            $year = $result->year;
            if (!isset($dates[$year])) {
                $dates[$year] = [];
            }
            $dates[$year][] = (int)$result->month;
        }

        return $dates;
    }

    /**
     * Retrieves the most recent published articles.
     *
     * This method queries the Articles table to find articles that are of kind 'article' and are published.
     * It includes associated Users and Tags data, orders the results by the published date in descending order,
     * and limits the results to the top 3 most recent articles.
     *
     * @return array An array of the most recent published articles, including associated Users and Tags data.
     */
    public function getRecentArticles(string $cacheKey, array $additionalConditions = []): array
    {
        $conditions = [
            'Articles.kind' => 'article',
            'Articles.is_published' => 1,
        ];
        $conditions = array_merge($conditions, $additionalConditions);

        $query = $this->find()
            ->where($conditions)
            ->contain(['Users', 'Tags'])
            ->orderBy(['Articles.published' => 'DESC'])
            ->limit(3)
            ->cache($cacheKey . 'recent_articles', 'content');

        return $query->all()->toArray();
    }
}


// ----- END FILE: src/Model/Table/ArticlesTable.php -----

FILE: src/Model/Table/ImagesTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4973 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use App\Model\Behavior\ImageValidationTrait;
use Cake\Log\LogTrait;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * Images Model
 *
 * @method \App\Model\Entity\Image newEmptyEntity()
 * @method \App\Model\Entity\Image newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\Image> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\Image get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\Image findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\Image patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\Image> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\Image|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\Image saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\Image>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Image>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Image>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Image> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Image>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Image>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\Image>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\Image> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class ImagesTable extends Table
{
    use ImageValidationTrait;
    use LogTrait;
    use QueueableJobsTrait;

    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.use Cake\Event\EventInterface;
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('images');
        $this->setDisplayField('name');
        $this->setPrimaryKey('id');

        $this->addBehavior('QueueableImage', [
            'folder_path' => 'files/Images/image/',
            'field' => 'image',
        ]);

        $this->addBehavior('Timestamp');

        $this->belongsToMany('ImageGalleries', [
            'foreignKey' => 'image_id',
            'targetForeignKey' => 'image_gallery_id',
            'joinTable' => 'image_galleries_images',
            'through' => 'ImageGalleriesImages',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator->notEmptyString('name', 'Name cannot be empty');

        return $validator;
    }

    /**
     * Validation rules for creating a new image.
     *
     * Extends the default validation rules and adds specific requirements for image creation:
     * - Requires the presence of an image file
     * - Validates the image file mime type (JPEG, PNG, or GIF)
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationCreate(Validator $validator): Validator
    {
        $validator = $this->validationDefault($validator);

        return $this->addRequiredImageValidation($validator, 'image', [
            'messages' => [
                'mimeType' => 'Please upload only jpeg, png, or gif images.',
                'fileSize' => 'Image must be less than 10MB.',
                'required' => 'An image file is required',
            ],
        ]);
    }

    /**
     * Validation rules for updating an existing image.
     *
     * Extends the default validation rules and adds specific requirements for image updates:
     * - Allows the image file to be empty (no change)
     * - If a new image is provided, validates the mime type (JPEG, PNG, or GIF)
     * - Mime type validation only occurs when a new file is successfully uploaded
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationUpdate(Validator $validator): Validator
    {
        $validator = $this->validationDefault($validator);

        return $this->addOptionalImageValidation($validator, 'image', [
            'messages' => [
                'mimeType' => 'Please upload only jpeg, png, or gif images.',
                'fileSize' => 'Image must be less than 10MB.',
            ],
        ]);
    }
}


// ----- END FILE: src/Model/Table/ImagesTable.php -----

FILE: src/Model/Table/UserAccountConfirmationsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4112 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * UserAccountConfirmations Model
 *
 * @property \App\Model\Table\UsersTable&\Cake\ORM\Association\BelongsTo $Users
 * @method \App\Model\Entity\UserAccountConfirmation newEmptyEntity()
 * @method \App\Model\Entity\UserAccountConfirmation newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\UserAccountConfirmation> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\UserAccountConfirmation get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\UserAccountConfirmation findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\UserAccountConfirmation patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\UserAccountConfirmation> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\UserAccountConfirmation|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\UserAccountConfirmation saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\UserAccountConfirmation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\UserAccountConfirmation>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\UserAccountConfirmation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\UserAccountConfirmation> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\UserAccountConfirmation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\UserAccountConfirmation>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\UserAccountConfirmation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\UserAccountConfirmation> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class UserAccountConfirmationsTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('user_account_confirmations');
        $this->setDisplayField('id');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');

        $this->belongsTo('Users', [
            'foreignKey' => 'user_id',
            'joinType' => 'INNER',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('user_id')
            ->maxLength('user_id', 36)
            ->notEmptyString('user_id');

        $validator
            ->scalar('confirmation_code')
            ->maxLength('confirmation_code', 36)
            ->requirePresence('confirmation_code', 'create')
            ->notEmptyString('confirmation_code')
            ->add('confirmation_code', 'unique', ['rule' => 'validateUnique', 'provider' => 'table']);

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->isUnique(['confirmation_code']), ['errorField' => 'confirmation_code']);
        $rules->add($rules->existsIn(['user_id'], 'Users'), ['errorField' => 'user_id']);

        return $rules;
    }
}


// ----- END FILE: src/Model/Table/UserAccountConfirmationsTable.php -----

FILE: src/Model/Table/ImageGalleriesTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 12402 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use App\Utility\SettingsManager;
use ArrayObject;
use Cake\Cache\Cache;
use Cake\Datasource\EntityInterface;
use Cake\Event\EventInterface;
use Cake\Log\LogTrait;
use Cake\ORM\Behavior\Translate\TranslateTrait;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;
use Exception;

/**
 * ImageGalleries Model
 *
 * @property \App\Model\Table\ImagesTable&\Cake\ORM\Association\BelongsToMany $Images
 * @method \App\Model\Entity\ImageGallery newEmptyEntity()
 * @method \App\Model\Entity\ImageGallery newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\ImageGallery> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\ImageGallery get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\ImageGallery findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\ImageGallery patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\ImageGallery> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\ImageGallery|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\ImageGallery saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\ImageGallery>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ImageGallery>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ImageGallery>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ImageGallery> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ImageGallery>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ImageGallery>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ImageGallery>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ImageGallery> deleteManyOrFail(iterable $entities, array $options = [])
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class ImageGalleriesTable extends Table
{
    use LogTrait;
    use QueueableJobsTrait;
    use SeoFieldsTrait;
    use TranslateTrait;

    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('image_galleries');
        $this->setDisplayField('name');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');
        $this->addBehavior('Slug', [
            'sourceField' => 'name',
            'targetField' => 'slug',
            'maxLength' => 255,
        ]);
        $this->addBehavior('Translate', [
            'fields' => [
                'name',
                'description',
                'meta_title',
                'meta_description',
                'meta_keywords',
                'facebook_description',
                'linkedin_description',
                'instagram_description',
                'twitter_description',
            ],
            'defaultLocale' => 'en_GB',
            'allowEmptyTranslations' => false,
        ]);

        $this->hasMany('ImageGalleriesImages', [
            'foreignKey' => 'image_gallery_id',
            'dependent' => true,
        ]);

        $this->belongsToMany('Images', [
            'foreignKey' => 'image_gallery_id',
            'targetForeignKey' => 'image_id',
            'joinTable' => 'image_galleries_images',
            'through' => 'ImageGalleriesImages',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('name')
            ->maxLength('name', 255)
            ->requirePresence('name', 'create')
            ->notEmptyString('name');

        $validator
            ->scalar('slug')
            ->maxLength('slug', 255)
            ->allowEmptyString('slug');

        $validator
            ->scalar('description')
            ->allowEmptyString('description');

        $validator
            ->boolean('is_published')
            ->notEmptyString('is_published');

        $validator
            ->uuid('created_by')
            ->allowEmptyString('created_by');

        $validator
            ->uuid('modified_by')
            ->allowEmptyString('modified_by');

        $validator
            ->scalar('meta_title')
            ->maxLength('meta_title', 255)
            ->allowEmptyString('meta_title');

        $validator
            ->scalar('meta_description')
            ->allowEmptyString('meta_description');

        $validator
            ->scalar('meta_keywords')
            ->allowEmptyString('meta_keywords');

        $validator
            ->scalar('facebook_description')
            ->allowEmptyString('facebook_description');

        $validator
            ->scalar('linkedin_description')
            ->allowEmptyString('linkedin_description');

        $validator
            ->scalar('instagram_description')
            ->allowEmptyString('instagram_description');

        $validator
            ->scalar('twitter_description')
            ->allowEmptyString('twitter_description');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->isUnique(['slug']), ['errorField' => 'slug']);

        return $rules;
    }

    /**
     * afterSave callback - Queue preview generation job when gallery changes
     *
     * @param \Cake\Event\EventInterface $event The event object
     * @param \Cake\Datasource\EntityInterface $entity The gallery entity
     * @param \ArrayObject $options Options for the save operation
     * @return void
     */
    public function afterSave(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        // noMessage flag will be true if save came from a Job (stops looping)
        $noMessage = $options['noMessage'] ?? false;

        // Queue preview generation for new galleries or when images might have changed
        if ($entity->isNew() || $entity->isDirty('name') || $entity->isDirty('description')) {
            $this->queuePreviewGeneration($entity->id);
        }

        // Clear article cache when gallery published status changes
        // This ensures articles show/hide galleries immediately when status changes
        if ($entity->isDirty('is_published')) {
            Cache::clear('content');
            $this->log(
                sprintf('Cleared article cache due to gallery %s publish status change', $entity->id),
                'info',
                ['group_name' => 'ImageGalleriesTable'],
            );
        }

        // Queue AI jobs for published galleries when AI is enabled
        if (
            $entity->is_published
            && SettingsManager::read('AI.enabled')
            && !$noMessage
        ) {
            $data = [
                'id' => $entity->id,
                'name' => $entity->name,
            ];

            // Queue SEO generation job if SEO setting is enabled and there are empty SEO fields
            if (SettingsManager::read('AI.gallerySEO') && !empty($this->emptySeoFields($entity))) {
                $this->queueJob('App\\Job\\ImageGallerySeoUpdateJob', $data);
            }

            // Queue translation job if translations are enabled
            if (SettingsManager::read('AI.galleryTranslations', false)) {
                $this->queueJob('App\\Job\\TranslateImageGalleryJob', $data);
            }
        }
    }

    /**
     * beforeDelete callback - Clean up preview image file
     *
     * @param \Cake\Event\EventInterface $event The event object
     * @param \Cake\Datasource\EntityInterface $entity The gallery entity
     * @param \ArrayObject $options Options for the delete operation
     * @return void
     */
    public function beforeDelete(EventInterface $event, EntityInterface $entity, ArrayObject $options): void
    {
        // Clean up preview image file
        if ($entity->preview_image) {
            $previewPath = WWW_ROOT . 'files' . DS . 'ImageGalleries' . DS . 'preview' . DS . $entity->preview_image;
            if (file_exists($previewPath)) {
                unlink($previewPath);
            }
        }

        // Also clean up gallery ID-based file
        $galleryPreviewPath = WWW_ROOT . 'files' . DS . 'ImageGalleries' . DS . 'preview' . DS . $entity->id . '.jpg';
        if (file_exists($galleryPreviewPath)) {
            unlink($galleryPreviewPath);
        }
    }

    /**
     * Queue preview generation job for a gallery
     *
     * @param string $galleryId Gallery ID
     * @return void
     */
    public function queuePreviewGeneration(string $galleryId): void
    {
        try {
            $this->queueJob('App\\Job\\GenerateGalleryPreviewJob', [
                'gallery_id' => $galleryId,
            ]);
        } catch (Exception $e) {
            $this->log(
                sprintf('Failed to queue preview generation for gallery %s: %s', $galleryId, $e->getMessage()),
                'error',
                ['group_name' => 'App\\Model\\Table\\ImageGalleriesTable'],
            );
        }
    }

    /**
     * Get a gallery for placeholder rendering with caching
     *
     * @param string $galleryId Gallery UUID
     * @param bool $requirePublished Whether to require the gallery to be published (default: true)
     * @param string|null $cacheKey Locale-aware cache key from controller
     * @return \App\Model\Entity\ImageGallery|null Gallery entity or null if not found
     */
    public function getGalleryForPlaceholder(
        string $galleryId,
        bool $requirePublished = true,
        ?string $cacheKey = null,
    ): ?object {
        // Generate locale-aware cache key if provided, otherwise fall back to static key
        if ($cacheKey) {
            $baseKey = $requirePublished
                ? "gallery_placeholder_{$galleryId}"
                : "gallery_placeholder_admin_{$galleryId}";
            $finalCacheKey = $baseKey . $cacheKey;
        } else {
            $finalCacheKey = $requirePublished
                ? "gallery_placeholder_{$galleryId}"
                : "gallery_placeholder_admin_{$galleryId}";
        }

        // Debug: Log cache key and locale being used
        $this->log(
            sprintf('ImageGalleriesTable: Using cache key %s with locale %s', $finalCacheKey, $this->getLocale()),
            'debug',
        );

        $conditions = ['ImageGalleries.id' => $galleryId];
        if ($requirePublished) {
            $conditions['ImageGalleries.is_published'] = true;
        }

        return $this->find()
            ->cache($finalCacheKey, 'default')
            ->contain([
                'Images' => function ($query) {
                    return $query->where([
                        'Images.image IS NOT' => null,
                        'Images.image !=' => '',
                    ])
                    ->orderBy(['ImageGalleriesImages.position' => 'ASC']);
                },
            ])
            ->where($conditions)
            ->first();
    }

    /**
     * Check if gallery images have changed since last save
     *
     * @param \Cake\Datasource\EntityInterface $entity Gallery entity
     * @return bool True if images have changed
     */
    private function imagesChanged(EntityInterface $entity): bool
    {
        // This is a basic check - in practice, image changes happen via the junction table
        // The ImageGalleriesImagesTable will handle queuing preview regeneration
        return $entity->isDirty('images') || $entity->isDirty('_joinData');
    }
}


// ----- END FILE: src/Model/Table/ImageGalleriesTable.php -----

FILE: src/Model/Table/ArticlesTranslationsTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3050 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use Cake\ORM\Table;
use Cake\Validation\Validator;

/**
 * ArticlesTranslations Model
 *
 * @method \App\Model\Entity\ArticlesTranslation newEmptyEntity()
 * @method \App\Model\Entity\ArticlesTranslation newEntity(array $data, array $options = [])
 * @method array<\App\Model\Entity\ArticlesTranslation> newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\ArticlesTranslation get(mixed $primaryKey, array|string $finder = 'all', \Psr\SimpleCache\CacheInterface|string|null $cache = null, \Closure|string|null $cacheKey = null, mixed ...$args)
 * @method \App\Model\Entity\ArticlesTranslation findOrCreate($search, ?callable $callback = null, array $options = [])
 * @method \App\Model\Entity\ArticlesTranslation patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method array<\App\Model\Entity\ArticlesTranslation> patchEntities(iterable $entities, array $data, array $options = [])
 * @method \App\Model\Entity\ArticlesTranslation|false save(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method \App\Model\Entity\ArticlesTranslation saveOrFail(\Cake\Datasource\EntityInterface $entity, array $options = [])
 * @method iterable<\App\Model\Entity\ArticlesTranslation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ArticlesTranslation>|false saveMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ArticlesTranslation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ArticlesTranslation> saveManyOrFail(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ArticlesTranslation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ArticlesTranslation>|false deleteMany(iterable $entities, array $options = [])
 * @method iterable<\App\Model\Entity\ArticlesTranslation>|\Cake\Datasource\ResultSetInterface<\App\Model\Entity\ArticlesTranslation> deleteManyOrFail(iterable $entities, array $options = [])
 */
class ArticlesTranslationsTable extends Table
{
    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('articles_translations');
        $this->setDisplayField('title');
        $this->setPrimaryKey(['id', 'locale']);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('title')
            ->maxLength('title', 255)
            ->allowEmptyString('title');

        $validator
            ->scalar('body')
            ->allowEmptyString('body');

        $validator
            ->scalar('summary')
            ->allowEmptyString('summary');

        return $validator;
    }
}


// ----- END FILE: src/Model/Table/ArticlesTranslationsTable.php -----

FILE: src/Model/Table/UsersTable.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 5044 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Model\Table;

use App\Model\Behavior\ImageValidationTrait;
use Cake\ORM\Query;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;

class UsersTable extends Table
{
    use ImageValidationTrait;
    use QueueableJobsTrait;

    /**
     * Initialize method
     *
     * @param array<string, mixed> $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config): void
    {
        parent::initialize($config);

        $this->setTable('users');
        $this->setDisplayField('username');
        $this->setPrimaryKey('id');

        $this->addBehavior('QueueableImage', [
            'folder_path' => 'files/Users/image/',
            'field' => 'image',
        ]);

        $this->addBehavior('Timestamp');

        $this->hasMany('Articles', [
            'foreignKey' => 'user_id',
        ]);

        $this->hasMany('Comments', [
            'foreignKey' => 'user_id',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator): Validator
    {
        $validator
            ->scalar('username')
            ->maxLength('username', 50)
            ->requirePresence('username', 'create')
            ->notEmptyString('username');

        $validator
            ->scalar('password')
            ->minLength('password', 8, __('Password must be at least 8 characters long'))
            ->maxLength('password', 255)
            ->requirePresence('password', 'create')
            ->allowEmptyString('password', __('Required'))
            ->notEmptyString('password', null, 'create');

        $validator
            ->scalar('confirm_password')
            ->maxLength('confirm_password', 255)
            ->requirePresence('confirm_password', 'create')
            ->allowEmptyString('confirm_password', __('Required'))
            ->notEmptyString('confirm_password', null, 'create')
            ->sameAs('confirm_password', 'password', 'Passwords do not match');

        $validator
            ->email('email')
            ->notEmptyString('email');

        $this->addOptionalImageValidation($validator, 'image', [
            'messages' => [
                'mimeType' => 'Please upload only images (jpeg, png, gif).',
                'fileSize' => 'Image must be less than 10MB.',
            ],
        ]);

        return $validator;
    }

    /**
     * Validation method for resetting passwords.
     *
     * This method defines validation rules for the password reset process.
     * It ensures that the password meets the minimum length requirement
     * and that the password confirmation matches the password.
     *
     * @param \Cake\Validation\Validator $validator The validator instance to which rules will be added.
     * @return \Cake\Validation\Validator The modified validator instance with the added rules.
     */
    public function validationResetPassword(Validator $validator): Validator
    {
        $validator
            ->scalar('password')
            ->minLength('password', 8, __('Password must be at least 8 characters long'))
            ->maxLength('password', 255)
            ->requirePresence('password', 'create')
            ->allowEmptyString('password', 'update')
            ->notEmptyString('password', null, 'create');

        $validator
            ->scalar('confirm_password')
            ->maxLength('confirm_password', 255)
            ->requirePresence('confirm_password', 'create')
            ->allowEmptyString('confirm_password', 'update')
            ->notEmptyString('confirm_password', null, 'create')
            ->sameAs('confirm_password', 'password', 'Passwords do not match');

        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules): RulesChecker
    {
        $rules->add($rules->isUnique(['username']), ['errorField' => 'username']);
        $rules->add($rules->isUnique(['email']), ['errorField' => 'email']);

        return $rules;
    }

    /**
     * Custom finder method to retrieve only enabled records.
     *
     * This method modifies the query to filter out any records where the 'active'
     * field is set to 1, effectively returning only those records that are enabled.
     *
     * @param \Cake\ORM\Query $query The query object to modify.
     * @param array $options An array of options that can be used to customize the query.
     * @return \Cake\ORM\Query The modified query object with the 'active' condition applied.
     */
    public function findAuth(Query $query, array $options): Query
    {
        return $query->where(['active' => 1]);
    }
}


// ----- END FILE: src/Model/Table/UsersTable.php -----



================================================================================
END SECTION: Models
================================================================================



================================================================================
BEGIN SECTION: Controllers
================================================================================

FILE: src/Controller/UsersController.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 16428 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller;

use App\Model\Entity\User;
use App\Model\Entity\UserAccountConfirmation;
use App\Utility\SettingsManager;
use Authentication\IdentityInterface;
use Cake\Event\EventInterface;
use Cake\Http\Cookie\Cookie;
use Cake\Http\Response;
use Cake\Log\Log;
use Cake\Log\LogTrait;
use Cake\Queue\QueueManager;
use Cake\Routing\Router;
use Cake\Utility\Text;
use Exception;

/**
 * Users Controller
 *
 * Handles user-related operations such as registration, login, logout, and account management.
 *
 * @property \App\Model\Table\UsersTable $Users
 */
class UsersController extends AppController
{
    use LogTrait;

    /**
     * Configures actions that can be accessed without authentication.
     *
     * @param \Cake\Event\EventInterface $event The event object.
     * @return void
     */
    public function beforeFilter(EventInterface $event): void
    {
        parent::beforeFilter($event);

        $this->Authentication->allowUnauthenticated(
            [
                'login',
                'logout',
                'register',
                'confirmEmail',
                'forgotPassword',
                'resetPassword',
            ],
        );
    }

    /**
     * Handles user login functionality.
     *
     * Authenticates the user and redirects them based on their role and previous page.
     *
     * @return \Cake\Http\Response|null Redirects on successful login, or null on failure.
     */
    public function login(): ?Response
    {
        $result = $this->Authentication->getResult();
        if ($result != null && $result->isValid()) {
            $identity = $this->Authentication->getIdentity();
            $this->handleCookieConsent($identity);
            $user = $this->Users->get($identity->getIdentifier());

            return $this->getRedirectResponse($user);
        }

        if ($this->request->is('post')) {
            $this->Flash->error(__('Invalid username or password'));
        }

        return null;
    }

    /**
     * Determines and returns the appropriate redirect response based on user role.
     *
     * This method handles post-login redirection by checking if the user is an admin.
     * Admin users are redirected to the admin articles section, while regular users
     * are redirected to either their intended destination or the homepage.
     *
     * @param \App\Model\Entity\User $user The authenticated user entity
     * @return \Cake\Http\Response The redirect response object
     */
    private function getRedirectResponse(User $user): Response
    {
        // Send admin users to admin area
        if ($user->is_admin) {
            return $this->redirect('/admin/articles');
        }
        // send everyone else to non admin
        $target = $this->Authentication->getLoginRedirect() ?? '/';

        return $this->redirect($target);
    }

    /**
     * Handles cookie consent management on login for users.
     *
     * This method manages the cookie consent process by:
     * - Checking for existing consent cookies
     * - Validating consent against the current user
     * - Updating consent records when user IDs don't match
     * - Setting or expiring consent cookies as needed
     * - Making consent data available to the view
     *
     * @param \Authentication\IdentityInterface $user The authenticated user entity
     * @return void
     * @throws \Cake\Database\Exception\DatabaseException When database operations fail
     * @throws \Cake\Http\Exception\InvalidCsrfTokenException When CSRF validation fails
     * @throws \RuntimeException When cookie operations fail
     */
    private function handleCookieConsent(IdentityInterface $user): void
    {
        $sessionId = $this->request->getSession()->id();
        $consentTable = $this->fetchTable('CookieConsents');
        $consentCookie = $this->request->getCookie('consent_cookie');
        $consentData = null;

        if ($consentCookie) {
            $consentCookie = json_decode($consentCookie, true);
            if ($consentCookie['user_id'] != $user->getIdentifier()) {
                $consent = $consentTable->getLatestConsent($sessionId, $user->getIdentifier());
                if ($consent) {
                    $consent['user_id'] = $user->getIdentifier();
                    $consent = $consentTable->newEntity($consent);
                    if ($consentCookie['user_id'] == null) {
                        $consentTable->save($consent);
                    }
                    $cookie = $consentTable->createConsentCookie($consent);
                    $this->response = $this->response->withCookie($cookie);
                    $consentCookie = $this->request->getCookie('consent_cookie');
                    // Set the cookie data to the view
                    $consentData = json_decode($consentCookie, true);
                    $this->set('consentData', $consentData);
                } else {
                    $this->response = $this->response->withExpiredCookie(new Cookie('consent_cookie'));
                    $this->set('consentData', null);
                }
            }
        } else {
            $this->set('consentData', null);
        }
    }

    /**
     * Logs out the current user.
     *
     * @return \Cake\Http\Response|null Redirects to the login page.
     */
    public function logout(): ?Response
    {
        $this->Authentication->logout();

        return $this->redirect(['_name' => 'login', 'prefix' => false]);
    }

    /**
     * Handles user registration process.
     *
     * Creates a new user account and sends a confirmation email.
     *
     * @return \Cake\Http\Response|null Redirects on successful registration, or null on failure.
     */
    public function register(): ?Response
    {
        if (!SettingsManager::read('Users.registrationEnabled', false)) {
            return $this->redirect($this->referer());
        }

        $user = $this->Users->newEmptyEntity();
        if ($this->request->is('post')) {
            $data = $this->request->getData();
            // Set username to be the same as email
            $data['username'] = $data['email'];

            $user = $this->Users->patchEntity($user, $data);
            // Be super certain is_admin is false for new registrations
            $user->is_admin = false;
            $user->setAccess('is_admin', false);
            $user->active = true;
            $user->setAccess('active', true);

            if ($this->Users->save($user)) {
                $confirmationsTable = $this->fetchTable('UserAccountConfirmations');
                $confirmation = $confirmationsTable->newEntity([
                    'user_id' => $user->id,
                    'confirmation_code' => Text::uuid(),
                ]);

                if ($confirmationsTable->save($confirmation)) {
                    $this->Flash->success(__('Registration successful. Please check your email for confirmation.'));
                    $this->sendConfirmationEmailMessage($user, $confirmation);
                } else {
                    $this->Flash->error(
                        __('Registration successful, but there was an issue creating the confirmation link.'),
                    );
                }

                return $this->redirect(['action' => 'login']);
            } else {
                $this->Flash->error(__('Registration failed. Please, try again.'));

                return $this->response->withStatus(403);
            }
        }
        $this->set(compact('user'));

        return null;
    }

    /**
     * Sends a confirmation email to the user.
     *
     * @param \App\Model\Entity\User $user The user entity.
     * @param \App\Model\Entity\UserAccountConfirmation $confirmation The confirmation entity.
     * @return void
     */
    private function sendConfirmationEmailMessage(User $user, UserAccountConfirmation $confirmation): void
    {
        if (env('CAKE_ENV') === 'test') {
            return;
        }

        try {
            $data = [
                'template_identifier' => 'confirm_email',
                'from' => SettingsManager::read('Email.reply_email', 'noreply@example.com'),
                'to' => $user->email,
                'viewVars' => [
                    'username' => $user->username,
                    'confirmation_code' => $confirmation->confirmation_code,
                    'confirm_email_link' => Router::url([
                        'controller' => 'Users',
                        'action' => 'confirmEmail',
                        $confirmation->confirmation_code,
                    ], true),
                ],
            ];

            QueueManager::push('App\Job\SendEmailJob', $data);
        } catch (Exception $e) {
            Log::error(__('Failed to send confirmation email message: {0}', $e->getMessage()));
        }
    }

    /**
     * Allows a user to edit their own account information.
     *
     * @param string|null $id The ID of the user to be edited.
     * @return \Cake\Http\Response|null Redirects after editing, or null on GET requests.
     */
    public function edit(?string $id = null): ?Response
    {
        $currentUserId = $this->Authentication->getIdentity()->getIdentifier();

        if ($id !== $currentUserId) {
            $this->log('Unauthorized access attempt to edit another user\'s account', 'warning', [
                'group_name' => 'unauthorized_user_edit_attempt',
                'user_id' => $currentUserId,
                'attempted_user_id' => $id,
                'url' => $this->request->getRequestTarget(),
                'ip' => $this->request->clientIp(),
                'scope' => ['user'],
            ]);
            $this->Flash->error(__('We were unable to find that account.'));

            return $this->redirect(['_name' => 'account', $currentUserId]);
        }

        $user = $this->Users->get($this->Authentication->getIdentity()->getIdentifier(), contain: []);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $user->setAccess('is_admin', false);
            $user->setAccess('active', false);
            $data = $this->request->getData();
            $user = $this->Users->patchEntity($user, $data);
            if ($this->Users->save($user)) {
                $this->Flash->success(__('Your account has been updated.'));
            } else {
                $this->Flash->error(__('Your account could not be updated.'));
            }
        }
        $this->set(compact('user'));

        return null;
    }

    /**
     * Confirms a user's email address using a confirmation code.
     *
     * @param string $confirmationCode The confirmation code to validate.
     * @return \Cake\Http\Response|null Redirects after confirmation attempt.
     */
    public function confirmEmail(string $confirmationCode): ?Response
    {
        $confirmationsTable = $this->fetchTable('UserAccountConfirmations');
        $confirmation = $confirmationsTable->find()
            ->where(['confirmation_code' => $confirmationCode])
            ->first();

        if ($confirmation) {
            $user = $this->Users->get($confirmation->user_id);
            $user->setAccess('active', true);
            $user->active = true;

            if ($this->Users->save($user)) {
                $confirmationsTable->delete($confirmation);
                $this->Flash->success(__('Your account has been confirmed. You can now log in.'));

                return $this->redirect(['action' => 'login']);
            } else {
                $this->Flash->error(__('There was an issue confirming your account. Please try again.'));

                return $this->redirect(['action' => 'register']);
            }
        } else {
            $this->Flash->error(__('Invalid confirmation code.'));

            return $this->redirect(['action' => 'register']);
        }

        return null;
    }

    /**
     * Handles the forgot password functionality.
     *
     * Allows users to request a password reset link via email.
     *
     * @return \Cake\Http\Response|null Redirects on successful request, or null on failure.
     */
    public function forgotPassword(): ?Response
    {
        if (!SettingsManager::read('Users.registrationEnabled', false)) {
            return $this->redirect($this->referer());
        }

        if ($this->request->is('post')) {
            $email = $this->request->getData('email');
            $user = $this->Users->findByEmail($email)->first();

            if ($user) {
                $confirmationsTable = $this->fetchTable('UserAccountConfirmations');
                $confirmation = $confirmationsTable->newEntity([
                    'user_id' => $user->id,
                    'confirmation_code' => Text::uuid(),
                ]);

                if ($confirmationsTable->save($confirmation)) {
                    $this->sendPasswordResetEmail($user, $confirmation);
                    $this->Flash->success(__(
                        'If your email is registered, you will receive a link to reset your password.',
                    ));

                    return $this->redirect(['action' => 'login']);
                }
            }
            $this->Flash->success(__('If your email is registered, you will receive a link to reset your password.'));
        }

        return null;
    }

    /**
     * Sends a password reset email to the user.
     *
     * @param \App\Model\Entity\User $user The user entity.
     * @param \App\Model\Entity\UserAccountConfirmation $confirmation The confirmation entity.
     * @return void
     */
    private function sendPasswordResetEmail(User $user, UserAccountConfirmation $confirmation): void
    {
        if (env('CAKE_ENV') === 'test') {
            return;
        }

        try {
            $data = [
                'template_identifier' => 'reset_password',
                'from' => SettingsManager::read('Email.reply_email', 'noreply@example.com'),
                'to' => $user->email,
                'viewVars' => [
                    'username' => $user->username,
                    'reset_password_link' => Router::url([
                        '_name' => 'reset-password',
                        $confirmation->confirmation_code,
                    ], true),
                ],
            ];

            QueueManager::push('App\Job\SendEmailJob', $data);
        } catch (Exception $e) {
            Log::error(__('Failed to send password reset email: {0}', $e->getMessage()));
        }
    }

    /**
     * Handles the password reset functionality.
     *
     * Allows users to reset their password using a valid confirmation code.
     *
     * @param string $confirmationCode The confirmation code from the password reset link.
     * @return \Cake\Http\Response|null Redirects after successful password reset, or null on failure.
     */
    public function resetPassword(string $confirmationCode): ?Response
    {
        if (!SettingsManager::read('Users.registrationEnabled', false)) {
            return $this->redirect($this->referer());
        }

        $confirmationsTable = $this->fetchTable('UserAccountConfirmations');
        $confirmation = $confirmationsTable->find()
            ->where(['confirmation_code' => $confirmationCode])
            ->first();

        if (!$confirmation) {
            $this->Flash->error(__('Invalid or expired password reset link.'));

            return $this->redirect(['action' => 'login']);
        }

        $user = $this->Users->get($confirmation->user_id);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $user->setAccess('is_admin', false);
            $user->setAccess('active', false);
            $user = $this->Users->patchEntity($user, $this->request->getData(), [
                'validate' => 'resetPassword',
            ]);

            if ($this->Users->save($user)) {
                $confirmationsTable->delete($confirmation);
                $this->Flash->success(__('Your password has been reset. Please log in with your new password.'));

                return $this->redirect(['action' => 'login']);
            } else {
                $this->Flash->error(__('There was an issue resetting your password. Please try again.'));
            }
        }

        $this->set(compact('user', 'confirmationCode'));

        return null;
    }
}


// ----- END FILE: src/Controller/UsersController.php -----

FILE: src/Controller/ErrorController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 2576 bytes
CONTENT:
<?php
declare(strict_types=1);

/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @since         3.3.4
 * @license       https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Event\EventInterface;
use Cake\View\JsonView;

/**
 * Error Handling Controller
 *
 * Controller used by ExceptionRenderer to render error responses.
 */
class ErrorController extends AppController
{
    /**
     * Initialization hook method.
     *
     * @return void
     */
    public function initialize(): void
    {
        // Only add parent::initialize() if you are confident your appcontroller is safe.
    }

    /**
     * Get alternate view classes that can be used in
     * content-type negotiation.
     *
     * @return array<string>
     */
    public function viewClasses(): array
    {
        return [JsonView::class];
    }

    /**
     * beforeFilter callback.
     *
     * @param \Cake\Event\EventInterface<\Cake\Controller\Controller> $event Event.
     * @return \Cake\Http\Response|null|void
     */
    public function beforeFilter(EventInterface $event): void
    {
    }

    /**
     * beforeRender callback.
     *
     * @param \Cake\Event\EventInterface<\Cake\Controller\Controller> $event Event.
     * @return \Cake\Http\Response|null|void
     */
    public function beforeRender(EventInterface $event): void
    {
        parent::beforeRender($event);

        $builder = $this->viewBuilder();
        $templatePath = 'Error';

        if (
            $this->request->getParam('prefix') &&
            in_array($builder->getTemplate(), ['error400', 'error500'], true)
        ) {
            $parts = explode(DIRECTORY_SEPARATOR, (string)$builder->getTemplatePath(), -1);
            $templatePath = implode(DIRECTORY_SEPARATOR, $parts) . DIRECTORY_SEPARATOR . 'Error';
        }

        $this->viewBuilder()->setTemplatePath($templatePath);
    }

    /**
     * afterFilter callback.
     *
     * @param \Cake\Event\EventInterface<\Cake\Controller\Controller> $event Event.
     * @return void
     */
    public function afterFilter(EventInterface $event): void
    {
    }
}


// ----- END FILE: src/Controller/ErrorController.php -----

FILE: src/Controller/RobotsController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1350 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller;

use App\Utility\SettingsManager;
use Cake\Event\EventInterface;
use Cake\Http\Response;

class RobotsController extends AppController
{
    /**
     * Configures authentication for specific actions.
     *
     * @param \Cake\Event\EventInterface $event The event instance.
     * @return void
     */
    public function beforeFilter(EventInterface $event): void
    {
        parent::beforeFilter($event);
        $this->Authentication->addUnauthenticatedActions(['index']);
    }

    /**
     * Display robots.txt content with language-specific paths
     *
     * @return \Cake\Http\Response
     */
    public function index(): Response
    {
        $robotsContent = SettingsManager::read('SEO.robots', '');

        // Get language from URL or default to 'en'
        $lang = $this->request->getParam('lang');

        // If no language parameter (root robots.txt request), default to 'en'
        if (empty($lang)) {
            $lang = 'en';
        }

        // Replace language placeholder with actual language code
        $robotsContent = str_replace('{LANG}', $lang, $robotsContent);

        return $this->response
            ->withType('text/plain')
            ->withStringBody($robotsContent)
            ->withCache('-1 minute', '+1 day'); // Add cache headers
    }
}


// ----- END FILE: src/Controller/RobotsController.php -----

FILE: src/Controller/RssController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3893 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller;

use App\Utility\SettingsManager;
use Cake\Cache\Cache;
use Cake\Event\EventInterface;
use Cake\Routing\Router;
use Cake\View\XmlView;

/**
 * RssController handles the generation of RSS feeds for the application.
 */
class RssController extends AppController
{
    /**
     * Before filter method to allow unauthenticated access to the index action.
     *
     * @param \Cake\Event\EventInterface $event The event object.
     * @return void
     */
    public function beforeFilter(EventInterface $event): void
    {
        parent::beforeFilter($event);
        $this->Authentication->allowUnauthenticated(['index']);
    }

    /**
     * Specifies the view classes to be used for rendering the RSS feed.
     *
     * @return array An array of view class names.
     */
    public function viewClasses(): array
    {
        return [XmlView::class];
    }

    /**
     * Generates the RSS feed for the latest articles.
     *
     * This method fetches published articles, constructs the RSS feed metadata,
     * and sets the necessary view options and response headers.
     *
     * @return void
     */
    public function index(): void
    {
        $currentLang = $this->request->getParam('lang', 'en');
        $siteName = SettingsManager::read('SEO.siteName');

        $articlesTable = $this->fetchTable('Articles');

        // Get published articles
        $cacheKey = $this->cacheKey;
        $articles = Cache::read($cacheKey, 'content');
        if (!$articles) {
            $articles = $articlesTable->find('all')
                ->select(['id', 'title', 'slug', 'summary', 'created'])
                ->where([
                    'kind' => 'article',
                    'is_published' => true,
                ])
                ->orderByDesc('created')
                ->all();
            Cache::write($cacheKey, $articles, 'content');
        }

        $siteUrl = Router::url(['_name' => 'home', 'lang' => $currentLang], true);

        // Build channel metadata
        $channelData = [
            'title' => __('Latest Articles from {0}', $siteName),
            'link' => $siteUrl,
            'description' => __('Latest articles and updates from our website'),
            'language' => $currentLang,
            'copyright' => 'Copyright ' . date('Y') . ' ' . $siteName,
            'generator' => $siteName,
            'docs' => 'https://www.sitemaps.org/protocol.html',
        ];

        // Add image data
        $channelData['image'] = [
            'url' => Router::url('/img/logo.png', true),
            'title' => __('Latest Articles from {0}', $siteName),
            'link' => $siteUrl,
        ];

        // Add items
        foreach ($articles as $article) {
            $articleUrl = Router::url([
                '_name' => 'article-by-slug',
                'slug' => $article->slug,
                'lang' => $currentLang,
            ], true);

            $channelData['item'][] = [
                'title' => $article->title,
                'link' => $articleUrl,
                'description' => strip_tags($article->summary),
                'pubDate' => $article->created->format('r'),
                'guid' => $articleUrl,
                'category' => __('Articles'),
                'author' => SettingsManager::read('Email.reply_email') . ' (' . $siteName . ')',
            ];
        }

        $this->viewBuilder()
            ->setOption('rootNode', 'rss')
            ->setOption('serialize', ['@version', 'channel']);

        $this->set([
            '@version' => '2.0',
            'channel' => $channelData,
        ]);

        // Set response type and cache headers
        $this->response = $this->response
        ->withType('xml')
        ->withHeader('Content-Type', 'text/xml; charset=UTF-8')
        ->withCache('-1 minute', '-1 minute');
    }
}


// ----- END FILE: src/Controller/RssController.php -----

FILE: src/Controller/TagsController.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 2161 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Event\EventInterface;
use Cake\Http\Exception\NotFoundException;

/**
 * Tags Controller
 *
 * Handles operations related to tags, including listing all tags and viewing articles associated with a specific tag.
 *
 * @property \App\Model\Table\TagsTable $Tags
 */
class TagsController extends AppController
{
    /**
     * Configures actions that can be accessed without authentication.
     *
     * @param \Cake\Event\EventInterface $event The event object.
     * @return void
     */
    public function beforeFilter(EventInterface $event): void
    {
        parent::beforeFilter($event);
        $this->Authentication->allowUnauthenticated(['index', 'view', 'viewBySlug']);
    }

    /**
     * Displays a paginated list of all tags.
     *
     * @return void
     */
    public function index(): void
    {
        $tags = $this->Tags->find()->all();
        $this->set(compact('tags'));
    }

    /**
     * Displays a tag and its associated published articles.
     *
     * Retrieves a tag by its slug and loads associated published articles with their authors.
     * Throws an exception if the tag is not found.
     *
     * @param string $slug The unique slug of the tag to retrieve.
     * @throws \Cake\Http\Exception\NotFoundException If the tag is not found.
     * @return void
     */
    public function viewBySlug(string $slug): void
    {
        $query = $this->Tags->find()
            ->contain(['Articles' => function ($q) {
                return $q->select(['id', 'title', 'slug', 'user_id', 'image', 'created'])
                    ->where([
                        'Articles.is_published' => true,
                        'Articles.kind' => 'article',
                        ])
                    ->contain(['Users' => function ($q) {
                        return $q->select(['id', 'username']);
                    }]);
            }])
            ->where(['Tags.slug' => $slug]);

        $tag = $query->first();

        if (!$tag) {
            throw new NotFoundException(__('Tag not found'));
        }

        $this->set(compact('tag'));
    }
}


// ----- END FILE: src/Controller/TagsController.php -----

FILE: src/Controller/PagesController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 2356 bytes
CONTENT:
<?php
declare(strict_types=1);

/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Core\Configure;
use Cake\Http\Exception\ForbiddenException;
use Cake\Http\Exception\NotFoundException;
use Cake\Http\Response;
use Cake\View\Exception\MissingTemplateException;

/**
 * Static content controller
 *
 * This controller will render views from templates/Pages/
 *
 * @link https://book.cakephp.org/4/en/controllers/pages-controller.html
 */
class PagesController extends AppController
{
    /**
     * Displays a view
     *
     * @param string ...$path Path segments.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Http\Exception\ForbiddenException When a directory traversal attempt.
     * @throws \Cake\View\Exception\MissingTemplateException When the view file could not
     *   be found and in debug mode.
     * @throws \Cake\Http\Exception\NotFoundException When the view file could not
     *   be found and not in debug mode.
     * @throws \Cake\View\Exception\MissingTemplateException In debug mode.
     */
    public function display(string ...$path): ?Response
    {
        if (!$path) {
            return $this->redirect('/');
        }
        if (in_array('..', $path, true) || in_array('.', $path, true)) {
            throw new ForbiddenException();
        }
        $page = $subpage = null;

        if (!empty($path[0])) {
            $page = $path[0];
        }
        if (!empty($path[1])) {
            $subpage = $path[1];
        }
        $this->set(compact('page', 'subpage'));

        try {
            return $this->render(implode('/', $path));
        } catch (MissingTemplateException $exception) {
            if (Configure::read('debug')) {
                throw $exception;
            }
            throw new NotFoundException();
        }
    }
}


// ----- END FILE: src/Controller/PagesController.php -----

FILE: src/Controller/AppController.php
LAST MODIFIED: 2025-07-15 20:58:46
SIZE: 4678 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller;

use App\Service\ConsentService;
use App\Utility\I18nManager;
use Cake\Controller\Controller;
use Cake\Core\Configure;
use Cake\Event\EventInterface;
use Cake\Log\LogTrait;
// No explicit `use Cake\Http\Response;` needed just for redirecting in beforeFilter

class AppController extends Controller
{
    use LogTrait;

    /**
     * Store a cache key available for all controllers to use
     * Created in the initialize method
     *
     * @var string
     */
    public string $cacheKey;

    /**
     * ConsentService for handling cookie consent and session management
     *
     * @var \App\Service\ConsentService
     */
    protected ConsentService $consentService;

    /**
     * Checks if the current request is an admin request.
     *
     * This method determines whether the request is intended for the admin section
     * of the application by checking if the 'prefix' routing parameter is set to 'Admin'.
     *
     * @return bool Returns true if the request is for the admin section, false otherwise.
     */
    private function isAdminRequest(): bool
    {
        return $this->request->getParam('prefix') === 'Admin';
    }

    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this->loadComponent('FormProtection');`
     *
     * @return void
     */
    public function initialize(): void
    {
        parent::initialize();
        $this->cacheKey = hash('xxh3', json_encode($this->request->getAttribute('params')));
        $this->loadComponent('Flash');
        $this->loadComponent('Authentication.Authentication'); // Loads the component

        // Initialize ConsentService
        $this->consentService = new ConsentService();

        // Only load FrontEndSite component for non-admin routes
        if (!$this->request->getParam('prefix') || $this->request->getParam('prefix') !== 'Admin') {
            $this->loadComponent('DefaultTheme.FrontEndSite');
        }
    }

    /**
     * beforeFilter callback.
     *
     * Executed before each controller action. Checks for admin access rights
     * when accessing admin-prefixed routes.
     *
     * @param \Cake\Event\EventInterface $event The event instance.
     * @return void
     */
    public function beforeFilter(EventInterface $event): void
    {
        parent::beforeFilter($event); // Call parent's beforeFilter

        I18nManager::setLocaleForLanguage($this->request->getParam('lang', 'en'));

        $identity = null;
        // The AuthenticationComponent (loaded in initialize) makes the identity available.
        // It relies on the AuthenticationMiddleware having run first to populate the request attribute.
        if ($this->components()->has('Authentication')) {
            $identity = $this->Authentication->getIdentity();
        }

        if ($identity) {
            $profilePic = $identity->image_url;

            // Only set profilePic if the user has an actual image file
            if ($profilePic && $identity->image) {
                $this->set(compact('profilePic'));
            }
        }

        if ($this->isAdminRequest()) {
            // If there is no identity, or the identifier part of the identity is null/empty
            if (!$identity || !$identity->getIdentifier() || $identity->get('is_admin') == false) {
                $this->Flash->error(__('Access denied. You must be logged in as an admin to view this page.'));
                $event->setResult($this->redirect(['_name' => 'home', 'prefix' => false]));

                return;
            }

            I18nManager::setLocalForAdminArea();
        }

        // Handle consent data processing
        $consentData = $this->consentService->getConsentData($this->request);
        $this->set($consentData);

        $this->set('activeCtl', $this->request->getParam('controller'));
        $this->set('activeAct', $this->request->getParam('action'));
    }

    /**
     * beforeRender method
     *
     * This method is called before the controller action is rendered. It
     * sets the theme for the view based on the prefix of the request.
     *
     * @param \Cake\Event\EventInterface $event The event object.
     * @return void
     */
    public function beforeRender(EventInterface $event): void
    {
        parent::beforeRender($event);

        $theme = $this->request->getParam('prefix') === 'Admin'
            ? Configure::read('Theme.admin_theme', 'AdminTheme')
            : Configure::read('Theme.default_theme', 'DefaultTheme');

        $this->viewBuilder()->setTheme($theme);
    }
}


// ----- END FILE: src/Controller/AppController.php -----

FILE: src/Controller/Component/MediaPickerTrait.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4587 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Component;

use Cake\Http\Response;
use Cake\ORM\Query;
use Cake\ORM\Table;

/**
 * MediaPickerTrait
 *
 * Provides shared functionality for media picker methods across controllers.
 * Handles common patterns for search, pagination, and AJAX responses in picker interfaces.
 */
trait MediaPickerTrait
{
    /**
     * Build base picker query with common select fields and ordering
     *
     * @param \Cake\ORM\Table $table The table to query
     * @param array $selectFields Fields to select
     * @param array $options Additional query options
     * @return \Cake\ORM\Query
     */
    protected function buildPickerQuery(Table $table, array $selectFields, array $options = []): Query
    {
        $query = $table->find()->select($selectFields);

        // Apply default ordering
        if (isset($options['order'])) {
            $query->orderBy($options['order']);
        } else {
            $query->orderBy([$table->getAlias() . '.created' => 'DESC']);
        }

        // Apply any containments
        if (isset($options['contain'])) {
            $query->contain($options['contain']);
        }

        return $query;
    }

    /**
     * Handle search filtering for picker queries
     *
     * @param \Cake\ORM\Query $query Query to filter
     * @param string|null $searchTerm Search term
     * @param array $searchFields Fields to search in
     * @return \Cake\ORM\Query
     */
    protected function handlePickerSearch(Query $query, ?string $searchTerm, array $searchFields): Query
    {
        if (!empty($searchTerm)) {
            $conditions = [];
            foreach ($searchFields as $field) {
                $conditions[] = [$field . ' LIKE' => '%' . $searchTerm . '%'];
            }
            $query->where(['OR' => $conditions]);
        }

        return $query;
    }

    /**
     * Setup pagination configuration for picker
     *
     * @param array $options Pagination options
     * @return array
     */
    protected function setupPickerPagination(array $options = []): array
    {
        $defaults = [
            'limit' => 12,
            'maxLimit' => 24,
        ];

        return array_merge($defaults, $options);
    }

    /**
     * Handle picker AJAX response
     *
     * @param mixed $results Results to return
     * @param string|null $search Search term
     * @param string $template Template to render for AJAX
     * @return \Cake\Http\Response|null
     */
    protected function handlePickerAjaxResponse(mixed $results, ?string $search, string $template): ?Response
    {
        if ($this->request->is('ajax')) {
            $this->set(compact('results', 'search'));
            $this->set('_serialize', ['results', 'search']);
            $this->viewBuilder()->setLayout('ajax');

            return $this->render($template);
        }

        return null;
    }

    /**
     * Apply exclusion filter for picker (e.g., exclude images already in gallery)
     *
     * @param \Cake\ORM\Query $query Query to filter
     * @param \Cake\ORM\Table $pivotTable Pivot table for relationships
     * @param string $foreignKey Foreign key field name
     * @param string $recordId Record ID to exclude related items from
     * @param string $excludeField Field name to exclude
     * @return \Cake\ORM\Query
     */
    protected function applyPickerExclusion(
        Query $query,
        Table $pivotTable,
        string $foreignKey,
        string $recordId,
        string $excludeField,
    ): Query {
        $excludeIds = $pivotTable
            ->find()
            ->select([$excludeField])
            ->where([$foreignKey => $recordId])
            ->all()
            ->extract($excludeField)
            ->toArray();

        if (!empty($excludeIds)) {
            $tableAlias = $query->getRepository()->getAlias();
            $query->where([$tableAlias . '.id NOT IN' => $excludeIds]);
        }

        return $query;
    }

    /**
     * Handle request limit parameter with validation
     *
     * @param int $default Default limit
     * @param int $max Maximum allowed limit
     * @return int
     */
    protected function getRequestLimit(int $default = 12, int $max = 24): int
    {
        return min((int)$this->request->getQuery('limit', $default), $max);
    }

    /**
     * Get current page from request
     *
     * @param int $default Default page number
     * @return int
     */
    protected function getRequestPage(int $default = 1): int
    {
        return (int)$this->request->getQuery('page', $default);
    }
}


// ----- END FILE: src/Controller/Component/MediaPickerTrait.php -----

FILE: src/Controller/ArticlesController.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 11498 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller;

use App\Model\Table\PageViewsTable;
use App\Model\Table\SlugsTable;
use App\Utility\SettingsManager;
use Cake\Cache\Cache;
use Cake\Event\EventInterface;
use Cake\Http\Exception\NotFoundException;
use Cake\Http\Response;
use Cake\Routing\Router;

/**
 * Articles Controller
 *
 * Manages article-related operations including viewing, listing, and commenting.
 *
 * @property \App\Model\Table\ArticlesTable $Articles
 * @property \App\Model\Table\PageViewsTable $PageViews
 * @property \App\Model\Table\SlugsTable $Slugs
 */
class ArticlesController extends AppController
{
    /**
     * Default pagination configuration.
     *
     * Defines the default settings for paginating article records.
     * The limit determines how many articles are displayed per page.
     *
     * @var array<string, mixed> $paginate Configuration array for pagination
     */
    protected array $paginate = [
        'limit' => 6,
    ];

    /**
     * PageViews Table
     *
     * @var \App\Model\Table\PageViewsTable $PageViews
     *
     * This property holds an instance of the PageViewsTable class.
     * It is used to interact with the page_views table in the database.
     * The PageViewsTable provides methods for querying and manipulating
     * page view data, such as tracking article views and retrieving view statistics.
     */
    protected PageViewsTable $PageViews;

    /**
     * Slugs Table
     *
     * @var \App\Model\Table\SlugsTable $Slugs
     *
     * This property holds an instance of the SlugsTable class.
     * It is used to interact with the slugs table in the database.
     * The SlugsTable provides methods for querying and manipulating
     * slug data, such as creating new slugs, finding the latest slug
     * for an article, and managing slug history.
     */
    protected SlugsTable $Slugs;

    /**
     * Initializes the controller.
     *
     * Sets up the Slugs and PageViews table instances.
     *
     * @return void
     */
    public function initialize(): void
    {
        parent::initialize();
        $this->Slugs = $this->fetchTable('Slugs');
        $this->PageViews = $this->fetchTable('PageViews');
    }

    /**
     * Configures authentication for specific actions.
     *
     * @param \Cake\Event\EventInterface $event The event instance.
     * @return void
     */
    public function beforeFilter(EventInterface $event): void
    {
        parent::beforeFilter($event);

        $this->Authentication->addUnauthenticatedActions(['view', 'index', 'viewBySlug', 'pageIndex']);

        if ($this->request->getParam('action') === 'addComment' && $this->request->is('post')) {
            $result = $this->Authentication->getResult();
            if (!$result || !$result->isValid()) {
                $session = $this->request->getSession();
                $session->write('Comment.formData', $this->request->getData());
            }
        }
    }

    /**
     * Displays the page index.
     *
     * Retrieves and sets the root page article and a threaded list of all page articles.
     *
     * @return void
     */
    public function pageIndex(): void
    {
        $article = $this->Articles->find()
            ->orderBy(['lft' => 'ASC'])
            ->where([
                'Articles.kind' => 'page',
                'Articles.is_published' => 1,
            ])
            ->first();

        $articles = $this->Articles->getTree();

        $this->set(compact('article', 'articles'));
    }

    /**
     * Displays a paginated list of published articles.
     *
     * Retrieves published articles with optional tag filtering.
     *
     * @return void
     */
    public function index(): void
    {
        $cacheKey = $this->cacheKey;
        $articles = Cache::read($cacheKey, 'content');
        $selectedTagId = $this->request->getQuery('tag');

        if (!$articles) {
            $query = $this->Articles->find()
                ->where([
                    'Articles.kind' => 'article',
                    'Articles.is_published' => 1,
                ])
                ->contain(['Users', 'Tags'])
                ->orderBy(['Articles.published' => 'DESC']);

            if ($selectedTagId) {
                $query->matching('Tags', function ($q) use ($selectedTagId) {
                    return $q->where(['Tags.id' => $selectedTagId]);
                });
            }

            $year = $this->request->getQuery('year');
            $month = $this->request->getQuery('month');

            if ($year) {
                $conditions = ['YEAR(Articles.published)' => $year];
                if ($month) {
                    $conditions['MONTH(Articles.published)'] = $month;
                }
                $query->where($conditions);
            }

            $articles = $this->paginate($query);
            Cache::write($cacheKey, $articles, 'content');
        }

        $recentArticles = [];
        if ($this->request->getQuery('page') > 1) {
            $recentArticles = $this->Articles->getRecentArticles($this->cacheKey);
        }

        $this->set(compact(
            'articles',
            'selectedTagId',
            'recentArticles',
        ));

        $this->viewBuilder()->setLayout('article_index');
    }

    /**
     * Displays an article by its slug.
     *
     * Retrieves an article using the provided slug, handling caching and redirects.
     *
     * @param string $slug The slug of the article to view.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Http\Exception\NotFoundException If the article is not found.
     */
    public function viewBySlug(string $slug): ?Response
    {
        $cacheKey = $slug . $this->cacheKey;
        $article = Cache::read($cacheKey, 'content');

        if (empty($article)) {
            // If not in cache, we need to check if this is the latest slug
            $slugEntity = $this->Slugs->find()
                ->where([
                    'slug' => $slug,
                    'model' => 'Articles',
                    ])
                ->orderBy(['created' => 'DESC'])
                ->select(['foreign_key'])
                ->first();

            if (!$slugEntity) {
                // If no slug found, try to find the article directly (fallback)
                $article = $this->Articles->find()
                    ->where(['slug' => $slug, 'is_published' => 1])
                    ->first();

                if (!$article) {
                    throw new NotFoundException(__('Article not found'));
                }

                $articleId = $article->id;
            } else {
                $articleId = $slugEntity->foreign_key;
            }

            // Check if it's the latest slug for the article
            $latestSlug = $this->Slugs->find()
                ->where(['foreign_key' => $articleId])
                ->orderBy(['created' => 'DESC'])
                ->select(['slug'])
                ->first();

            // If $slug is not the same as the latestSlug, do a 301 redirect
            if ($latestSlug && $latestSlug->slug !== $slug) {
                return $this->redirect(
                    [
                        'controller' => 'Articles',
                        'action' => 'view-by-slug',
                        'slug' => $latestSlug->slug,
                        '_full' => true,
                    ],
                    301,
                );
            }

            // Fetch the full article with its associations
            $article = $this->Articles->find()
                ->where([
                    'Articles.id' => $articleId,
                    'Articles.is_published' => 1,
                ])
                ->contain([
                    'Users',
                    'Tags',
                    'Comments' => function ($q) {
                        return $q->where(['Comments.display' => 1])
                                ->orderBy(['Comments.created' => 'DESC'])
                                ->contain(['Users']);
                    },
                    'Images',
                ])
                ->first();

            if (!$article) {
                throw new NotFoundException(__('Article not found'));
            }

            Cache::write($cacheKey, $article, 'content');
        }

        $this->viewBuilder()->setLayout($article->kind);

        $selectedTagId = false;

        // Get the child pages and breadcrumbs for the current article
        $childPages = $this->Articles->find('children', for: $article->id)
            ->orderBy(['lft' => 'ASC'])
            ->cache($cacheKey . '_children', 'content')
            ->toArray();

        // Breadcrumbs
        $crumbs = $this->Articles->find('path', for: $article->id)
            ->cache($cacheKey . '_crumbs', 'content')
            ->select(['slug', 'title', 'id'])
            ->all();

        $recentArticles = $this->Articles->getRecentArticles($this->cacheKey, ['Articles.id NOT IN' => [$article->id]]);

        $this->recordPageView($article->id);

        $this->set(compact(
            'article',
            'childPages',
            'selectedTagId',
            'crumbs',
            'recentArticles',
        ));

        return $this->render($article->kind);
    }

    /**
     * Adds a new comment to an article.
     *
     * @param string $articleId The ID of the article to which the comment will be added.
     * @return \Cake\Http\Response|null
     */
    public function addComment(string $articleId): ?Response
    {
        if (!$this->request->getSession()->read('Auth.id')) {
            $this->Flash->error(__('You must be logged in to add a comment.'));

            return $this->redirect($this->referer());
        }

        $article = $this->Articles
            ->find()
            ->where(['id' => $articleId])
            ->contain([])
            ->first();

        if (!$article) {
            $this->Flash->error(__('Article not found.'));

            return $this->redirect($this->referer());
        }

        if (
            (!SettingsManager::read('Comments.articlesEnabled') && $article->kind == 'article')
            || (!SettingsManager::read('Comments.pagesEnabled') && $article->kind == 'page')
        ) {
            $this->Flash->error(__('Comments are not enabled'));

            return $this->redirect($this->referer());
        }

        $userId = $this->request->getSession()->read('Auth.id');
        $content = $this->request->getData('content');

        if ($this->Articles->addComment($articleId, $userId, $content)) {
            $this->Flash->success(__('Your comment has been added.'));
        } else {
            $this->Flash->error(__('Unable to add your comment.'));
        }

        return $this->redirect(Router::url([
            '_name' => 'article-by-slug',
            'slug' => $article->slug,
        ], true));
    }

    /**
     * Records a page view for a given article.
     *
     * @param string $articleId The ID of the article being viewed
     * @return void
     */
    private function recordPageView(string $articleId): void
    {
        $pageView = $this->PageViews->newEmptyEntity();
        $pageView->article_id = $articleId;
        $pageView->ip_address = $this->request->clientIp();
        $pageView->user_agent = $this->request->getHeaderLine('User-Agent');
        $pageView->referer = $this->request->referer();
        $this->PageViews->save($pageView);
    }
}


// ----- END FILE: src/Controller/ArticlesController.php -----

FILE: src/Controller/Admin/UsersController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 6516 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\Event\EventInterface;
use Cake\Http\Response;

/**
 * Users Controller
 *
 * Manages user-related actions such as listing, viewing, adding, editing, and deleting users.
 *
 * @property \App\Model\Table\UsersTable $Users
 */
class UsersController extends AppController
{
    /**
     * Configures actions that can be accessed without authentication.
     *
     * @param \Cake\Event\EventInterface $event The event object.
     * @return void
     */
    public function beforeFilter(EventInterface $event): void
    {
        parent::beforeFilter($event);
        $this->Authentication->allowUnauthenticated(['login']);
    }

    /**
     * Lists users and handles search functionality.
     *
     * Processes both standard and AJAX requests for listing users.
     * Paginates user data for standard requests and performs search for AJAX requests.
     *
     * @return \Cake\Http\Response|null Returns a response for AJAX requests, null otherwise.
     */
    public function index(): ?Response
    {
        $statusFilter = $this->request->getQuery('status');
        $query = $this->Users->find()
            ->select([
                'Users.id',
                'Users.username',
                'Users.email',
                'Users.is_admin',
                'Users.active',
                'Users.created',
                'Users.modified',
                'Users.image',
                'Users.dir',
            ]);

        if ($statusFilter !== null) {
            $query->where(['Users.active' => (int)$statusFilter]);
        }

        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'Users.username LIKE' => '%' . $search . '%',
                    'Users.email LIKE' => '%' . $search . '%',
                ],
            ]);
        }
        $users = $this->paginate($query);
        if ($this->request->is('ajax')) {
            $this->set(compact('users'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }

        $this->set(compact('users'));

        return null;
    }

    /**
     * Displays details of a specific user.
     *
     * @param string|null $id User id.
     * @return void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null): void
    {
        $user = $this->Users->get($id, contain: ['Articles', 'Comments.Articles']);
        $this->set(compact('user'));
    }

    /**
     * Adds a new user.
     *
     * @return \Cake\Http\Response|null Redirects on successful add, null otherwise.
     */
    public function add(): ?Response
    {
        $user = $this->Users->newEmptyEntity();
        if ($this->request->is('post')) {
            $user->setAccess('is_admin', true);
            $user->setAccess('active', true);
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $this->set(compact('user'));

        return null;
    }

    /**
     * Edits user information.
     *
     * Handles updating of user details with security checks to prevent self-locking their account.
     *
     * @param string|null $id The ID of the user to edit.
     * @return \Cake\Http\Response|null Redirects on successful edit, null otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?string $id = null): ?Response
    {
        $user = $this->Users->get($id, contain: []);
        $currentUser = $this->Authentication->getIdentity();

        if ($this->request->is(['patch', 'post', 'put'])) {
            $user->setAccess('is_admin', true);
            $user->setAccess('active', true);

            $data = $this->request->getData();

            // Prevent changing own admin status
            if ($user->lockAdminAccountError($currentUser->id, $data)) {
                $this->Flash->error(__('You cannot remove your own admin status.'));

                return $this->redirect(['action' => 'edit', $id]);
            }
            //prevent disabling own account
            if ($user->lockEnabledAccountError($currentUser->id, $data)) {
                $this->Flash->error(__('You cannot disable your own account.'));

                return $this->redirect(['action' => 'edit', $id]);
            }

            $user = $this->Users->patchEntity($user, $data);
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $this->set(compact('user'));

        return null;
    }

    /**
     * Deletes a user.
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     * @throws \Cake\Http\Exception\MethodNotAllowedException When invalid method is used.
     */
    public function delete(?string $id = null): Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Users->get($id);
        $currentUser = $this->Authentication->getIdentity();
        if ($currentUser->id == $user->id) {
            $this->Flash->error(__('No deleting your own account.'));

            return $this->redirect(['action' => 'index']);
        }
        if ($this->Users->delete($user)) {
            $this->Flash->success(__('The user has been deleted.'));
        } else {
            $this->Flash->error(__('The user could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    /**
     * Logs out the current user.
     *
     * @return \Cake\Http\Response|null Redirects to the login page.
     */
    public function logout(): ?Response
    {
        $this->Authentication->logout();

        return $this->redirect('/');
    }
}


// ----- END FILE: src/Controller/Admin/UsersController.php -----

FILE: src/Controller/Admin/BlockedIpsController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4405 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\Cache\Cache;
use Cake\Http\Response;

/**
 * BlockedIps Controller
 *
 * @property \App\Model\Table\BlockedIpsTable $BlockedIps
 */
class BlockedIpsController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index(): ?Response
    {
        $query = $this->BlockedIps->find()
            ->select([
                'BlockedIps.id',
                'BlockedIps.ip_address',
                'BlockedIps.reason',
                'BlockedIps.blocked_at',
                'BlockedIps.expires_at',
                'BlockedIps.created',
                'BlockedIps.modified',
            ]);

        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'BlockedIps.ip_address LIKE' => '%' . $search . '%',
                    'BlockedIps.reason LIKE' => '%' . $search . '%',
                ],
            ]);
        }

        $blockedIps = $this->paginate($query);
        if ($this->request->is('ajax')) {
            $this->set(compact('blockedIps', 'search'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }
        $this->set(compact('blockedIps'));

        return null;
    }

    /**
     * View method
     *
     * @param string|null $id Blocked Ip id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null): void
    {
        $blockedIp = $this->BlockedIps->get($id, contain: []);
        $this->set(compact('blockedIp'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add(): ?Response
    {
        $blockedIp = $this->BlockedIps->newEmptyEntity();
        if ($this->request->is('post')) {
            $blockedIp = $this->BlockedIps->patchEntity($blockedIp, $this->request->getData());
            if ($this->BlockedIps->save($blockedIp)) {
                Cache::clear('ip_blocker');
                $this->Flash->success(__('The blocked ip has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The blocked ip could not be saved. Please, try again.'));
        }
        $this->set(compact('blockedIp'));

        return null;
    }

    /**
     * Edit method
     *
     * @param string|null $id Blocked Ip id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?string $id = null): ?Response
    {
        $blockedIp = $this->BlockedIps->get($id, contain: []);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $blockedIp = $this->BlockedIps->patchEntity($blockedIp, $this->request->getData());
            if ($this->BlockedIps->save($blockedIp)) {
                Cache::clear('ip_blocker');
                $this->Flash->success(__('The blocked ip has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The blocked ip could not be saved. Please, try again.'));
        }
        $this->set(compact('blockedIp'));

        return null;
    }

    /**
     * Delete method
     *
     * @param string|null $id Blocked Ip id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?string $id = null): ?Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $blockedIp = $this->BlockedIps->get($id);
        if ($this->BlockedIps->delete($blockedIp)) {
            $this->Flash->success(__('The blocked ip has been deleted.'));
            Cache::clear('ip_blocker');
        } else {
            $this->Flash->error(__('The blocked ip could not be deleted. Please, try again.'));
        }

        return $this->redirect($this->referer());
    }
}


// ----- END FILE: src/Controller/Admin/BlockedIpsController.php -----

FILE: src/Controller/Admin/SystemLogsController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 6058 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\Http\Response;

/**
 * SystemLogs Controller
 *
 * Manages system logs, providing functionalities to view, filter, search, and delete logs.
 *
 * @property \App\Model\Table\SystemLogsTable $SystemLogs
 */
class SystemLogsController extends AppController
{
    /**
     * Index method for SystemLogs.
     *
     * Retrieves and displays a list of system logs. Supports filtering by log level and group name,
     * and allows for searching within the logs when accessed via AJAX. The logs are ordered by creation date in
     * descending order. Also retrieves distinct log levels and group names for filtering options.
     *
     * @return \Cake\Http\Response|null Returns null to render the view, or a Response object for AJAX requests.
     * @throws \Cake\Http\Exception\NotFoundException If the page is not found.
     * @throws \Cake\Database\Exception\DatabaseException If there's an issue with the database query.
     */
    public function index(): ?Response
    {
        $query = $this->SystemLogs->find()
            ->select([
                'SystemLogs.id',
                'SystemLogs.level',
                'SystemLogs.message',
                'SystemLogs.context',
                'SystemLogs.group_name',
                'SystemLogs.created',
            ])
            ->orderBy(['SystemLogs.created' => 'DESC']);

        $levels = $this->SystemLogs->find()
            ->select(['level'])
            ->distinct(['level'])
            ->orderBy(['level' => 'ASC'])
            ->all()
            ->extract('level')
            ->toArray();

        $groupNames = $this->SystemLogs->find()
            ->select(['group_name'])
            ->distinct(['group_name'])
            ->orderBy(['group_name' => 'ASC'])
            ->all()
            ->extract('group_name')
            ->toArray();

        $selectedLevel = $this->request->getQuery('level');
        $selectedGroup = $this->request->getQuery('group');

        if ($selectedLevel) {
            $query->where(['SystemLogs.level' => $selectedLevel]);
        }

        if ($selectedGroup) {
            $query->where(['SystemLogs.group_name' => $selectedGroup]);
        }

        if ($this->request->is('ajax')) {
            $search = $this->request->getQuery('search');
            if (!empty($search)) {
                $query->where([
                    'OR' => [
                        'SystemLogs.level LIKE' => '%' . $search . '%',
                        'SystemLogs.message LIKE' => '%' . $search . '%',
                        'SystemLogs.context LIKE' => '%' . $search . '%',
                        'SystemLogs.group_name LIKE' => '%' . $search . '%',
                        'DATE(SystemLogs.created) LIKE' => '%' . $search . '%',
                    ],
                ]);
            }
            $systemLogs = $query->all();
            $this->set(compact('systemLogs'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }

        $systemLogs = $this->paginate($query);
        $this->set(compact('systemLogs', 'levels', 'groupNames', 'selectedLevel', 'selectedGroup'));

        return null;
    }

    /**
     * View method for displaying a specific system log.
     *
     * @param string|null $id System Log id.
     * @return void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null): void
    {
        $systemLog = $this->SystemLogs->get($id, contain: []);
        $this->set(compact('systemLog'));
    }

    /**
     * Delete system logs based on specified criteria.
     *
     * Handles various deletion scenarios:
     * - Delete all logs
     * - Delete logs by level
     * - Delete logs by group
     * - Delete a single log by ID
     *
     * @param string|null $type The type of deletion ('all', 'level', 'group') or log ID for single deletion
     * @param string|null $value The value associated with the deletion type (level or group name)
     * @return \Cake\Http\Response|null Redirects to the index action after deletion attempt
     * @throws \Cake\Http\Exception\MethodNotAllowedException When the request method is not POST or DELETE
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When a single log for deletion is not found
     */
    public function delete(?string $type = null, ?string $value = null): ?Response
    {
        $this->request->allowMethod(['post', 'delete']);

        if ($type === 'all') {
            // Delete all logs
            if ($this->SystemLogs->deleteAll([])) {
                $this->Flash->success(__('All logs have been deleted.'));
            } else {
                $this->Flash->error(__('Unable to delete all logs.'));
            }
        } elseif ($type === 'level' && $value) {
            // Delete logs by level
            if ($this->SystemLogs->deleteAll(['level' => $value])) {
                $this->Flash->success(__('All logs with level {0} have been deleted.', $value));
            } else {
                $this->Flash->error(__('Unable to delete logs with level {0}.', $value));
            }
        } elseif ($type === 'group' && $value) {
            // Delete logs by group
            if ($this->SystemLogs->deleteAll(['group_name' => $value])) {
                $this->Flash->success(__('All logs in group {0} have been deleted.', $value));
            } else {
                $this->Flash->error(__('Unable to delete logs in group {0}.', $value));
            }
        } else {
            // Delete a single log by ID
            $log = $this->SystemLogs->get($type);
            if ($this->SystemLogs->delete($log)) {
                $this->Flash->success(__('The log has been deleted.'));
            } else {
                $this->Flash->error(__('Unable to delete the log.'));
            }
        }

        return $this->redirect(['action' => 'index']);
    }
}


// ----- END FILE: src/Controller/Admin/SystemLogsController.php -----

FILE: src/Controller/Admin/ImagesController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 15958 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use App\Controller\Component\MediaPickerTrait;
use App\Service\ImageProcessingService;
use App\Utility\ArchiveExtractor;
use Cake\Http\Exception\NotFoundException;
use Cake\Http\Response;
use Cake\View\JsonView;
use Exception;
// use Cake\Http\Exception\BadRequestException; // Not strictly needed if handling error codes directly

/**
 * Images Controller
 *
 * Manages CRUD operations for images and handles image selection for the Trumbowyg and Markdown-It editors.
 *
 * @property \App\Model\Table\ImagesTable $Images
 */
class ImagesController extends AppController
{
    use MediaPickerTrait;

    /**
     * Specifies the view classes supported by this controller.
     */
    public function viewClasses(): array
    {
        return [JsonView::class];
    }

    /**
     * Lists images with support for standard and AJAX requests.
     *
     * @return \Cake\Http\Response The response object containing the rendered view.
     */
    public function index(): Response
    {
        $session = $this->request->getSession();
        $viewType = $this->request->getQuery('view');

        // Check if view type is provided in the query, otherwise use session value or default to 'list'
        if ($viewType) {
            $session->write('Images.viewType', $viewType);
        } else {
            $viewType = $session->read('Images.viewType', 'grid');
        }

        $query = $this->Images->find()
            ->select([
                'Images.id',
                'Images.name',
                'Images.image',
                'Images.dir',
                'Images.alt_text',
                'Images.keywords',
                'Images.created',
                'Images.modified',
            ]);

        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'name LIKE' => '%' . $search . '%',
                    'alt_text LIKE' => '%' . $search . '%',
                    'keywords LIKE' => '%' . $search . '%',
                ],
            ]);
        }
        $images = $this->paginate($query);
        if ($this->request->is('ajax')) {
            $this->set(compact('images', 'viewType', 'search'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }
        $this->set(compact('images', 'viewType'));

        return $this->render($viewType === 'grid' ? 'index_grid' : 'index');
    }

    /**
     * Displays details of a specific image.
     *
     * @param string|null $id Image id.
     * @return void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null): void
    {
        $image = $this->Images->get($id, contain: []);
        $this->set(compact('image'));
    }

    /**
     * Handles the selection of images for the Trumbowyg editor.
     *
     * This method sets up pagination for the images with a maximum limit of 8 per page.
     * It allows searching through images based on their name, alt text, or keywords.
     * The search query is retrieved from the request's query parameters.
     *
     * If a search term is provided, it filters the images accordingly.
     * The filtered images are then paginated and set to be available in the view.
     *
     * Additionally, it checks if only the gallery should be loaded based on the 'gallery_only'
     * query parameter. If true, it sets the template to 'image_gallery' and uses a minimal layout.
     * Otherwise, it uses a minimal layout without changing the template.
     *
     * @return void
     */
    public function imageSelect(): void
    {
        $limit = min((int)$this->request->getQuery('limit', 12), 24);
        $this->paginate = [
            'limit' => $limit,
            'maxLimit' => 24,
            'order' => ['Images.created' => 'DESC'],
        ];

        $query = $this->Images->find();
        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'Images.name LIKE' => '%' . $search . '%',
                    'Images.alt_text LIKE' => '%' . $search . '%',
                    'Images.keywords LIKE' => '%' . $search . '%',
                ],
            ]);
        }

        $images = $this->paginate($query);
        $this->set(compact('images', 'search'));

        // Check if this is a search request that should only return results HTML
        $galleryOnly = $this->request->getQuery('gallery_only');
        if ($galleryOnly) {
            // For search requests, only return the results portion to avoid flicker
            $this->viewBuilder()->setTemplate('image_select_results');
        } else {
            // For initial load, return the full template with search form
            $this->viewBuilder()->setTemplate('image_select');
        }

        $this->viewBuilder()->setLayout('ajax');
    }

    /**
     * Adds a new image.
     *
     * This method handles the creation of a new image entity. It uses the 'create'
     * validation ruleset when processing the submitted form data. On successful save,
     * it redirects to the index action. If the save fails, it displays an error message.
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add(): ?Response
    {
        $image = $this->Images->newEmptyEntity();
        if ($this->request->is('post')) {
            $image = $this->Images->patchEntity($image, $this->request->getData(), ['validate' => 'create']);
            if ($this->Images->save($image)) {
                $this->Flash->success(__('The image has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The image could not be saved. Please, try again.'));
        }
        $this->set(compact('image'));

        return null;
    }

    /**
     * Handles bulk upload of images, showing the upload form for GET requests
     * and processing AJAX uploads for POST requests.
     *
     * @return \Cake\Http\Response|null Returns Response for AJAX requests, void for GET
     */
    public function bulkUpload(): ?Response
    {
        $this->request->allowMethod(['get', 'post']);
        $response = $this->getResponse(); // Use getResponse() to get the current response object

        if ($this->request->is('get')) {
            // Render the bulk_upload.php template by default for GET
            return null;
        }

        // AJAX POST request handling
        // JsonView will be used automatically due to viewClasses() and Accept header

        $uploadedFile = $this->request->getUploadedFile('image');

        // Default error
        $apiResponse = [
            'success' => false,
            'message' => __('An unexpected error occurred.'),
        ];
        $statusCode = 500;

        if (!$uploadedFile) {
            $apiResponse['message'] = __('No file was uploaded or file key "image" is missing.');
            $statusCode = 400; // Bad Request
        } else {
            try {
                $uploadService = new ImageProcessingService(
                    $this->Images,
                    $this->fetchTable('ImageGalleriesImages'),
                    new ArchiveExtractor(),
                );

                $result = $uploadService->processUploadedFiles([$uploadedFile]);

                if ($result['success']) {
                    if ($result['success_count'] === 1) {
                        // Single image uploaded successfully
                        $image = $result['created_images'][0];
                        $apiResponse = [
                            'success' => true,
                            'message' => __('Image "{0}" uploaded successfully.', $image['name']),
                            'image' => $image,
                        ];
                        $statusCode = 201; // Created
                    } else {
                        // Multiple images from archive
                        $apiResponse = [
                            'success' => true,
                            'message' => $result['message'],
                            'images' => $result['created_images'],
                            'total_processed' => $result['total_processed'],
                            'success_count' => $result['success_count'],
                            'error_count' => $result['error_count'],
                        ];

                        if ($result['error_count'] > 0) {
                            $apiResponse['errors'] = $result['errors'];
                        }

                        $statusCode = 201; // Created
                    }
                } else {
                    // Failed to process
                    $apiResponse = [
                        'success' => false,
                        'message' => $result['message'],
                        'errors' => $result['errors'],
                    ];
                    $statusCode = 422; // Unprocessable Entity
                }
            } catch (Exception $e) {
                $this->log("Bulk upload: Processing failed: {$e->getMessage()}", 'error');
                $apiResponse = [
                    'success' => false,
                    'message' => __('Failed to process the uploaded file.'),
                ];
                $statusCode = 500;
            }
        }

        // Suggestion 3: Use setOption('serialize', ...)
        $this->set($apiResponse);
        $this->viewBuilder()->setOption('serialize', array_keys($apiResponse));

        return $response->withStatus($statusCode); // Suggestion 4: Return appropriate HTTP status
    }

    /**
     * Edits an existing image.
     *
     * @param string|null $id Image id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?string $id = null): ?Response
    {
        $image = $this->Images->get($id, contain: []);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $image = $this->Images->patchEntity($image, $this->request->getData(), ['validate' => 'update']);
            if ($this->Images->save($image)) {
                $this->Flash->success(__('The image has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The image could not be saved. Please, try again.'));
        }
        $this->set(compact('image'));

        return null;
    }

    /**
     * Deletes an image.
     *
     * @param string|null $id Image id.
     * @return \Cake\Http\Response Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?string $id = null): Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $image = $this->Images->get($id);
        if ($this->Images->delete($image)) {
            $this->Flash->success(__('The image has been deleted.'));
        } else {
            $this->Flash->error(__('The image could not be deleted. Please, try again.'));
        }

        return $this->redirect($this->referer(['action' => 'index']));
    }

    /**
     * Deletes an image that was uploaded via bulk uploader.
     * Intended to be called by Dropzone's removedfile event.
     *
     * @param string|null $id Image id.
     * @return \Cake\Http\Response
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     * @throws \Cake\Http\Exception\MethodNotAllowedException If not a DELETE request.
     */
    public function deleteUploadedImage(?string $id = null): Response
    {
        $this->request->allowMethod(['delete']); // Suggestion 9: New action
        $response = $this->getResponse();

        $apiResponse = [
            'success' => false,
            'message' => __('Image could not be deleted.'),
        ];
        $statusCode = 500;

        if (!$id) {
            $apiResponse['message'] = __('No image ID provided.');
            $statusCode = 400;
        } else {
            try {
                $image = $this->Images->get($id);
                if ($this->Images->delete($image)) {
                    // Note: Ensure your ImagesTable->delete() or afterDelete event handles file system deletion.
                    $apiResponse = [
                        'success' => true,
                        'message' => __('Image "{0}" deleted successfully from server.', $image->name),
                    ];
                    $statusCode = 200; // OK
                } else {
                    $apiResponse['message'] = __('The image database record could not be deleted.');
                    // Errors might be on $image->getErrors() if the delete was blocked by rules.
                    if ($image->hasErrors()) {
                        $apiResponse['errors'] = $image->getErrors();
                        $statusCode = 422; // If rule-based delete failure
                    }
                }
            } catch (NotFoundException $e) {
                $apiResponse['message'] = __('Image not found.');
                $statusCode = 404; // Not Found
            } catch (Exception $e) {
                $this->log("Error_deleting_uploaded_image_{$id}: " . $e->getMessage(), 'error');
                $apiResponse['message'] = __('An unexpected error occurred while deleting the image.');
                $statusCode = 500;
            }
        }

        $this->set($apiResponse);
        $this->viewBuilder()->setOption('serialize', array_keys($apiResponse));

        return $response->withStatus($statusCode);
    }

    /**
     * Image picker for selecting images to add to galleries
     * Uses MediaPickerTrait for DRY implementation
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function picker(): ?Response
    {
        $galleryId = $this->request->getQuery('gallery_id');
        $viewType = $this->request->getQuery('view', 'grid');

        // Build query with trait helper
        $selectFields = [
            'Images.id',
            'Images.name',
            'Images.alt_text',
            'Images.keywords',
            'Images.image',
            'Images.dir',
            'Images.size',
            'Images.mime',
            'Images.created',
            'Images.modified',
        ];

        $query = $this->buildPickerQuery($this->Images, $selectFields);

        // Apply exclusion filter if gallery_id provided
        if ($galleryId) {
            $query = $this->applyPickerExclusion(
                $query,
                $this->fetchTable('ImageGalleriesImages'),
                'image_gallery_id',
                $galleryId,
                'image_id',
            );
        }

        // Handle search with trait helper
        $search = $this->request->getQuery('search');
        $searchFields = [
            'Images.name',
            'Images.alt_text',
            'Images.keywords',
        ];
        $query = $this->handlePickerSearch($query, $search, $searchFields);

        $images = $this->paginate($query);

        // Handle AJAX requests with trait helper
        $ajaxResponse = $this->handlePickerAjaxResponse($images, $search, 'picker_search_results');
        if ($ajaxResponse) {
            $this->set(compact('galleryId', 'viewType'));

            return $ajaxResponse;
        }

        $this->set(compact('images', 'galleryId', 'viewType'));

        // Return appropriate template based on view type
        return $this->render($viewType === 'grid' ? 'picker_grid' : 'picker');
    }
}


// ----- END FILE: src/Controller/Admin/ImagesController.php -----

FILE: src/Controller/Admin/TagsController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 8558 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\Cache\Cache;
use Cake\Http\Response;
use Exception;

/**
 * Tags Controller
 *
 * Manages tags, providing functionalities to list, view, add, edit, and delete tags.
 *
 * @property \App\Model\Table\TagsTable $Tags
 */
class TagsController extends AppController
{
    /**
     * Clears the content cache (used for both articles and tags)
     *
     * @return void
     */
    private function clearContentCache(): void
    {
        Cache::clear('content');
    }

    /**
     * Retrieves a hierarchical list of tags.
     *
     * @return void
     */
    public function treeIndex(): ?Response
    {
        $session = $this->request->getSession();
        $session->write('Tags.indexAction', 'treeIndex');

        $statusFilter = $this->request->getQuery('status');
        $conditions = [];

        if ($statusFilter === '1') {
            //$conditions['Articles.is_published'] = '1';
        } elseif ($statusFilter === '0') {
            //$conditions['Articles.is_published'] = '0';
        }

        if ($this->request->is('ajax')) {
            $search = $this->request->getQuery('search');
            if (!empty($search)) {
                $conditions['OR'] = [
                    'Tags.title LIKE' => '%' . $search . '%',
                    'Tags.slug LIKE' => '%' . $search . '%',
                    'Tags.description LIKE' => '%' . $search . '%',
                    'Tags.meta_title LIKE' => '%' . $search . '%',
                    'Tags.meta_description LIKE' => '%' . $search . '%',
                    'Tags.meta_keywords LIKE' => '%' . $search . '%',
                ];
            }
            $tags = $this->Tags->getTree($conditions, [
                'slug',
                'created',
                'modified',
            ]);
            $this->set(compact('tags'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('tree_index_search_results');
        }

        $tags = $this->Tags->getTree($conditions, [
            'slug',
            'created',
            'modified',
        ]);

        $this->set(compact('tags'));

        return null;
    }

    /**
     * Updates the tree structure of articles.
     *
     * @return \Cake\Http\Response|null The JSON response indicating success or failure.
     * @throws \Exception If an error occurs during the reordering process.
     */
    public function updateTree(): ?Response
    {
        $this->request->allowMethod(['post', 'put']);
        $data = $this->request->getData();

        try {
            $result = $this->Tags->reorder($data);
            $this->clearContentCache();

            return $this->response->withType('application/json')
                ->withStringBody(json_encode(['success' => true, 'result' => $result]));
        } catch (Exception $e) {
            return $this->response->withType('application/json')
                ->withStringBody(json_encode(['success' => false, 'error' => $e->getMessage()]));
        }
    }

    /**
     * Index method for Tags Controller
     *
     * Handles the display of tags. Supports both standard and AJAX requests.
     * For AJAX requests, performs a search based on the 'search' query parameter and returns
     * the results in an 'ajax' layout. For standard requests, paginates the tags.
     *
     * @return \Cake\Http\Response|null Returns a Response object for AJAX requests, null otherwise.
     */
    public function index(): ?Response
    {
        $session = $this->request->getSession();
        $session->write('Tags.indexAction', 'index');
        $statusFilter = $this->request->getQuery('level');

        $query = $this->Tags->find()
            ->contain(['ParentTag'])
            ->select();

        if ($statusFilter == '0') {
            $query->where(['Tags.parent_id IS' => null]);
        }

        if ($statusFilter == '1') {
            $query->where(['Tags.parent_id IS NOT' => null]);
        }

        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'Tags.title LIKE' => '%' . $search . '%',
                    'Tags.slug LIKE' => '%' . $search . '%',
                    'Tags.meta_title LIKE' => '%' . $search . '%',
                    'Tags.meta_description LIKE' => '%' . $search . '%',
                    'Tags.meta_keywords LIKE' => '%' . $search . '%',
                ],
            ]);
        }
        $tags = $this->paginate($query);
        if ($this->request->is('ajax')) {
            $this->set(compact('tags', 'search'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }
        $this->set(compact('tags'));

        return null;
    }

    /**
     * View method
     *
     * Displays details of a specific tag, including associated articles and their authors.
     *
     * @param string|null $id Tag id.
     * @return void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null): void
    {
        $tag = $this->Tags->get($id, contain: ['Articles.Users']);
        $this->set(compact('tag'));
    }

    /**
     * Add method
     *
     * Handles the creation of a new tag.
     *
     * @return \Cake\Http\Response|null Redirects on successful add, null otherwise.
     */
    public function add(): ?Response
    {
        $session = $this->request->getSession();
        $tag = $this->Tags->newEmptyEntity();
        if ($this->request->is('post')) {
            $tag = $this->Tags->patchEntity($tag, $this->request->getData());
            if ($this->Tags->save($tag)) {
                $this->clearContentCache();
                $this->Flash->success(__('The tag has been saved.'));

                return $this->redirect(['action' => $session->read('Tags.indexAction', 'treeIndex')]);
            }
            $this->Flash->error(__('The tag could not be saved. Please, try again.'));
        }
        $articles = $this->Tags->Articles->find('list', limit: 200)->all();
        $parentTags = $this->Tags->find('list')->all();

        $this->set(compact('tag', 'articles', 'parentTags'));

        return null;
    }

    /**
     * Edit method
     *
     * Handles the editing of an existing tag.
     *
     * @param string|null $id Tag id.
     * @return \Cake\Http\Response|null Redirects on successful edit, null otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?string $id = null): ?Response
    {
        $session = $this->request->getSession();
        $tag = $this->Tags->get($id, contain: ['Articles']);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $tag = $this->Tags->patchEntity($tag, $this->request->getData());
            if ($this->Tags->save($tag)) {
                $this->clearContentCache();
                $this->Flash->success(__('The tag has been saved.'));

                return $this->redirect(['action' => $session->read('Tags.indexAction', 'treeIndex')]);
            }
            $this->Flash->error(__('The tag could not be saved. Please, try again.'));
        }
        $articles = $this->Tags->Articles->find('list', limit: 200)->all();
        $parentTags = $this->Tags->find('list')
        ->where(['id NOT IN' => $id])
        ->all();

        $this->set(compact('tag', 'articles', 'parentTags'));

        return null;
    }

    /**
     * Delete method
     *
     * Handles the deletion of a tag.
     *
     * @param string|null $id Tag id.
     * @return \Cake\Http\Response Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     * @throws \Cake\Http\Exception\MethodNotAllowedException When invalid method is used.
     */
    public function delete(?string $id = null): Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $session = $this->request->getSession();
        $tag = $this->Tags->get($id);
        if ($this->Tags->delete($tag)) {
            $this->clearContentCache();
            $this->Flash->success(__('The tag has been deleted.'));
        } else {
            $this->Flash->error(__('The tag could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => $session->read('Tags.indexAction', 'treeIndex')]);
    }
}


// ----- END FILE: src/Controller/Admin/TagsController.php -----

FILE: src/Controller/Admin/InternationalisationsController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 5473 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\Http\Response;

/**
 * Internationalisations Controller
 *
 * @property \App\Model\Table\InternationalisationsTable $Internationalisations
 */
class InternationalisationsController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index(): ?Response
    {
        $statusFilter = $this->request->getQuery('locale');

        $query = $this->Internationalisations->find()
            ->select([
                'Internationalisations.id',
                'Internationalisations.locale',
                'Internationalisations.message_id',
                'Internationalisations.message_str',
                'Internationalisations.created',
                'Internationalisations.modified',
            ]);

        if ($statusFilter !== null) {
            $query->where(['Internationalisations.locale' => $statusFilter]);
        }

        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'Internationalisations.locale LIKE' => '%' . $search . '%',
                    'Internationalisations.message_id LIKE' => '%' . $search . '%',
                    'Internationalisations.message_str LIKE' => '%' . $search . '%',
                ],
            ]);
        }
        $internationalisations = $this->paginate($query);
        if ($this->request->is('ajax')) {
            $this->set(compact('internationalisations', 'search'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }

        // Get unique locales for the locale filter
        $localesQuery = $this->Internationalisations->find()
            ->select(['Internationalisations.locale'])
            ->distinct(['Internationalisations.locale'])
            ->orderBy(['Internationalisations.locale' => 'ASC']);

        $locales = $localesQuery->all()->extract('locale')->toList();
        $this->set(compact('internationalisations', 'locales'));

        return null;
    }

    /**
     * View method
     *
     * @param string|null $id Internationalisation id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null): void
    {
        $internationalisation = $this->Internationalisations->get($id, contain: []);
        $this->set(compact('internationalisation'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add(): ?Response
    {
        $internationalisation = $this->Internationalisations->newEmptyEntity();
        if ($this->request->is('post')) {
            $internationalisation = $this->Internationalisations->patchEntity(
                $internationalisation,
                $this->request->getData(),
            );
            if ($this->Internationalisations->save($internationalisation)) {
                $this->Flash->success(__('The internationalisation has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The internationalisation could not be saved. Please, try again.'));
        }
        $this->set(compact('internationalisation'));

        return null;
    }

    /**
     * Edit method
     *
     * @param string|null $id Internationalisation id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?string $id = null): ?Response
    {
        $internationalisation = $this->Internationalisations->get($id, contain: []);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $internationalisation = $this->Internationalisations->patchEntity(
                $internationalisation,
                $this->request->getData(),
            );
            if ($this->Internationalisations->save($internationalisation)) {
                $this->Flash->success(__('The internationalisation has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The internationalisation could not be saved. Please, try again.'));
        }
        $this->set(compact('internationalisation'));

        return null;
    }

    /**
     * Delete method
     *
     * @param string|null $id Internationalisation id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?string $id = null): Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $internationalisation = $this->Internationalisations->get($id);
        if ($this->Internationalisations->delete($internationalisation)) {
            $this->Flash->success(__('The internationalisation has been deleted.'));
        } else {
            $this->Flash->error(__('The internationalisation could not be deleted. Please, try again.'));
        }

        return $this->redirect($this->referer());
    }
}


// ----- END FILE: src/Controller/Admin/InternationalisationsController.php -----

FILE: src/Controller/Admin/AipromptsController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4311 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\Http\Response;

/**
 * Aiprompts Controller
 *
 * @property \App\Model\Table\AipromptsTable $Aiprompts
 */
class AipromptsController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index(): ?Response
    {
        $query = $this->Aiprompts->find()
            ->select([
                'Aiprompts.id',
                'Aiprompts.task_type',
                'Aiprompts.system_prompt',
                'Aiprompts.model',
                'Aiprompts.max_tokens',
                'Aiprompts.temperature',
                'Aiprompts.created',
                'Aiprompts.modified',
            ]);

        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'Aiprompts.task_type LIKE' => '%' . $search . '%',
                    'Aiprompts.system_prompt LIKE' => '%' . $search . '%',
                    'Aiprompts.model LIKE' => '%' . $search . '%',
                ],
            ]);
        }
        $aiprompts = $this->paginate($query);
        if ($this->request->is('ajax')) {
            $this->set(compact('aiprompts', 'search'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }
        $this->set(compact('aiprompts'));

        return null;
    }

    /**
     * View method
     *
     * @param string|null $id Aiprompt id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null): void
    {
        $aiprompt = $this->Aiprompts->get($id, contain: []);
        $this->set(compact('aiprompt'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add(): ?Response
    {
        $aiprompt = $this->Aiprompts->newEmptyEntity();
        if ($this->request->is('post')) {
            $aiprompt = $this->Aiprompts->patchEntity($aiprompt, $this->request->getData());
            if ($this->Aiprompts->save($aiprompt)) {
                $this->Flash->success(__('The aiprompt has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The aiprompt could not be saved. Please, try again.'));
        }
        $this->set(compact('aiprompt'));

        return null;
    }

    /**
     * Edit method
     *
     * @param string|null $id Aiprompt id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?string $id = null): ?Response
    {
        $aiprompt = $this->Aiprompts->get($id, contain: []);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $aiprompt = $this->Aiprompts->patchEntity($aiprompt, $this->request->getData());
            if ($this->Aiprompts->save($aiprompt)) {
                $this->Flash->success(__('The aiprompt has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The aiprompt could not be saved. Please, try again.'));
        }
        $this->set(compact('aiprompt'));

        return null;
    }

    /**
     * Delete method
     *
     * @param string|null $id Aiprompt id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?string $id = null): ?Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $aiprompt = $this->Aiprompts->get($id);
        if ($this->Aiprompts->delete($aiprompt)) {
            $this->Flash->success(__('The aiprompt has been deleted.'));
        } else {
            $this->Flash->error(__('The aiprompt could not be deleted. Please, try again.'));
        }

        return $this->redirect($this->referer());
    }
}


// ----- END FILE: src/Controller/Admin/AipromptsController.php -----

FILE: src/Controller/Admin/ArticlesController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 12172 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\Cache\Cache;
use Cake\Datasource\Exception\RecordNotFoundException;
use Cake\Http\Response;
use Exception;

/**
 * Articles Controller
 *
 * Handles CRUD operations for articles, including pages and blog posts.
 *
 * @property \App\Model\Table\ArticlesTable $Articles
 */
class ArticlesController extends AppController
{
    /**
     * Clears the content cache (used for both articles and tags)
     *
     * @return void
     */
    private function clearContentCache(): void
    {
        Cache::clear('content');
    }

    /**
     * Retrieves a hierarchical list of articles that are marked as pages.
     *
     * @return void
     */
    public function treeIndex(): ?Response
    {
        $statusFilter = $this->request->getQuery('status');
        $conditions = [
            'Articles.kind' => 'page',
        ];

        if ($statusFilter === '1') {
            $conditions['Articles.is_published'] = '1';
        } elseif ($statusFilter === '0') {
            $conditions['Articles.is_published'] = '0';
        }

        if ($this->request->is('ajax')) {
            $search = $this->request->getQuery('search');
            if (!empty($search)) {
                $conditions['OR'] = [
                    'Articles.title LIKE' => '%' . $search . '%',
                    'Articles.slug LIKE' => '%' . $search . '%',
                    'Articles.body LIKE' => '%' . $search . '%',
                    'Articles.meta_title LIKE' => '%' . $search . '%',
                    'Articles.meta_description LIKE' => '%' . $search . '%',
                    'Articles.meta_keywords LIKE' => '%' . $search . '%',
                ];
            }
            $articles = $this->Articles->getTree($conditions, [
                'slug',
                'created',
                'modified',
                'is_published',
            ]);

            $this->set(compact('articles'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('tree_index_search_results');
        }

        $articles = $this->Articles->getTree($conditions, [
            'slug',
            'created',
            'modified',
            'view_count',
            'is_published',
        ]);
        $this->set(compact('articles'));

        return null;
    }

    /**
     * Updates the tree structure of articles.
     *
     * @return \Cake\Http\Response|null The JSON response indicating success or failure.
     * @throws \Exception If an error occurs during the reordering process.
     */
    public function updateTree(): ?Response
    {
        $this->request->allowMethod(['post', 'put']);
        $data = $this->request->getData();

        try {
            $result = $this->Articles->reorder($data);
            $this->clearContentCache();

            return $this->response->withType('application/json')
                ->withStringBody(json_encode(['success' => true, 'result' => $result]));
        } catch (Exception $e) {
            return $this->response->withType('application/json')
                ->withStringBody(json_encode(['success' => false, 'error' => $e->getMessage()]));
        }
    }

    /**
     * Displays a list of articles with search functionality.
     *
     * @return \Cake\Http\Response|null
     */
    public function index(): ?Response
    {
        $statusFilter = $this->request->getQuery('status');

        $query = $this->Articles->find()
            ->select([
                'Articles.id',
                'Articles.user_id',
                'Articles.title',
                'Articles.slug',
                'Articles.image',
                'Articles.dir',
                'Articles.alt_text',
                'Articles.created',
                'Articles.modified',
                'Articles.published',
                'Articles.is_published',
                'Articles.body',
                'Articles.summary',
                'Articles.meta_title',
                'Articles.meta_description',
                'Articles.meta_keywords',
                'Articles.linkedin_description',
                'Articles.facebook_description',
                'Articles.instagram_description',
                'Articles.twitter_description',
                'Articles.word_count',
                'Articles.view_count',
                'Users.id',
                'Users.username',
            ])
            ->leftJoinWith('Users')
            ->leftJoinWith('PageViews')
            ->where(['Articles.kind' => 'article'])
            ->groupBy([
                'Articles.id',
                'Articles.user_id',
                'Articles.title',
                'Articles.slug',
                'Articles.created',
                'Articles.modified',
                'Users.id',
                'Users.username',
            ])
            ->orderBy(['Articles.created' => 'DESC']);

        if ($statusFilter !== null) {
            $query->where(['Articles.is_published' => (int)$statusFilter]);
        }

        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'Articles.title LIKE' => '%' . $search . '%',
                    'Articles.slug LIKE' => '%' . $search . '%',
                    'Articles.body LIKE' => '%' . $search . '%',
                    'Articles.meta_title LIKE' => '%' . $search . '%',
                    'Articles.meta_description LIKE' => '%' . $search . '%',
                    'Articles.meta_keywords LIKE' => '%' . $search . '%',
                ],
            ]);
        }
        $articles = $this->paginate($query);
        if ($this->request->is('ajax')) {
            $this->set(compact('articles', 'search'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }
        $this->set(compact('articles'));

        return null;
    }

    /**
     * Displays details of a specific article.
     *
     * @param string|null $id Article id.
     * @return void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null): void
    {
        $article = $this->Articles->get($id, contain: [
            'Users',
            'PageViews',
            'Tags',
            'Images',
            'Slugs',
            'Comments',
        ]);

        if (!$article) {
            throw new RecordNotFoundException(__('Article not found'));
        }

        $this->set(compact('article'));
    }

    /**
     * Adds a new article.
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add(): ?Response
    {
        $article = $this->Articles->newEmptyEntity();
        if ($this->request->is('post')) {
            $data = $this->request->getData();
            $data['kind'] = $this->request->getQuery('kind', 'article');
            $article = $this->Articles->patchEntity($article, $data);

            // Handle image uploads
            $imageUploads = $this->request->getUploadedFiles('image_uploads');
            if (!empty($imageUploads['image_uploads'])) {
                $article->imageUploads = $imageUploads['image_uploads'];
            }

            if ($this->Articles->save($article)) {
                $this->clearContentCache();
                $this->Flash->success(__('The article has been saved.'));

                // Redirect to treeIndex if is page, otherwise to index
                if ($article->kind == 'page') {
                    return $this->redirect(['action' => 'treeIndex']);
                } else {
                    return $this->redirect(['action' => 'index']);
                }
            }
            $this->Flash->error(__('The article could not be saved. Please, try again.'));
        }

        // Fetch parent articles if 'kind' is page
        $parentArticles = [];
        if ($this->request->getQuery('kind') == 'page') {
            $parentArticles = $this->Articles->find('list')
                ->where(['kind' => 'page'])
                ->all();
        }

        $users = $this->Articles->Users->find('list', limit: 200)->all();
        $tags = $this->Articles->Tags->find('list', limit: 200)->all();
        $token = $this->request->getAttribute('csrfToken');
        $this->set(compact('article', 'users', 'tags', 'token', 'parentArticles'));

        return null;
    }

    /**
     * Edits an existing article.
     *
     * @param string|null $id Article ID.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?string $id = null): ?Response
    {
        $article = $this->Articles->get($id, contain: ['Tags', 'Images']);

        if (!empty($article->body) && empty($article->markdown)) {
            $article->markdown = $article->body;
        }

        if ($this->request->is(['patch', 'post', 'put'])) {
            $data = $this->request->getData();

            $data['kind'] = $this->request->getQuery('kind', 'article');
            $article = $this->Articles->patchEntity($article, $data);

            // Handle image uploads
            $imageUploads = $this->request->getUploadedFiles('image_uploads') ?? [];
            if (!empty($imageUploads['image_uploads'])) {
                $article->imageUploads = $imageUploads['image_uploads'];
            }

            // Handle image unlinking
            $unlinkedImages = $this->request->getData('unlink_images') ?? [];
            $article->unlinkedImages = $unlinkedImages;

            $saveOptions = [];
            if (isset($data['regenerateTags'])) {
                $saveOptions['regenerateTags'] = $data['regenerateTags'];
            }

            if ($this->Articles->save($article, $saveOptions)) {
                $this->clearContentCache();
                $this->Flash->success(__('The article has been saved.'));

                // Redirect to treeIndex if kind is page, otherwise to index
                if ($article->kind == 'page') {
                    return $this->redirect(['action' => 'treeIndex']);
                } else {
                    return $this->redirect(['action' => 'index']);
                }
            }
            $this->Flash->error(__('The article could not be saved. Please, try again.'));
        }

        // Fetch parent articles if 'kind' is page
        $parentArticles = [];
        if ($this->request->getQuery('kind') == 'page') {
            $parentArticles = $this->Articles->find('list')
                ->where([
                    'kind' => 'page',
                    'id !=' => $id,
                    ])
                ->all();
        }

        $users = $this->Articles->Users->find('list', limit: 200)->all();
        $tags = $this->Articles->Tags->find('list', limit: 200)->all();
        $this->set(compact('article', 'users', 'tags', 'parentArticles'));

        return null;
    }

    /**
     * Deletes an article.
     *
     * @param string|null $id Article ID.
     * @return void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?string $id = null): void
    {
        $this->request->allowMethod(['post', 'delete']);
        $article = $this->Articles->get($id);
        if ($this->Articles->delete($article)) {
            $this->clearContentCache();

            $this->Flash->success(__('The article has been deleted.'));
        } else {
            $this->Flash->error(__('The article could not be deleted. Please, try again.'));
        }

        // Check if 'kind' is in the request parameters
        if ($this->request->getData('kind') == 'page') {
            $this->redirect(['action' => 'treeIndex']);
        }

        $action = $this->request->getQuery('kind') == 'page' ? 'tree-index' : 'index';

        $this->redirect(['action' => $action]);
    }
}


// ----- END FILE: src/Controller/Admin/ArticlesController.php -----

FILE: src/Controller/Admin/EmailTemplatesController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 12268 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use App\Model\Entity\User;
use Cake\Http\Response;
use Cake\Log\Log;
use Cake\Mailer\Mailer;
use Cake\ORM\TableRegistry;
use Cake\Routing\Router;
use Cake\Utility\Text;
use Exception;

/**
 * EmailTemplates Controller
 *
 * Manages email templates and sending emails based on these templates.
 *
 * @property \App\Model\Table\EmailTemplatesTable $EmailTemplates
 */
class EmailTemplatesController extends AppController
{
    /**
     * Displays a paginated list of email templates.
     *
     * @return void
     */
    public function index(): ?Response
    {
        $query = $this->EmailTemplates->find()
            ->select([
                'EmailTemplates.id',
                'EmailTemplates.template_identifier',
                'EmailTemplates.name',
                'EmailTemplates.subject',
                'EmailTemplates.body_html',
                'EmailTemplates.body_plain',
                'EmailTemplates.created',
                'EmailTemplates.modified',
            ]);

        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'EmailTemplates.template_identifier LIKE' => '%' . $search . '%',
                    'EmailTemplates.name LIKE' => '%' . $search . '%',
                    'EmailTemplates.subject LIKE' => '%' . $search . '%',
                    'EmailTemplates.body_html LIKE' => '%' . $search . '%',
                    'EmailTemplates.body_plain LIKE' => '%' . $search . '%',
                ],
            ]);
        }
        $emailTemplates = $this->paginate($query);
        if ($this->request->is('ajax')) {
            $this->set(compact('emailTemplates', 'search'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }
        $this->set(compact('emailTemplates'));

        return null;
    }

    /**
     * Displays details of a specific email template.
     *
     * @param string|null $id Email Template id.
     * @return void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null): void
    {
        $emailTemplate = $this->EmailTemplates->get($id, contain: []);
        $this->set(compact('emailTemplate'));
    }

    /**
     * Adds a new email template.
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add(): ?Response
    {
        $emailTemplate = $this->EmailTemplates->newEmptyEntity();
        if ($this->request->is('post')) {
            $data = $this->request->getData();
            $data['body_plain'] = $this->htmlToPlainText($data['body_html']);

            $emailTemplate = $this->EmailTemplates->patchEntity($emailTemplate, $data);
            if ($this->EmailTemplates->save($emailTemplate)) {
                $this->Flash->success(__('The email template has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The email template could not be saved. Please, try again.'));
        }
        $this->set(compact('emailTemplate'));

        return null;
    }

    /**
     * Edits an existing email template.
     *
     * @param string|null $id Email Template id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?string $id = null): ?Response
    {
        $emailTemplate = $this->EmailTemplates->get($id, contain: []);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $data = $this->request->getData();
            $data['body_plain'] = $this->htmlToPlainText($data['body_html']);

            $emailTemplate = $this->EmailTemplates->patchEntity($emailTemplate, $data);
            if ($this->EmailTemplates->save($emailTemplate)) {
                $this->Flash->success(__('The email template has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The email template could not be saved. Please, try again.'));
        }
        $this->set(compact('emailTemplate'));

        return null;
    }

    /**
     * Converts HTML content to plain text.
     *
     * @param string $html The HTML content to be converted.
     * @return string The plain text representation of the HTML content.
     */
    private function htmlToPlainText(string $html): string
    {
        $text = strip_tags($html);
        $text = html_entity_decode($text);

        return trim($text);
    }

    /**
     * Deletes an email template.
     *
     * @param string|null $id Email Template id.
     * @return \Cake\Http\Response Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?string $id = null): Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $emailTemplate = $this->EmailTemplates->get($id);
        if ($this->EmailTemplates->delete($emailTemplate)) {
            $this->Flash->success(__('The email template has been deleted.'));
        } else {
            $this->Flash->error(__('The email template could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    /**
     * Sends an email to a user based on a selected email template.
     *
     * @return \Cake\Http\Response|null Redirects after attempting to send the email, or renders view.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When email template or user not found.
     * @throws \Exception If there's an error during the email sending process.
     */
    public function sendEmail(): ?Response
    {
        $emailTemplates = $this->EmailTemplates->find(
            'list',
            keyField: 'id',
            valueField: 'name',
        );

        $usersTable = TableRegistry::getTableLocator()->get('Users');
        $users = $usersTable->find(
            'list',
            keyField: 'id',
            valueField: 'email',
        );

        if ($this->request->is('post')) {
            $data = $this->request->getData();

            $variables = $this->prepareEmailVariables($data['email_template_id'], $data['user_id']);
            $emailTemplate = $this->EmailTemplates->get($data['email_template_id']);
            $user = $usersTable->get($data['user_id']);

            $bodyHtml = $emailTemplate->body_html ?? '';
            $bodyPlain = $emailTemplate->body_plain ?? '';

            // Replace all placeholders
            foreach ($variables as $key => $value) {
                $bodyHtml = str_replace('{' . $key . '}', $value, $bodyHtml);
                $bodyPlain = str_replace('{' . $key . '}', $value, $bodyPlain);
            }

            $mailer = new Mailer('default');
            $mailer->setTo($user->email)
                ->setSubject($emailTemplate->subject)
                ->setEmailFormat('both')
                ->setViewVars([
                    'bodyHtml' => $bodyHtml,
                    'bodyPlain' => $bodyPlain,
                ])
                ->viewBuilder()
                    ->setTemplate('default')
                    ->setLayout('default')
                    ->setPlugin('AdminTheme');

            try {
                $result = $mailer->deliver();
                if ($result) {
                    $this->Flash->success(__('Email sent successfully.'));
                    Log::info(
                        __(
                            'Email sent successfully to: {0}. Template: {1}, Subject: {2}',
                            $user->email,
                            $emailTemplate->template_identifier,
                            $emailTemplate->subject,
                        ),
                        ['group_name' => 'email'],
                    );
                } else {
                    $this->Flash->error(__('Failed to send email. Please check your email configuration.'));
                    Log::error(
                        __('Failed to send email to: {0}', $user->email),
                        ['group_name' => 'email'],
                    );
                }
            } catch (Exception $e) {
                $this->Flash->error(__('Error sending email: {0}', $e->getMessage()));
                Log::error(
                    __('Error sending email: {0}', $e->getMessage()),
                    ['group_name' => 'email', 'exception' => $e],
                );
            }

            return $this->redirect(['action' => 'index']);
        }

        $this->set(compact('emailTemplates', 'users'));

        return null;
    }

    /**
     * Prepares variables for email templates.
     *
     * This method generates a set of variables to be used in email templates.
     * It always includes basic user information and conditionally adds other
     * variables based on the content of the email template.
     *
     * @param string $templateId The UUID of the email template.
     * @param string $userId The ID of the user for whom the email is being prepared.
     * @return array An associative array of variables for use in the email template.
     */
    private function prepareEmailVariables(string $templateId, string $userId): array
    {
        $variables = [];
        $emailTemplate = $this->EmailTemplates->get($templateId, contain: []);
        $user = TableRegistry::getTableLocator()->get('Users')->get($userId, contain: []);

        $variables['username'] = $user->username;
        $variables['email'] = $user->email;

        if (
            strpos($emailTemplate->body_html, '{confirm_email_link}') !== false ||
            strpos($emailTemplate->body_plain, '{confirm_email_link}') !== false
        ) {
            $variables['confirm_email_link'] = $this->generateLink($user, 'confirm_email_link');
        }

        if (
            strpos($emailTemplate->body_html, '{reset_password_link}') !== false ||
            strpos($emailTemplate->body_plain, '{reset_password_link}') !== false
        ) {
            $variables['reset_password_link'] = $this->generateLink($user, 'reset_password_link');
        }

        return $variables;
    }

    /**
     * Generates a confirmation link for a user.
     *
     * This method retrieves the confirmation code for a given user from the
     * UserAccountConfirmations table. If a confirmation code does not exist,
     * it generates a new UUID as the confirmation code, saves it to the table,
     * and then generates a URL for the user to confirm their account.
     *
     * @param \App\Model\Entity\User $user The user entity for whom the confirmation link is generated.
     * @return string The generated confirmation link URL.
     */
    private function generateLink(User $user, string $emailTemplateId): string
    {
        $userAccountConfirmationsTable = TableRegistry::getTableLocator()->get('UserAccountConfirmations');
        $confirmation = $userAccountConfirmationsTable->find()
            ->where(['user_id' => $user->id])
            ->first();

        if ($confirmation) {
            $confirmationCode = $confirmation->confirmation_code;
        } else {
            $confirmationCode = Text::uuid();
            $newConfirmation = $userAccountConfirmationsTable->newEntity([
                'user_id' => $user->id,
                'confirmation_code' => $confirmationCode,
            ]);
            $userAccountConfirmationsTable->save($newConfirmation);
        }

        switch ($emailTemplateId) {
            case 'reset_password_link':
                return Router::url([
                    '_name' => 'reset-password',
                    $confirmationCode,
                ], true);

            case 'confirm_email_link':
                return Router::url([
                    '_name' => 'confirm-email',
                    $confirmationCode,
                ], true);
        }

        return false;
    }
}


// ----- END FILE: src/Controller/Admin/EmailTemplatesController.php -----

FILE: src/Controller/Admin/ImageGalleriesController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 17543 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use App\Controller\Component\MediaPickerTrait;
use App\Service\ImageProcessingService;
use App\Utility\ArchiveExtractor;
use Cake\Http\Response;

/**
 * ImageGalleries Controller
 *
 * @property \App\Model\Table\ImageGalleriesTable $ImageGalleries
 */
class ImageGalleriesController extends AppController
{
    use MediaPickerTrait;

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index(): ?Response
    {
        $session = $this->request->getSession();
        $viewType = $this->request->getQuery('view');

        // Handle view switching with session persistence
        if ($viewType) {
            $session->write('ImageGalleries.viewType', $viewType);
        } else {
            $viewType = $session->read('ImageGalleries.viewType', 'grid'); // Default to grid for galleries
        }

        $query = $this->ImageGalleries->find()
            ->select([
                'ImageGalleries.id',
                'ImageGalleries.name',
                'ImageGalleries.slug',
                'ImageGalleries.description',
                'ImageGalleries.preview_image',
                'ImageGalleries.is_published',
                'ImageGalleries.created',
                'ImageGalleries.modified',
                'ImageGalleries.created_by',
                'ImageGalleries.modified_by',
            ]);

        // Load images for both views - grid needs all for slideshow, list needs thumbnails
        $query->contain([
            'Images' => function ($q) {
                return $q->orderBy(['ImageGalleriesImages.position' => 'ASC']);
                // Load all images so slideshow shows complete gallery in grid view
                // and list view has images for thumbnails and popovers
            },
        ]);

        // Handle status filter
        $statusFilter = $this->request->getQuery('status');
        if ($statusFilter !== null) {
            $query->where(['ImageGalleries.is_published' => (bool)$statusFilter]);
        }

        // Handle search
        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'ImageGalleries.name LIKE' => '%' . $search . '%',
                    'ImageGalleries.slug LIKE' => '%' . $search . '%',
                    'ImageGalleries.description LIKE' => '%' . $search . '%',
                ],
            ]);
        }

        $imageGalleries = $this->paginate($query);

        // Handle AJAX requests
        if ($this->request->is('ajax')) {
            $this->set(compact('imageGalleries', 'viewType', 'search', 'statusFilter'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }

        $this->set(compact('imageGalleries', 'viewType'));

        // Return appropriate template based on view type
        return $this->render($viewType === 'grid' ? 'index_grid' : 'index');
    }

    /**
     * View method
     *
     * @param string|null $id Image Gallery id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view(?string $id = null): ?Response
    {
        $imageGallery = $this->ImageGalleries->get($id, contain: [
            'Images' => [
                'sort' => ['ImageGalleriesImages.position' => 'ASC'],
            ],
            'Slugs',
        ]);
        $this->set(compact('imageGallery'));

        return null;
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add(): ?Response
    {
        $imageGallery = $this->ImageGalleries->newEmptyEntity();
        if ($this->request->is('post')) {
            $imageGallery = $this->ImageGalleries->patchEntity($imageGallery, $this->request->getData());
            if ($this->ImageGalleries->save($imageGallery)) {
                // Handle file uploads if provided
                $uploadedFiles = $this->request->getUploadedFiles();
                $this->_processUploadsAndSetFlash($uploadedFiles, $imageGallery->id, 'saved');

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The image gallery could not be saved. Please, try again.'));
        }
        $images = $this->ImageGalleries->Images->find('list', limit: 200)->all();
        $this->set(compact('imageGallery', 'images'));

        return null;
    }

    /**
     * Edit method
     *
     * @param string|null $id Image Gallery id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit(?string $id = null): ?Response
    {
        $imageGallery = $this->ImageGalleries->get($id, contain: ['Images']);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $imageGallery = $this->ImageGalleries->patchEntity($imageGallery, $this->request->getData());

            // Handle file uploads if provided
            $uploadedFiles = $this->request->getUploadedFiles();
            if (!empty($uploadedFiles['image_files'])) {
                $this->_processUploadsAndSetFlash($uploadedFiles, $imageGallery->id, 'updated');
            }

            if ($this->ImageGalleries->save($imageGallery)) {
                if (empty($uploadedFiles['image_files'])) {
                    $this->Flash->success(__('The image gallery has been saved.'));
                }

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The image gallery could not be saved. Please, try again.'));
        }
        $images = $this->ImageGalleries->Images->find('list', limit: 200)->all();
        $this->set(compact('imageGallery', 'images'));

        return null;
    }

    /**
     * Delete method
     *
     * @param string|null $id Image Gallery id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?string $id = null): ?Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $imageGallery = $this->ImageGalleries->get($id);
        if ($this->ImageGalleries->delete($imageGallery)) {
            $this->Flash->success(__('The image gallery has been deleted.'));
        } else {
            $this->Flash->error(__('The image gallery could not be deleted. Please, try again.'));
        }

        return $this->redirect($this->referer(['action' => 'index']));
    }

    /**
     * Manage images in a gallery - drag and drop interface
     *
     * @param string|null $id Gallery id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function manageImages(?string $id = null): ?Response
    {
        $imageGallery = $this->ImageGalleries->get($id, contain: [
            'ImageGalleriesImages' => [
                'finder' => 'ordered',
                'Images' => [
                    'conditions' => [
                        'Images.image IS NOT' => null,
                        'Images.image !=' => '',
                    ],
                ],
            ],
        ]);

        $this->set(compact('imageGallery'));

        return null;
    }

    /**
     * Add images to a gallery (AJAX endpoint)
     *
     * @param string|null $id Gallery id.
     * @return \Cake\Http\Response JSON response
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function addImages(?string $id = null): Response
    {
        $this->request->allowMethod(['post']);

        $imageIds = $this->request->getData('image_ids', []);

        if (empty($imageIds)) {
            // For AJAX requests, return JSON
            if ($this->request->is('ajax')) {
                $response = [
                    'success' => false,
                    'message' => __('No images selected'),
                ];

                return $this->getResponse()
                    ->withType('application/json')
                    ->withStatus(400)
                    ->withStringBody(json_encode($response));
            }

            // For regular requests, redirect with flash message
            $this->Flash->error(__('No images selected'));

            return $this->redirect(['action' => 'manageImages', $id]);
        }

        $galleriesImagesTable = $this->fetchTable('ImageGalleriesImages');

        $added = 0;
        foreach ($imageIds as $imageId) {
            // Check if image is already in gallery
            $exists = $galleriesImagesTable->exists([
                'image_gallery_id' => $id,
                'image_id' => $imageId,
            ]);

            if (!$exists) {
                $position = $galleriesImagesTable->getNextPosition($id);
                $galleryImage = $galleriesImagesTable->newEntity([
                    'image_gallery_id' => $id,
                    'image_id' => $imageId,
                    'position' => $position,
                ]);

                if ($galleriesImagesTable->save($galleryImage)) {
                    $added++;
                }
            }
        }

        // For AJAX requests, return JSON
        if ($this->request->is('ajax')) {
            $response = [
                'success' => true,
                'message' => __('Added {0} images to gallery', $added),
                'added_count' => $added,
            ];

            return $this->getResponse()
                ->withType('application/json')
                ->withStringBody(json_encode($response));
        }

        // For regular requests, redirect with flash message
        if ($added > 0) {
            $this->Flash->success(__('Added {0} images to gallery', $added));
        } else {
            $this->Flash->warning(__('No new images were added (they may already be in the gallery)'));
        }

        return $this->redirect(['action' => 'manageImages', $id]);
    }

    /**
     * Remove image from gallery (AJAX endpoint)
     *
     * @param string|null $id Gallery id.
     * @param string|null $imageId Image id.
     * @return \Cake\Http\Response JSON response
     */
    public function removeImage(?string $id = null, ?string $imageId = null): Response
    {
        $this->request->allowMethod(['delete']);

        $galleriesImagesTable = $this->fetchTable('ImageGalleriesImages');

        $galleryImage = $galleriesImagesTable->find()
            ->where([
                'image_gallery_id' => $id,
                'image_id' => $imageId,
            ])
            ->first();

        if (!$galleryImage) {
            $response = [
                'success' => false,
                'message' => __('Image not found in gallery'),
            ];

            return $this->getResponse()
                ->withType('application/json')
                ->withStatus(404)
                ->withStringBody(json_encode($response));
        }

        if ($galleriesImagesTable->delete($galleryImage)) {
            $response = [
                'success' => true,
                'message' => __('Image removed from gallery'),
            ];
        } else {
            $response = [
                'success' => false,
                'message' => __('Failed to remove image from gallery'),
            ];
        }

        return $this->getResponse()
            ->withType('application/json')
            ->withStringBody(json_encode($response));
    }

    /**
     * Update image order in gallery (AJAX endpoint)
     *
     * @return \Cake\Http\Response JSON response
     */
    public function updateImageOrder(): Response
    {
        $this->request->allowMethod(['post']);

        $galleryId = $this->request->getData('gallery_id');
        $imageIds = $this->request->getData('image_ids', []);

        if (empty($galleryId) || empty($imageIds)) {
            $response = [
                'success' => false,
                'message' => __('Invalid data provided'),
            ];

            return $this->getResponse()
                ->withType('application/json')
                ->withStatus(400)
                ->withStringBody(json_encode($response));
        }

        $galleriesImagesTable = $this->fetchTable('ImageGalleriesImages');

        if ($galleriesImagesTable->reorderImages($galleryId, $imageIds)) {
            $response = [
                'success' => true,
                'message' => __('Image order updated'),
            ];
        } else {
            $response = [
                'success' => false,
                'message' => __('Failed to update image order'),
            ];
        }

        return $this->getResponse()
            ->withType('application/json')
            ->withStringBody(json_encode($response));
    }

    /**
     * Gallery picker for selecting galleries to insert into content
     * Uses MediaPickerTrait for DRY implementation
     *
     * @return \\Cake\\Http\\Response|null|void Renders view
     */
    public function picker(): ?Response
    {
        // Build query with trait helper
        $selectFields = [
            'ImageGalleries.id',
            'ImageGalleries.name',
            'ImageGalleries.slug',
            'ImageGalleries.description',
            'ImageGalleries.preview_image',
            'ImageGalleries.is_published',
            'ImageGalleries.created',
            'ImageGalleries.modified',
        ];

        $query = $this->buildPickerQuery($this->ImageGalleries, $selectFields, [
            'contain' => [
                'Images' => function ($q) {
                    return $q->select(['Images.id', 'Images.name', 'Images.image', 'Images.dir', 'Images.alt_text'])
                             ->limit(4) // Show first 4 images for preview
                             ->orderBy(['ImageGalleriesImages.position' => 'ASC']);
                },
            ],
        ]);

        // Handle search with trait helper
        $search = $this->request->getQuery('search');
        $searchFields = [
            'ImageGalleries.name',
            'ImageGalleries.slug',
            'ImageGalleries.description',
        ];
        $query = $this->handlePickerSearch($query, $search, $searchFields);

        // Setup pagination with trait helper
        $limit = $this->getRequestLimit(8, 24);
        $page = $this->getRequestPage();

        $galleries = $this->paginate($query, [
            'limit' => $limit,
            'page' => $page,
        ]);

        // Set variables for template (template expects $results)
        $results = $galleries;
        $this->set(compact('results', 'search'));
        $this->set('_serialize', ['results', 'search']);

        // Check if this is a search request that should only return results HTML
        $galleryOnly = $this->request->getQuery('gallery_only');
        if ($galleryOnly) {
            // For search requests, only return the results portion to avoid flicker
            $this->viewBuilder()->setTemplate('picker_results');
        } else {
            // For initial load, return the full template with search form
            $this->viewBuilder()->setTemplate('picker');
        }

        // Use AJAX view for modal content
        $this->viewBuilder()->setLayout('ajax');

        return null;
    }

    /**
     * Process uploaded files and set appropriate flash messages
     *
     * @param array $uploadedFiles Array of uploaded files
     * @param string $galleryId Gallery ID to associate files with
     * @param string $action Action being performed (saved|updated)
     * @return void
     */
    private function _processUploadsAndSetFlash(array $uploadedFiles, string $galleryId, string $action): void
    {
        if (empty($uploadedFiles['image_files'])) {
            $this->Flash->success(__('The image gallery has been {0}.', $action));

            return;
        }

        $uploadService = new ImageProcessingService(
            $this->fetchTable('Images'),
            $this->fetchTable('ImageGalleriesImages'),
            new ArchiveExtractor(),
        );

        $result = $uploadService->processUploadedFiles($uploadedFiles['image_files'], $galleryId);

        // Set flash message based on results
        if ($result['success_count'] > 0 && $result['error_count'] === 0) {
            $this->Flash->success(__(
                'Gallery {0} with {1} image(s) uploaded successfully.',
                $action,
                $result['success_count'],
            ));
        } elseif ($result['success_count'] > 0 && $result['error_count'] > 0) {
            $this->Flash->success(__(
                'Gallery {0} with {1} image(s) uploaded. {2} failed to upload.',
                $action,
                $result['success_count'],
                $result['error_count'],
            ));
        } elseif ($result['error_count'] > 0) {
            $this->Flash->warning(__(
                'Gallery {0}, but all {1} image(s) failed to upload.',
                $action,
                $result['error_count'],
            ));
        }
    }
}


// ----- END FILE: src/Controller/Admin/ImageGalleriesController.php -----

FILE: src/Controller/Admin/VideosController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3519 bytes
CONTENT:
<?php
// src/Controller/Admin/VideosController.php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use App\Controller\Component\MediaPickerTrait;
use App\Utility\SettingsManager;
use Exception;
use Google_Client;
use Google_Service_YouTube;

class VideosController extends AppController
{
    use MediaPickerTrait;

    /**
     * Video selection interface with YouTube API integration
     *
     * @return void
     */
    public function videoSelect(): void
    {
        $this->viewBuilder()->setLayout('ajax');

        $searchTerm = $this->request->getQuery('search');
        $filterByChannel = filter_var($this->request->getQuery('channel_filter'), FILTER_VALIDATE_BOOLEAN);
        $videos = [];

        // If no explicit channel_filter parameter is provided, default to true (show channel videos)
        $channelId = SettingsManager::read('Google.youtubeChannelId', env('YOUTUBE_CHANNEL_ID'));
        if ($this->request->getQuery('channel_filter') === null && $channelId && $channelId !== 'your-api-key-here') {
            $filterByChannel = true;
        }

        if ($searchTerm || $filterByChannel) {
            $client = new Google_Client();
            $apiKey = SettingsManager::read('Google.youtubeApiKey', env('YOUTUBE_API_KEY'));
            $client->setDeveloperKey($apiKey);

            $youtube = new Google_Service_YouTube($client);

            try {
                $searchParams = [
                    'maxResults' => 12,
                    'type' => 'video',
                    'order' => 'date',
                ];

                // Only add search term if it exists
                if ($searchTerm) {
                    $searchParams['q'] = $searchTerm;
                }

                // Always check for channel filter regardless of search term
                if ($filterByChannel) {
                    $channelId = SettingsManager::read('Google.youtubeChannelId', env('YOUTUBE_CHANNEL_ID'));
                    if ($channelId) {
                        $searchParams['channelId'] = $channelId;
                    }
                }

                $searchResponse = $youtube->search->listSearch('snippet', $searchParams);

                foreach ($searchResponse['items'] as $searchResult) {
                    $videos[] = [
                        'id' => $searchResult['id']['videoId'],
                        'title' => $searchResult['snippet']['title'],
                        'thumbnail' => $searchResult['snippet']['thumbnails']['medium']['url'],
                        'description' => $searchResult['snippet']['description'],
                    ];
                }
            } catch (Exception $e) {
                $this->Flash->error(__('Error fetching videos: {0}', $e->getMessage()));
            }
        }

        $channelId = SettingsManager::read('Google.youtubeChannelId', env('YOUTUBE_CHANNEL_ID'));
        $this->set(compact('videos', 'searchTerm', 'filterByChannel', 'channelId'));

        // Check if this is a search request that should only return results HTML
        $galleryOnly = $this->request->getQuery('gallery_only');
        if ($galleryOnly) {
            // For search requests, only return the results portion to avoid flicker
            $this->viewBuilder()->setTemplate('video_select_results');
        } else {
            // For initial load, return the full template with search form
            $this->viewBuilder()->setTemplate('video_select');
        }
    }
}


// ----- END FILE: src/Controller/Admin/VideosController.php -----

FILE: src/Controller/Admin/SettingsController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4325 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use App\Utility\SettingsManager;
use Cake\Http\Response;

/**
 * Settings Controller
 *
 * This controller handles the management of application settings.
 * It provides functionality to view and save settings, which are organized
 * by category and key name.
 *
 * @property \App\Model\Table\SettingsTable $Settings The settings table instance.
 */
class SettingsController extends AppController
{
    /**
     * Index method
     *
     * Retrieves all settings from the database, orders them by category
     * and key name, and groups them into an array structure.
     * The grouped settings are then passed to the view for rendering.
     *
     * @return \Cake\Http\Response|null Returns null, allowing the view to be rendered
     */
    public function index(): ?Response
    {
        $articlesTable = $this->fetchTable('Articles');
        $sitePages = $articlesTable->find('treeList')
            ->where(['kind' => 'page'])
            ->toArray();

        $noneItem = ['None' => 'None'];
        $sitePages = $noneItem + $sitePages;

        $settings = $this->Settings->find('all')
            ->orderBy(['category' => 'ASC', 'ordering' => 'ASC'])
            ->toArray();

        $groupedSettings = [];
        foreach ($settings as $setting) {
            $groupedSettings[$setting->category][$setting->key_name] = [
                'value' => $setting->value,
                'value_type' => $setting->value_type,
                'value_obscure' => $setting->value_obscure,
                'data' => $setting->data,
                'description' => $setting->description,
                'column_width' => $setting->column_width,
            ];
        }

        $this->set(compact('groupedSettings', 'sitePages'));

        return null;
    }

    /**
     * Save Settings method
     *
     * Processes the incoming request to update settings. It iterates over
     * the submitted data, finds the corresponding setting in the database, and updates
     * its value. If all updates are successful, a success message is displayed and the
     * cache is cleared. Otherwise, an error message is shown with details of the failed updates.
     *
     * @return \Cake\Http\Response|null Redirects to the index action after processing
     */
    public function saveSettings(): ?Response
    {
        if ($this->request->is(['patch', 'post', 'put'])) {
            $data = $this->request->getData();
            $success = true;
            $errorMessages = [];

            foreach ($data as $category => $settings) {
                foreach ($settings as $key => $value) {
                    $setting = $this->Settings->find()
                        ->where([
                            'category' => $category,
                            'key_name' => $key,
                        ])
                        ->first();

                    if ($setting) {
                        $setting = $this->Settings->patchEntity($setting, ['value' => $value]);
                    } else {
                        $errorMessages[] = __('Setting not found: {0}.{1}', $category, $key);
                        $success = false;
                        continue;
                    }

                    if (!$this->Settings->save($setting)) {
                        $success = false;
                        $errors = $setting->getErrors();
                        foreach ($errors as $fieldErrors) {
                            foreach ($fieldErrors as $error) {
                                $errorMessages[] = __('Error saving {0}.{1}: {2}', $category, $key, $error);
                            }
                        }
                    }
                }
            }

            if ($success) {
                $this->Flash->success(__('The settings have been saved.'));
                // Clear the cache if saved successfully
                SettingsManager::clearCache();
            } else {
                $this->Flash->error(__('Some settings could not be saved. Please, try again.'), [
                    'params' => ['errors' => $errorMessages],
                ]);
            }

            return $this->redirect(['action' => 'index']);
        }

        return null;
    }
}


// ----- END FILE: src/Controller/Admin/SettingsController.php -----

FILE: src/Controller/Admin/CacheController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4210 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use App\Utility\SettingsManager;
use Cake\Cache\Cache;
use Cake\Http\Response;
use DateTime;

/**
 * CacheController
 *
 * Handles cache clearing operations for the application.
 */
class CacheController extends AppController
{
    /**
     * Clears all cache configurations and updates the last cleared time.
     *
     * @return \Cake\Http\Response|null Redirects to the clearAll action or renders the view.
     */
    public function clearAll(): ?Response
    {
        $cacheInfo = $this->getCacheInfo();

        if ($this->request->is('post')) {
            $clearedCaches = [];
            $failedCaches = [];

            foreach ($cacheInfo as $config => $info) {
                if (Cache::clear($config)) {
                    $clearedCaches[] = $config;
                    $this->updateLastClearedTime($config);
                } else {
                    $failedCaches[] = $config;
                }
            }

            SettingsManager::clearCache();
            $clearedCaches[] = 'SettingsManager';

            if (empty($failedCaches)) {
                $this->Flash->success(__('All caches have been cleared successfully.'));
            } else {
                $this->Flash->warning(__(
                    'Some caches were cleared, but the following failed: {0}',
                    implode(', ', $failedCaches),
                ));
            }

            return $this->redirect(['action' => 'clearAll']);
        }

        $this->set('cacheInfo', $cacheInfo);

        return null;
    }

    /**
     * Clears a specific cache configuration and updates the last cleared time.
     *
     * @param string $cacheName The name of the cache configuration to clear.
     * @return \Cake\Http\Response Redirects to the clearAll action.
     */
    public function clear(string $cacheName): Response
    {
        $decodedCacheName = urldecode($cacheName);

        if ($this->request->is('post')) {
            if (Cache::getConfig($decodedCacheName)) {
                if (Cache::clear($decodedCacheName)) {
                    $this->updateLastClearedTime($decodedCacheName);
                    $this->Flash->success(__('{0} cache has been cleared successfully.', ucfirst($decodedCacheName)));
                } else {
                    $this->Flash->error(__('{0} cache could not be cleared.', ucfirst($decodedCacheName)));
                }
            } else {
                $this->Flash->error(__('{0} cache configuration does not exist.', ucfirst($decodedCacheName)));
            }
        }

        return $this->redirect(['action' => 'clearAll']);
    }

    /**
     * Retrieves information about all configured cache engines.
     *
     * @return array An array containing cache configuration details.
     */
    private function getCacheInfo(): array
    {
        $cacheInfo = [];
        $configuredCaches = Cache::configured();

        foreach ($configuredCaches as $config) {
            $engineConfig = Cache::getConfig($config);
            unset($engineConfig['password']);

            $cacheInfo[$config] = [
                'engine' => $engineConfig['className'],
                'settings' => $engineConfig,
                'last_cleared' => $this->getLastClearedTime($config),
            ];
        }

        return $cacheInfo;
    }

    /**
     * Gets the last cleared time for a specific cache configuration.
     *
     * @param string $config The cache configuration name.
     * @return \DateTime|null The last cleared time or null if not available.
     */
    private function getLastClearedTime(string $config): ?DateTime
    {
        $time = Cache::read('last_cleared_' . $config, 'default');

        return $time ? new DateTime($time) : null;
    }

    /**
     * Updates the last cleared time for a specific cache configuration.
     *
     * @param string $config The cache configuration name.
     * @return void
     */
    private function updateLastClearedTime(string $config): void
    {
        $time = new DateTime();
        Cache::write('last_cleared_' . $config, $time->format('Y-m-d H:i:s'), 'default');
    }
}


// ----- END FILE: src/Controller/Admin/CacheController.php -----

FILE: src/Controller/Admin/SlugsController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 13053 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use Cake\Http\Response;
use Exception;

/**
 * Slugs Controller
 *
 * Handles administration of URL slugs across the application.
 * Provides CRUD operations for managing slugs and their relationships
 * with various content types (Articles, etc.).
 *
 * @property \App\Model\Table\SlugsTable $Slugs
 * @method \App\Model\Entity\Slug[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class SlugsController extends AppController
{
    /**
     * Index method
     *
     * Lists all slugs with filtering and search capabilities.
     * Handles both regular and AJAX requests, displaying related content information
     * for each slug.
     *
     * Features:
     * - Search filtering by slug text
     * - Status filtering by model type
     * - Efficient fetching of related content to avoid N+1 query issues
     * - AJAX support for dynamic updates
     *
     * @return \Cake\Http\Response|null Returns Response for AJAX requests, null otherwise
     */
    public function index(): ?Response
    {
        $statusFilter = $this->request->getQuery('status'); // This is now 'model' filter
        $search = $this->request->getQuery('search');

        // Get all unique model types from the slugs table
        $modelTypes = $this->Slugs->find()
            ->select(['model'])
            ->distinct('model')
            ->orderBy(['model' => 'ASC'])
            ->all()
            ->map(fn($row) => ucfirst($row->model))
            ->toArray();

        $query = $this->Slugs->find()
            ->select([
                'Slugs.id',
                'Slugs.model',
                'Slugs.foreign_key',
                'Slugs.slug',
                'Slugs.created',
            ])
            ->orderBy(['Slugs.created' => 'DESC']);

        if (!empty($statusFilter)) {
            $query->where(['Slugs.model' => $statusFilter]);
        }

        if (!empty($search)) {
            $query->where([
                'OR' => [
                    'Slugs.slug LIKE' => '%' . $search . '%',
                ],
            ]);
        }

        // Paginate the slugs. $slugs will be a ResultSet (or similar traversable object).
        // This is crucial for PaginatorComponent to attach pagination metadata.
        $slugs = $this->paginate($query);

        // Optimize fetching related records to avoid N+1 queries
        $groupedSlugs = [];
        // Iterate directly over the ResultSet returned by paginate()
        foreach ($slugs as $slug) {
            $groupedSlugs[$slug->model][] = $slug;
        }

        $relatedData = [];
        foreach ($groupedSlugs as $modelName => $modelSlugs) {
            $foreignKeys = array_column($modelSlugs, 'foreign_key');

            // Skip if no foreign keys for this model (e.g., if pagination resulted in no slugs for a model)
            if (empty($foreignKeys)) {
                continue;
            }

            try {
                $relatedTable = $this->fetchTable($modelName);

                // Define select fields based on the model type
                $selectFields = ['id', 'title'];
                if ($modelName === 'Articles') {
                    $selectFields[] = 'kind';
                    $selectFields[] = 'is_published';
                }

                $relatedRecords = $relatedTable->find()
                    ->select($selectFields)
                    ->where(['id IN' => $foreignKeys])
                    ->all()
                    ->indexBy('id') // Index by ID for easy lookup
                    ->toArray();

                foreach ($modelSlugs as $slug) {
                    if (isset($relatedRecords[$slug->foreign_key])) {
                        $relatedRecord = $relatedRecords[$slug->foreign_key];
                        $relatedData[$slug->id] = [
                            'title' => $relatedRecord->title,
                            'controller' => $modelName, // 'Articles', 'Tags', etc.
                            'id' => $relatedRecord->id,
                        ];

                        // Add specific fields for Articles
                        if ($modelName === 'Articles') {
                            $relatedData[$slug->id]['kind'] = $relatedRecord->kind;
                            $relatedData[$slug->id]['is_published'] = $relatedRecord->is_published;
                        }
                    } else {
                        // Handle cases where the related record might have been deleted
                        $this->log(sprintf(
                            'Related record for slug %s (model: %s, foreign_key: %s) not found.',
                            $slug->id,
                            $modelName,
                            $slug->foreign_key,
                        ), 'warning');
                        $relatedData[$slug->id] = [
                            'title' => __('(Deleted)'),
                            'controller' => $modelName,
                            'id' => null, // Indicate that the record is missing
                        ];
                    }
                }
            } catch (Exception $e) {
                $this->log(sprintf(
                    'Failed to fetch related records for model %s: %s',
                    $modelName,
                    $e->getMessage(),
                ), 'error');
                // For all slugs associated with this problematic model, mark them as unretrievable
                foreach ($modelSlugs as $slug) {
                    $relatedData[$slug->id] = [
                        'title' => __('(Error loading)'),
                        'controller' => $modelName,
                        'id' => null,
                    ];
                }
            }
        }

        if ($this->request->is('ajax')) {
            // Pass the original $slugs (ResultSet) to the view
            $this->set(compact('slugs', 'search', 'relatedData', 'modelTypes', 'statusFilter'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }

        // Pass the original $slugs (ResultSet) to the view
        $this->set(compact('slugs', 'relatedData', 'modelTypes', 'statusFilter'));

        return null;
    }

    /**
     * View method
     *
     * Displays detailed information about a specific slug and its associated content.
     * Dynamically loads the related record based on the slug's model type.
     *
     * @param string|null $id The UUID of the slug to view
     * @return void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When slug not found
     */
    public function view(?string $id = null): void
    {
        $slug = $this->Slugs->get($id);

        // Get the related record if possible
        $relatedRecord = null;
        if ($slug->model && $slug->foreign_key) {
            try {
                $relatedTable = $this->fetchTable($slug->model);

                // Build the query based on the model type
                $query = $relatedTable->find()
                    ->where(['id' => $slug->foreign_key]);

                // Add specific fields for Articles
                if ($slug->model === 'Articles') {
                    $query->select(['id', 'title', 'kind', 'slug', 'is_published']);
                } else {
                    $query->select(['id', 'title', 'slug']);
                }

                $relatedRecord = $query->first();

                if (!$relatedRecord) {
                    $this->Flash->warning(__(
                        'The related {0} record (ID: {1}) could not be found.',
                        $slug->model,
                        $slug->foreign_key,
                    ));
                    $this->log(sprintf(
                        'Related record not found for slug %s (model: %s, foreign_key: %s)',
                        $slug->id,
                        $slug->model,
                        $slug->foreign_key,
                    ), 'warning');
                }
            } catch (Exception $e) {
                $this->Flash->error(__('Unable to load related {0} record.', $slug->model));
                $this->log(sprintf(
                    'Failed to fetch related record for slug %s (model: %s, foreign_key: %s): %s',
                    $slug->id,
                    $slug->model,
                    $slug->foreign_key,
                    $e->getMessage(),
                ), 'error');
            }
        }

        // Get all slugs for this model/foreign_key combination
        $relatedSlugs = $this->Slugs->find()
            ->where([
                'model' => $slug->model,
                'foreign_key' => $slug->foreign_key,
                'id !=' => $slug->id,
            ])
            ->orderBy(['created' => 'DESC'])
            ->all();

        $this->set(compact('slug', 'relatedRecord', 'relatedSlugs'));
    }

    /**
     * Add method
     *
     * Creates a new slug record with associated content relationship.
     * Provides form with model selection and related content options.
     *
     * @return \Cake\Http\Response|null|void Redirects to index on success, renders view otherwise
     */
    public function add(): ?Response
    {
        $slug = $this->Slugs->newEmptyEntity();

        // Get all unique model types from the slugs table
        $modelTypes = $this->Slugs->find()
            ->select(['model'])
            ->distinct('model')
            ->orderBy(['model' => 'ASC'])
            ->all()
            ->map(fn($row) => $row->model)
            ->toArray();

        if ($this->request->is('post')) {
            $slug = $this->Slugs->patchEntity($slug, $this->request->getData());
            if ($this->Slugs->save($slug)) {
                $this->Flash->success(__('The slug has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The slug could not be saved. Please, try again.'));
        }

        // Get the selected model (either from form data or default to first model)
        $selectedModel = $this->request->getData('model') ?? ($modelTypes[0] ?? null);

        // If we have a selected model, get its records
        $relatedRecords = [];
        if ($selectedModel) {
            try {
                $relatedRecords = $this->fetchTable($selectedModel)
                    ->find('list', limit: 200)
                    ->all();
            } catch (Exception $e) {
                $this->Flash->error(__('Unable to load related records for {0}.', $selectedModel));
                $this->log(sprintf(
                    'Failed to fetch related records for model %s: %s',
                    $selectedModel,
                    $e->getMessage(),
                ), 'error');
            }
        }

        $this->set(compact('slug', 'modelTypes', 'relatedRecords', 'selectedModel'));

        return null;
    }

    /**
     * Edit method
     *
     * Modifies an existing slug record and its relationships.
     * Provides form with current values and content selection options.
     *
     * @param string|null $id The UUID of the slug to edit
     * @return \Cake\Http\Response|null|void Redirects to index on success, renders view otherwise
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When slug not found
     */
    public function edit(?string $id = null): ?Response
    {
        $slug = $this->Slugs->find()
            ->where(['id' => $id])
            ->firstOrFail();

        if ($this->request->is(['patch', 'post', 'put'])) {
            $slug = $this->Slugs->patchEntity($slug, $this->request->getData());
            if ($this->Slugs->save($slug)) {
                $this->Flash->success(__('The slug has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The slug could not be saved. Please, try again.'));
        }

        // Get related records based on the model type
        $relatedRecords = $this->fetchTable($slug->model)->find('list', limit: 200)->all();
        $this->set(compact('relatedRecords'));

        $this->set(compact('slug'));

        return null;
    }

    /**
     * Delete method
     *
     * @param string|null $id Slug id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete(?string $id = null): ?Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $slug = $this->Slugs->get($id);
        if ($this->Slugs->delete($slug)) {
            $this->Flash->success(__('The slug has been deleted.'));
        } else {
            $this->Flash->error(__('The slug could not be deleted. Please, try again.'));
        }

        return $this->redirect(['prefix' => 'Admin', 'controller' => 'slugs', 'action' => 'index']);
    }
}


// ----- END FILE: src/Controller/Admin/SlugsController.php -----

FILE: src/Controller/Admin/CommentsController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4652 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use App\Model\Table\ArticlesTable;
use Cake\Cache\Cache;
use Cake\Http\Response;
use Cake\ORM\Query;

/**
 * Comments Controller
 *
 * Manages CRUD operations for comments in the admin area.
 *
 * @property \App\Model\Table\CommentsTable $Comments
 * @property \App\Model\Table\ArticlesTable $Articles
 */
class CommentsController extends AppController
{
    protected ArticlesTable $Articles;

    /**
     * Initializes the controller and loads the Articles table.
     *
     * @return void
     */
    public function initialize(): void
    {
        parent::initialize();
        $this->Articles = $this->fetchTable('Articles');
    }

    /**
     * Clears the content cache (used for both articles and tags)
     *
     * @return void
     */
    private function clearContentCache(): void
    {
        Cache::clear('content');
    }

    /**
     * Displays a paginated list of comments with search functionality.
     *
     * @return \Cake\Http\Response|null Renders view or returns search results for AJAX requests.
     */
    public function index(): ?Response
    {
        $statusFilter = $this->request->getQuery('status');
        $query = $this->Comments->find()
            ->contain([
                'Users',
                'Articles' => function (Query $q) {
                    return $q->select(['Articles.id', 'Articles.title', 'Articles.slug', 'Articles.kind']);
                },
            ]);

        if ($statusFilter !== null) {
            $query->where(['Comments.display' => (int)$statusFilter]);
        }

        $search = $this->request->getQuery('search');
        if (!empty($search)) {
            $query->where([
                'content LIKE' => '%' . $search . '%',
            ]);
        }
        $comments = $this->paginate($query);
        if ($this->request->is('ajax')) {
            $this->set(compact('comments'));
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('search_results');
        }
        $this->set(compact('comments'));

        return null;
    }

    /**
     * Displays details of a specific comment.
     *
     * @param string|null $id Comment id.
     * @return void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When comment is not found.
     */
    public function view(?string $id = null): void
    {
        $comment = $this->Comments->get($id, contain: ['Users', 'Articles']);
        $this->set(compact('comment'));
    }

    /**
     * Edits an existing comment and clears the cache for the associated article.
     *
     * @param string|null $id Comment id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When comment is not found.
     */
    public function edit(?string $id = null): ?Response
    {
        $comment = $this->Comments->get($id, contain: ['Articles']);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $comment->setAccess('is_inappropriate', true);
            $comment = $this->Comments->patchEntity($comment, $this->request->getData());
            if ($this->Comments->save($comment)) {
                if ($comment->article) {
                    $this->clearContentCache();
                }
                $this->Flash->success(__('The comment has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The comment could not be saved. Please, try again.'));
        }
        $users = $this->Comments->Users->find('list', limit: 200)->all();
        $this->set(compact('comment', 'users'));

        return null;
    }

    /**
     * Deletes a comment and clears the cache for the associated article.
     *
     * @param string|null $id Comment id.
     * @return \Cake\Http\Response Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When comment is not found.
     */
    public function delete(?string $id = null): Response
    {
        $this->request->allowMethod(['post', 'delete']);
        $comment = $this->Comments->get($id);

        if ($this->Comments->delete($comment)) {
            if ($comment->article) {
                $this->clearContentCache();
            }

            $this->Flash->success(__('The comment has been deleted.'));
        } else {
            $this->Flash->error(__('The comment could not be deleted. Please, try again.'));
        }

        return $this->redirect($this->referer());
    }
}


// ----- END FILE: src/Controller/Admin/CommentsController.php -----

FILE: src/Controller/Admin/PageViewsController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 12701 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Admin;

use App\Controller\AppController;
use App\Model\Table\ArticlesTable;
use Cake\Core\Configure;
use Cake\Http\Exception\NotFoundException;
use Cake\Http\Response;
use Cake\Log\LogTrait;
use DateTime;
use Exception;

/**
 * PageViews Controller
 *
 * Manages page view statistics for articles.
 *
 * @property \App\Model\Table\PageViewsTable $PageViews
 */
class PageViewsController extends AppController
{
    use LogTrait;

    /**
     * Articles Table
     *
     * @var \App\Model\Table\ArticlesTable
     * This property holds an instance of the ArticlesTable class.
     * It is used to interact with the articles table in the database.
     * The ArticlesTable class provides methods for querying and manipulating
     * article data, such as finding, saving, and deleting articles.
     */
    protected ArticlesTable $Articles;

    /**
     * Initialize method
     *
     * @return void
     */
    public function initialize(): void
    {
        parent::initialize();
        $this->Articles = $this->fetchTable('Articles');
    }

    /**
     * Retrieves page view statistics for a specific article.
     *
     * This method fetches an article by its ID and retrieves the number of page views
     * grouped by date. It then sets the data to be used in the view.
     *
     * @param string $articleId The ID of the article to retrieve statistics for
     * @return void
     * @throws \Cake\Http\Exception\NotFoundException If the article is not found
     */
    public function pageViewStats(string $articleId): void
    {
        $article = $this->Articles->find()
            ->select(['id', 'title', 'slug'])
            ->where(['id' => $articleId])
            ->first();

        if (!$article) {
            throw new NotFoundException(__('Article not found'));
        }

        $viewsOverTime = $this->PageViews->find()
            ->where(['article_id' => $articleId])
            ->select([
                'date' => 'DATE(created)',
                'count' => $this->PageViews->find()->func()->count('*'),
            ])
            ->groupBy('DATE(created)')
            ->orderBy(['DATE(created)' => 'DESC'])
            ->all();

        $this->set(compact('viewsOverTime', 'article'));
    }

    /**
     * Retrieves view records for a specific article.
     *
     * This method fetches an article by its ID and retrieves all associated page view records.
     * If a date query parameter is provided, it filters the page views by that date.
     * The results are then set to be available in the view.
     *
     * @param string $articleId The ID of the article to retrieve view records for
     * @return void
     * @throws \Cake\Http\Exception\NotFoundException If the article is not found
     */
    public function viewRecords(string $articleId): void
    {
        $article = $this->Articles->find()
            ->select(['id', 'title', 'slug'])
            ->where(['id' => $articleId])
            ->first();

        if (!$article) {
            throw new NotFoundException(__('Article not found'));
        }

        $query = $this->PageViews->find()
            ->where(['article_id' => $articleId])
            ->orderBy(['created' => 'DESC']);

        if ($this->request->getQuery('date')) {
            $date = new DateTime($this->request->getQuery('date'));
            $query->where([
                'DATE(created)' => $date->format('Y-m-d'),
            ]);
        }

        $viewRecords = $query->all();

        $this->set(compact('viewRecords', 'article'));
    }

    /**
     * Filters page view statistics for a specific article based on date range.
     *
     * @param string $articleId The ID of the article to retrieve statistics for
     * @return \Cake\Http\Response|null JSON response with filtered data or error message
     */
    public function filterStats(string $articleId): ?Response
    {
        if (Configure::read('debug')) {
            $this->log('Filter request received for article ID: ' . $articleId, 'debug');
            $this->log('Start date: ' . $this->request->getQuery('start'), 'debug');
            $this->log('End date: ' . $this->request->getQuery('end'), 'debug');
        }

        try {
            $article = $this->Articles->find()
                ->select(['id', 'title', 'slug'])
                ->where(['id' => $articleId])
                ->first();

            if (!$article) {
                throw new NotFoundException(__('Article not found'));
            }

            $startDate = new DateTime($this->request->getQuery('start'));
            $endDate = new DateTime($this->request->getQuery('end'));

            $viewsOverTime = $this->PageViews->find()
                ->where([
                    'article_id' => $articleId,
                    'created >=' => $startDate->format('Y-m-d'),
                    'created <=' => $endDate->format('Y-m-d 23:59:59'),
                ])
                ->select([
                    'date' => 'DATE(created)',
                    'count' => $this->PageViews->find()->func()->count('*'),
                ])
                ->groupBy('DATE(created)')
                ->orderBy(['DATE(created)' => 'ASC'])
                ->all();

            $totalViews = array_sum(array_column($viewsOverTime->toArray(), 'count'));

            $filteredData = [
                'viewsOverTime' => $viewsOverTime,
                'totalViews' => $totalViews,
            ];

            if (Configure::read('debug')) {
                $this->log('Filtered data: ' . json_encode($filteredData), 'debug');
            }

            return $this->response->withType('application/json')->withStringBody(json_encode($filteredData));
        } catch (Exception $e) {
            $this->log('Error in filterStats: ' . $e->getMessage(), 'error');

            $errorMsg = __('An error occurred while processing your request.');

            return $this->response->withStatus(500)
                ->withType('application/json')
                ->withStringBody(json_encode(['error' => $errorMsg]));
        }
    }

    /**
     * Enhanced analytics dashboard with comprehensive metrics
     *
     * @return void
     */
    public function dashboard(): void
    {
        // Get date range from request or default to last 30 days
        $endDate = new DateTime();
        $startDate = (clone $endDate)->modify('-30 days');

        if ($this->request->getQuery('start')) {
            $startDate = new DateTime($this->request->getQuery('start'));
        }
        if ($this->request->getQuery('end')) {
            $endDate = new DateTime($this->request->getQuery('end'));
        }

        // Overall statistics
        $totalViews = $this->PageViews->find()
            ->where([
                'created >=' => $startDate->format('Y-m-d'),
                'created <=' => $endDate->format('Y-m-d 23:59:59'),
            ])
            ->count();

        $uniqueVisitors = $this->PageViews->find()
            ->where([
                'created >=' => $startDate->format('Y-m-d'),
                'created <=' => $endDate->format('Y-m-d 23:59:59'),
            ])
            ->select(['ip_address'])
            ->distinct(['ip_address'])
            ->count();

        // Views over time
        $viewsOverTime = $this->PageViews->find()
            ->where([
                'created >=' => $startDate->format('Y-m-d'),
                'created <=' => $endDate->format('Y-m-d 23:59:59'),
            ])
            ->select([
                'date' => 'DATE(created)',
                'count' => $this->PageViews->find()->func()->count('*'),
            ])
            ->groupBy('DATE(created)')
            ->orderBy(['DATE(created)' => 'ASC'])
            ->all();

        // Top articles
        $topArticles = $this->PageViews->find()
            ->contain(['Articles' => ['fields' => ['id', 'title', 'slug']]])
            ->where([
                'PageViews.created >=' => $startDate->format('Y-m-d'),
                'PageViews.created <=' => $endDate->format('Y-m-d 23:59:59'),
            ])
            ->select([
                'article_id',
                'count' => $this->PageViews->find()->func()->count('*'),
            ])
            ->groupBy(['article_id'])
            ->orderBy(['count' => 'DESC'])
            ->limit(10)
            ->all();

        // Get additional analytics data
        $browserStats = $this->getBrowserStats($startDate, $endDate);
        $hourlyDistribution = $this->getHourlyDistribution($startDate, $endDate);
        $topReferrers = $this->getTopReferrers($startDate, $endDate);

        $this->set(compact(
            'totalViews',
            'uniqueVisitors',
            'viewsOverTime',
            'topArticles',
            'browserStats',
            'hourlyDistribution',
            'topReferrers',
            'startDate',
            'endDate',
        ));
    }

    /**
     * Get browser statistics
     *
     * @param \DateTime $startDate Start date
     * @param \DateTime $endDate End date
     * @return array Browser statistics
     */
    private function getBrowserStats(DateTime $startDate, DateTime $endDate): array
    {
        $results = $this->PageViews->find()
            ->where([
                'created >=' => $startDate->format('Y-m-d'),
                'created <=' => $endDate->format('Y-m-d 23:59:59'),
            ])
            ->select(['user_agent'])
            ->all();

        $browserCounts = [];
        foreach ($results as $result) {
            $userAgent = $result->user_agent ?? '';
            $browser = $this->extractBrowser($userAgent);
            $browserCounts[$browser] = ($browserCounts[$browser] ?? 0) + 1;
        }

        arsort($browserCounts);

        return array_slice($browserCounts, 0, 10, true);
    }

    /**
     * Extract browser name from user agent string
     *
     * @param string $userAgent User agent string
     * @return string Browser name
     */
    private function extractBrowser(string $userAgent): string
    {
        $browsers = [
            'Chrome' => '/Chrome\/[\d.]+/',
            'Firefox' => '/Firefox\/[\d.]+/',
            'Safari' => '/Safari\/[\d.]+/',
            'Edge' => '/Edg\/[\d.]+/',
            'Opera' => '/OPR\/[\d.]+/',
            'Internet Explorer' => '/MSIE [\d.]+/',
        ];

        foreach ($browsers as $browser => $pattern) {
            if (preg_match($pattern, $userAgent)) {
                return $browser;
            }
        }

        return 'Other';
    }

    /**
     * Get hourly distribution of views
     *
     * @param \DateTime $startDate Start date
     * @param \DateTime $endDate End date
     * @return array Hourly distribution
     */
    private function getHourlyDistribution(DateTime $startDate, DateTime $endDate): array
    {
        $results = $this->PageViews->find()
            ->where([
                'created >=' => $startDate->format('Y-m-d'),
                'created <=' => $endDate->format('Y-m-d 23:59:59'),
            ])
            ->select([
                'hour' => 'HOUR(created)',
                'count' => $this->PageViews->find()->func()->count('*'),
            ])
            ->groupBy('HOUR(created)')
            ->orderBy(['hour' => 'ASC'])
            ->all();

        $hourlyData = array_fill(0, 24, 0);
        foreach ($results as $result) {
            $hourlyData[(int)$result->hour] = $result->count;
        }

        return $hourlyData;
    }

    /**
     * Get top referrers
     *
     * @param \DateTime $startDate Start date
     * @param \DateTime $endDate End date
     * @return array Top referrers
     */
    private function getTopReferrers(DateTime $startDate, DateTime $endDate): array
    {
        $results = $this->PageViews->find()
            ->where([
                'created >=' => $startDate->format('Y-m-d'),
                'created <=' => $endDate->format('Y-m-d 23:59:59'),
                'referer IS NOT' => null,
                'referer !=' => '',
            ])
            ->select([
                'referer',
                'count' => $this->PageViews->find()->func()->count('*'),
            ])
            ->groupBy(['referer'])
            ->orderBy(['count' => 'DESC'])
            ->limit(10)
            ->all();

        $referrers = [];
        foreach ($results as $result) {
            $domain = parse_url($result->referer, PHP_URL_HOST) ?? $result->referer;
            $referrers[] = [
                'domain' => $domain,
                'count' => $result->count,
                'url' => $result->referer,
            ];
        }

        return $referrers;
    }
}


// ----- END FILE: src/Controller/Admin/PageViewsController.php -----

FILE: src/Controller/CookieConsentsController.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 4261 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller;

use Cake\Event\EventInterface;
use Cake\Http\Response;

/**
 * CookieConsents Controller
 *
 * @property \App\Model\Table\CookieConsentsTable $CookieConsents
 */
class CookieConsentsController extends AppController
{
    /**
     * Configures authentication for specific actions.
     *
     * @param \Cake\Event\EventInterface $event The event instance.
     * @return void
     */
    public function beforeFilter(EventInterface $event): void
    {
        parent::beforeFilter($event);

        $this->Authentication->allowUnauthenticated(['edit']);
    }

    /**
     * Edit cookie consent preferences and manage GDPR compliance.
     *
     * Handles both GET and POST/PUT/PATCH requests for cookie consent management.
     * For GET requests, displays the current consent settings if they exist.
     * For POST/PUT/PATCH requests, creates a new consent record for GDPR audit trail
     * and updates the user's cookie preferences. Supports both regular and AJAX requests.
     *
     * The method handles two types of consent:
     * - Essential only: Basic cookies required for site functionality
     * - Essential and Analytics: Includes analytics tracking consent
     *
     * @return \Cake\Http\Response|null Returns Response object for redirects/AJAX or null for normal view render
     * @throws \RuntimeException When cookie creation fails
     */
    public function edit(): ?Response
    {
        $userId = $this->request->getAttribute('identity') ?
            $this->request->getAttribute('identity')->getIdentifier() : null;

        $cookieConsent = null;
        $consentCookie = $this->request->getCookie('consent_cookie');
        if ($consentCookie) {
            $consentData = json_decode($consentCookie, true);
            $cookieConsent = $this->CookieConsents->newEntity($consentData);
            $cookieConsent->session_id = $this->request->getSession()->id();
        }

        if ($this->request->is(['patch', 'post', 'put'])) {
            // Always create a new record for GDPR audit trail
            $newConsent = $this->CookieConsents->newEntity($this->request->getData());

            $newConsent->session_id = $this->request->getSession()->id();
            $newConsent->user_id = $userId;
            $newConsent->ip_address = $this->request->clientIp();
            $newConsent->user_agent = $this->request->getHeaderLine('User-Agent');

            $consentType = $this->request->getData('consent_type');
            if ($consentType === 'essential') {
                $newConsent->analytics_consent = 0;
                $newConsent->functional_consent = 0;
                $newConsent->marketing_consent = 0;
            }
            if ($consentType === 'all') {
                $newConsent->analytics_consent = 1;
                $newConsent->functional_consent = 1;
                $newConsent->marketing_consent = 1;
            }

            if ($this->CookieConsents->save($newConsent)) {
                $this->Flash->success(__('Your cookie preferences have been saved.'));

                // Save a cookie with the consent information
                $cookie = $this->CookieConsents->createConsentCookie($newConsent);
                $this->response = $this->response->withCookie($cookie);

                if ($this->request->is('ajax')) {
                    return $this->response->withType('application/json')
                        ->withStringBody(json_encode(['success' => true]));
                }

                return $this->redirect(['action' => 'edit']);
            }

            if ($this->request->is('ajax')) {
                return $this->response->withType('application/json')
                    ->withStringBody(json_encode([
                        'success' => false,
                        'errors' => $cookieConsent->getErrors(),
                    ]));
            }

            $this->Flash->error(__('Your cookie preferences could not be saved. Please, try again.'));
        }

        $this->set(compact('cookieConsent'));

        if ($this->request->is('ajax')) {
            $this->viewBuilder()->setLayout('ajax');

            return $this->render('edit');
        }

        return null;
    }
}


// ----- END FILE: src/Controller/CookieConsentsController.php -----

FILE: src/Controller/SitemapController.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 12143 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller;

use App\Utility\I18nManager;
use Cake\Cache\Cache;
use Cake\Event\EventInterface;
use Cake\I18n\DateTime;
use Cake\Routing\Router;
use Cake\View\XmlView;
use Exception;

/**
 * SitemapController handles the generation of XML sitemaps for the application.
 *
 * This controller generates a sitemap.xml file that includes all published pages,
 * articles, and tags with their respective priorities and change frequencies.
 * The sitemap supports internationalization (i18n) and works across different locales.
 * It also provides a sitemap index file that lists all language-specific sitemaps.
 */
class SitemapController extends AppController
{
    /**
     * Configures authentication requirements before controller actions are executed.
     *
     * This method is called before each action in the controller. It configures which
     * actions can be accessed without authentication. In this case, the 'index' and
     * 'sitemapIndex' actions are allowed to be accessed by unauthenticated users,
     * enabling public access to the sitemap files.
     *
     * @param \Cake\Event\EventInterface $event The event object
     * @return void
     */
    public function beforeFilter(EventInterface $event): void
    {
        parent::beforeFilter($event);
        $this->Authentication->allowUnauthenticated(['index']);
    }

    /**
     * Specifies the view classes that this controller can use.
     *
     * @return array<class-string> Array containing XmlView class for sitemap generation
     */
    public function viewClasses(): array
    {
        return [XmlView::class];
    }

    /**
     * Generates the XML sitemap for the application with hreflang support.
     *
     * This method fetches all published pages, articles, and tags from the database
     * and generates a sitemap.xml file according to the sitemap protocol specifications.
     * It includes hreflang annotations for multi-language support.
     *
     * Different content types are assigned different priorities and change frequencies:
     * - Homepage: Priority 1.0, daily changes
     * - Pages: Priority 0.8, weekly changes
     * - Articles: Priority 0.6, daily changes
     * - Tags: Priority 0.4, weekly changes
     *
     * @return void
     * @link https://www.sitemaps.org/protocol.html Sitemap protocol reference
     * @link https://support.google.com/webmasters/answer/189077 Hreflang in sitemaps
     */
    public function index(): void
    {
        try {
            // Get all enabled languages
            $enabledLanguages = $this->getEnabledLanguages();

            // Build cache key based on all languages and last modification
            $lastModified = $this->getOverallLastModifiedDate();
            $cacheKey = 'sitemap_all_' . $lastModified->format('YmdHis');

            // Try to get from cache
            $urls = Cache::read($cacheKey, 'default');

            if ($urls === null) {
                $articlesTable = $this->fetchTable('Articles');

                // Optimize queries by selecting only needed fields
                // Get published hierarchical pages
                $pages = $articlesTable->find('threaded')
                    ->select(['id', 'slug', 'modified', 'lft'])
                    ->where([
                        'kind' => 'page',
                        'is_published' => 1,
                    ])
                    ->orderByAsc('lft')
                    ->all();

                // Get published regular articles
                $articles = $articlesTable->find()
                    ->select(['id', 'slug', 'modified'])
                    ->where([
                        'kind' => 'article',
                        'is_published' => 1,
                    ])
                    ->orderByDesc('modified')
                    ->all();

                // Get all tags
                $tagsTable = $this->fetchTable('Tags');
                $tags = $tagsTable->find()
                    ->select(['id', 'slug', 'modified'])
                    ->orderByAsc('title')
                    ->all();

                $urls = [];

                // Add homepage for all enabled languages
                foreach ($enabledLanguages as $lang) {
                    $urls[] = [
                        'loc' => Router::url([
                            '_name' => 'home',
                            'lang' => $lang,
                            '_full' => true,
                        ]),
                        'changefreq' => 'daily',
                        'priority' => '1.0',
                        'lastmod' => $lastModified->format('Y-m-d'),
                    ];
                }

                // Add pages for all enabled languages
                foreach ($pages as $page) {
                    foreach ($enabledLanguages as $lang) {
                        $urls[] = [
                            'loc' => Router::url([
                                '_name' => 'page-by-slug',
                                'slug' => $page->slug,
                                'lang' => $lang,
                                '_full' => true,
                            ]),
                            'lastmod' => $page->modified->format('Y-m-d'),
                            'changefreq' => 'weekly',
                            'priority' => '0.8',
                        ];
                    }
                }

                // Add articles for all enabled languages
                foreach ($articles as $article) {
                    foreach ($enabledLanguages as $lang) {
                        $urls[] = [
                            'loc' => Router::url([
                                '_name' => 'article-by-slug',
                                'slug' => $article->slug,
                                'lang' => $lang,
                                '_full' => true,
                            ]),
                            'lastmod' => $article->modified->format('Y-m-d'),
                            'changefreq' => 'daily',
                            'priority' => '0.6',
                        ];
                    }
                }

                // Add tags for all enabled languages
                foreach ($tags as $tag) {
                    foreach ($enabledLanguages as $lang) {
                        $urls[] = [
                            'loc' => Router::url([
                                '_name' => 'tag-by-slug',
                                'slug' => $tag->slug,
                                'lang' => $lang,
                                '_full' => true,
                            ]),
                            'lastmod' => $tag->modified->format('Y-m-d'),
                            'changefreq' => 'weekly',
                            'priority' => '0.4',
                        ];
                    }
                }

                // Cache the generated URLs for 1 hour
                Cache::write($cacheKey, $urls, 'default');
            }

            $this->viewBuilder()
                ->setOption('rootNode', 'urlset')
                ->setOption('serialize', ['@xmlns', 'url']);

            $this->set([
                '@xmlns' => 'http://www.sitemaps.org/schemas/sitemap/0.9',
                'url' => $urls,
            ]);

            // Set response type and cache headers with smart caching based on last modified
            $this->response = $this->response
                ->withType('xml')
                ->withHeader('Content-Type', 'application/xml')
                ->withCache($lastModified->toUnixString(), '+1 day');
        } catch (Exception $e) {
            $this->log('Sitemap generation failed: ' . $e->getMessage(), 'error');

            // Return empty but valid sitemap on error
            $this->viewBuilder()
                ->setOption('rootNode', 'urlset')
                ->setOption('serialize', ['@xmlns', 'url']);

            $this->set([
                '@xmlns' => 'http://www.sitemaps.org/schemas/sitemap/0.9',
                'url' => [],
            ]);

            $this->response = $this->response
                ->withType('xml')
                ->withHeader('Content-Type', 'application/xml');
        }
    }

    /**
     * Gets the list of enabled languages from settings.
     *
     * @return array<string> Array of enabled language codes
     */
    protected function getEnabledLanguages(): array
    {
        // Always include English as default
        $languages = ['en'];

        // Get enabled languages using I18nManager
        $enabledLanguages = array_keys(I18nManager::getEnabledLanguages());

        // Merge with default, removing duplicates
        foreach ($enabledLanguages as $lang) {
            if (!in_array($lang, $languages)) {
                $languages[] = $lang;
            }
        }

        return $languages;
    }

    /**
     * Gets the last modified date for content in a specific language.
     *
     * @param string $language The language code
     * @return \Cake\I18n\DateTime The last modification date
     */
    protected function getLastModifiedDateForLanguage(string $language): DateTime
    {
        $articlesTable = $this->fetchTable('Articles');

        // Get the most recently modified article or page
        $lastArticle = $articlesTable->find()
            ->select(['modified'])
            ->where(['is_published' => 1])
            ->orderByDesc('modified')
            ->first();

        // Get the most recently modified tag
        $tagsTable = $this->fetchTable('Tags');
        $lastTag = $tagsTable->find()
            ->select(['modified'])
            ->orderByDesc('modified')
            ->first();

        $dates = [];
        if ($lastArticle) {
            $dates[] = $lastArticle->modified;
        }
        if ($lastTag) {
            $dates[] = $lastTag->modified;
        }

        // Return the most recent date, or current date if no content
        return !empty($dates) ? max($dates) : new DateTime();
    }

    /**
     * Gets the overall last modified date across all languages.
     *
     * @return \Cake\I18n\DateTime The last modification date
     */
    protected function getOverallLastModifiedDate(): DateTime
    {
        // For now, just use the same logic as single language
        // In the future, this could check translations table
        return $this->getLastModifiedDateForLanguage('en');
    }

    /**
     * Generates hreflang links for a given route and entity.
     *
     * @param string $routeName The route name
     * @param \Cake\Datasource\EntityInterface|null $entity The entity (article, page, tag)
     * @param array<string> $languages Array of enabled language codes
     * @return array<array> Array of hreflang link data
     */
    protected function generateHreflangLinks(string $routeName, ?object $entity, array $languages): array
    {
        $links = [];

        foreach ($languages as $lang) {
            $urlParams = [
                '_name' => $routeName,
                'lang' => $lang,
                '_full' => true,
            ];

            // Add slug parameter if entity is provided
            if ($entity !== null && isset($entity->slug)) {
                $urlParams['slug'] = $entity->slug;
            }

            $links[] = [
                '@rel' => 'alternate',
                '@hreflang' => $lang,
                '@href' => Router::url($urlParams),
            ];
        }

        // Add x-default for the primary language (first in the list)
        if (!empty($languages)) {
            $defaultUrlParams = [
                '_name' => $routeName,
                'lang' => $languages[0],
                '_full' => true,
            ];

            if ($entity !== null && isset($entity->slug)) {
                $defaultUrlParams['slug'] = $entity->slug;
            }

            $links[] = [
                '@rel' => 'alternate',
                '@hreflang' => 'x-default',
                '@href' => Router::url($defaultUrlParams),
            ];
        }

        return $links;
    }
}


// ----- END FILE: src/Controller/SitemapController.php -----

FILE: plugins/AdminTheme/src/Controller/AppController.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 166 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace AdminTheme\Controller;

use App\Controller\AppController as BaseController;

class AppController extends BaseController
{
}


// ----- END FILE: plugins/AdminTheme/src/Controller/AppController.php -----

FILE: plugins/DefaultTheme/src/Controller/AppController.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 168 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace DefaultTheme\Controller;

use App\Controller\AppController as BaseController;

class AppController extends BaseController
{
}


// ----- END FILE: plugins/DefaultTheme/src/Controller/AppController.php -----

FILE: plugins/DefaultTheme/src/Controller/Component/FrontEndSiteComponent.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 4117 bytes
CONTENT:
<?php
namespace DefaultTheme\Controller\Component;

use Cake\Controller\Component;
use Cake\Event\EventInterface;
use App\Utility\I18nManager;
use App\Utility\SettingsManager;
use Cake\Core\Configure;

/**
 * FrontEndSiteComponent
 *
 * This component is responsible for preparing and setting up data
 * for the front-end of the site, specifically the article tree and tag list.
 * It automatically runs before rendering non-admin pages.
 */
class FrontEndSiteComponent extends Component
{
    /**
     * Default configuration.
     *
     * Defines the events this component listens to.
     *
     * @var array
     */
    protected array $_defaultConfig = [
        'implementedEvents' => [
            'Controller.beforeRender' => 'beforeRender'
        ]
    ];

    /**
     * Before render callback.
     *
     * This method is automatically called before the view is rendered
     * using the DefaultTheme. It prepares and sets data
     * for use in the views.
     *
     * @param \Cake\Event\EventInterface $event The beforeRender event that was fired.
     * @return void
     */
    public function beforeRender(EventInterface $event): void
    {
        $controller = $this->getController();
        $request = $controller->getRequest();
        
        // Skip processing for admin routes
        if ($request->getParam('prefix') === 'Admin') {
            return;
        }
        
        // Skip processing for certain user actions during tests
        if (Configure::read('debug') && $request->getParam('controller') === 'Users') {
            $skipActions = ['login', 'logout', 'register', 'edit', 'forgotPassword', 'resetPassword', 'confirmEmail'];
            if (in_array($request->getParam('action'), $skipActions)) {
                // Set minimal required variables
                $controller->set([
                    'menuPages' => [],
                    'rootTags' => [],
                    'featuredArticles' => [],
                    'articleArchives' => [],
                    'siteLanguages' => I18nManager::getEnabledLanguages(),
                    'selectedSiteLanguage' => $request->getParam('lang', 'en')
                ]);
                return;
            }
        }

        $cacheKey = $controller->cacheKey;
        $articlesTable = $controller->fetchTable('Articles');
        $tagsTable = $controller->fetchTable('Tags');

        $menuPages = [];
        switch(SettingsManager::read('SitePages.mainMenuShow', 'root')) {
            case "root":
                $menuPages = $articlesTable->getRootPages($cacheKey);
                break;
            case "selected":
                $menuPages = $articlesTable->getMainMenuPages($cacheKey);
                break;
        }

        $rootTags = [];
        switch(SettingsManager::read('SitePages.mainTagMenuShow', 'root')) {
            case "root":
                $rootTags = $tagsTable->getRootTags($cacheKey);
                break;
            case "selected":
                $rootTags = $tagsTable->getMainMenuTags($cacheKey);
                break;
        }

        $featuredArticles = $articlesTable->getFeatured($cacheKey);
        
        $articleArchives = $articlesTable->getArchiveDates($cacheKey);

        $privacyPolicyId = SettingsManager::read('SitePages.privacyPolicy', null);
        if ($privacyPolicyId && $privacyPolicyId != 'None') {
            $privacyPolicy = $articlesTable->find()
                ->select(['id', 'title', 'slug'])
                ->where(['id' => $privacyPolicyId])
                ->cache($cacheKey . 'priv_page', 'content')
                ->first();
                
            if ($privacyPolicy) {
                $controller->set('sitePrivacyPolicy', $privacyPolicy->toArray());
            }
        }
        
        $controller->set(compact(
            'menuPages',
            'rootTags',
            'featuredArticles',
            'articleArchives',
        ));
        
        $controller->set('siteLanguages', I18nManager::getEnabledLanguages());
        $controller->set('selectedSiteLanguage', $request->getParam('lang', 'en'));
    }
}

// ----- END FILE: plugins/DefaultTheme/src/Controller/Component/FrontEndSiteComponent.php -----



================================================================================
END SECTION: Controllers
================================================================================



================================================================================
BEGIN SECTION: Commands
================================================================================

FILE: src/Command/CheckTableExistsCommand.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1446 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use App\Utility\DatabaseUtility;
use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;

/**
 * CheckTableExists command.
 */
class CheckTableExistsCommand extends Command
{
    /**
     * Hook method for defining this command's option parser.
     *
     * @param \Cake\Console\ConsoleOptionParser $parser The parser to be defined
     * @return \Cake\Console\ConsoleOptionParser The built parser.
     */
    public function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $parser
            ->setDescription('Check if a table exists in the database')
            ->addArgument('table', [
                'help' => 'The name of the table to check',
                'required' => true,
            ]);

        return $parser;
    }

    /**
     * Implement this method with your command's logic.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console io
     * @return int|null The exit code or null for success
     */
    public function execute(Arguments $args, ConsoleIo $io): ?int
    {
        $tableName = $args->getArgument('table');

        if (DatabaseUtility::tableExists($tableName)) {
            return static::CODE_SUCCESS;
        } else {
            return static::CODE_ERROR;
        }
    }
}


// ----- END FILE: src/Command/CheckTableExistsCommand.php -----

FILE: src/Command/ExportCodeCommand.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 14637 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;
use Cake\Core\Configure;
use DirectoryIterator;
use Exception;
use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use SplFileInfo;

/**
 * ExportCodeCommand
 *
 * This command exports custom code (app and plugins) with relative paths to a text file or separate files.
 * This is useful if you want to have AI work with the source code.
 */
class ExportCodeCommand extends Command
{
    private const OUTPUT_FILENAME_BASE = 'willow_cms_code';
    // Updated default extensions to include ctp for views by default easily
    private const DEFAULT_EXTENSIONS = 'php,css,js,ctp';
    // Added Webroot to default directories
    private const DEFAULT_DIRECTORIES = 'Models,Controllers,Commands,Components,Views,Webroot';

    /**
     * Defines the standard mappings for application and plugin code directories.
     * 'app' path is relative to ROOT.
     * 'plugin' path is relative to the ROOT of a specific plugin (e.g., plugins/MyPlugin/).
     *
     * @return array<string, array<string, string>>
     */
    protected function getDirectoryTypeMappings(): array
    {
        return [
            'Models' => ['app' => 'src' . DS . 'Model', 'plugin' => 'src' . DS . 'Model'],
            'Views' => ['app' => 'templates', 'plugin' => 'templates'], // For .ctp or .php view files
            'Controllers' => ['app' => 'src' . DS . 'Controller', 'plugin' => 'src' . DS . 'Controller'],
            'Components' => ['app' => 'src' . DS . 'Controller' . DS . 'Component',
            'plugin' => 'src' . DS . 'Controller' . DS . 'Component'],
            'Commands' => ['app' => 'src' . DS . 'Command', 'plugin' => 'src' . DS . 'Command'],
            'Jobs' => ['app' => 'src' . DS . 'Job', 'plugin' => 'src' . DS . 'Job'],
            'Services' => ['app' => 'src' . DS . 'Service', 'plugin' => 'src' . DS . 'Service'],
            'Utilities' => ['app' => 'src' . DS . 'Utility', 'plugin' => 'src' . DS . 'Utility'],
            'Logs' => ['app' => 'src' . DS . 'Log', 'plugin' => 'src' . DS . 'Log'],
            'Tests' => ['app' => 'tests', 'plugin' => 'tests'],
            'Webroot' => ['app' => 'webroot', 'plugin' => 'webroot'], // For JS, CSS etc. in webroot
            // Add other types like 'Config', etc. if needed
        ];
    }

    /**
     * Build the option parser for the command.
     *
     * @param \Cake\Console\ConsoleOptionParser $parser The option parser to be modified.
     * @return \Cake\Console\ConsoleOptionParser The modified option parser.
     */
    protected function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $dirMappings = $this->getDirectoryTypeMappings();
        $availableDirKeys = implode(', ', array_keys($dirMappings));

        $parser
            ->setDescription('Exports custom app and plugin code with relative paths.')
            ->addOption('separate', [
                'help' => 'Create a separate file for each specified directory type.',
                'boolean' => true,
            ])
            ->addOption('directories', [
                'help' => 'Comma-separated list of directory types to export. Available: '
                    . $availableDirKeys . '. Defaults to: ' . self::DEFAULT_DIRECTORIES,
                'short' => 'd',
                'default' => self::DEFAULT_DIRECTORIES,
            ])
            ->addOption('extensions', [
                'help' => 'Comma-separated list of file extensions to include (e.g., php,ctp,js,css). Defaults to: '
                    . self::DEFAULT_EXTENSIONS,
                'short' => 'e',
                'default' => self::DEFAULT_EXTENSIONS,
            ]);

        return $parser;
    }

    /**
     * Execute the command.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console io.
     * @return int The exit code.
     */
    public function execute(Arguments $args, ConsoleIo $io): int
    {
        $rootDir = ROOT;
        $outputBaseFilename = $rootDir . DS . self::OUTPUT_FILENAME_BASE;

        $directoryTypeMappings = $this->getDirectoryTypeMappings();

        $selectedDirKeysInput = $args->getOption('directories');
        $selectedDirKeys = $selectedDirKeysInput ? array_map(
            'trim',
            explode(',', $selectedDirKeysInput),
        ) : array_keys($directoryTypeMappings);

        $allowedExtensionsInput = $args->getOption('extensions');
        $allowedExtensions = array_map('trim', explode(',', strtolower($allowedExtensionsInput)));

        $separateFiles = (bool)$args->getOption('separate');
        $mainHandle = null;

        if (!$separateFiles) {
            $mainOutputFile = $outputBaseFilename . '.txt';
            $mainHandle = fopen($mainOutputFile, 'w');
            if (!$mainHandle) {
                $io->error(sprintf('Failed to open main output file for writing: %s', $mainOutputFile));

                return static::CODE_ERROR;
            }
            $this->writeMetadata($mainHandle);
        }

        foreach ($selectedDirKeys as $dirKey) {
            if (!isset($directoryTypeMappings[$dirKey])) {
                $io->warning(sprintf("Unknown directory type '%s' skipped.", $dirKey));
                continue;
            }

            $mapping = $directoryTypeMappings[$dirKey];
            $pathsToScan = [];

            // 1. Add application path
            $appPath = $rootDir . DS . $mapping['app'];
            if (is_dir($appPath)) {
                $pathsToScan[] = $appPath;
            } else {
                $io->verbose(sprintf("Application path for '%s' not found: %s", $dirKey, $appPath));
            }

            // 2. Add plugin paths
            $pluginsRootDir = $rootDir . DS . 'plugins';
            if (is_dir($pluginsRootDir) && !empty($mapping['plugin'])) { // Ensure plugin mapping exists
                try {
                    $pluginIterator = new DirectoryIterator($pluginsRootDir);
                    foreach ($pluginIterator as $pluginDirInfo) {
                        if ($pluginDirInfo->isDir() && !$pluginDirInfo->isDot()) {
                            $pluginName = $pluginDirInfo->getFilename();
                            $pluginSpecificPath = $pluginsRootDir . DS . $pluginName . DS . $mapping['plugin'];
                            if (is_dir($pluginSpecificPath)) {
                                $pathsToScan[] = $pluginSpecificPath;
                            } else {
                                 $io->verbose(sprintf(
                                     "Plugin path for '%s' in plugin '%s' not found: %s",
                                     $dirKey,
                                     $pluginName,
                                     $pluginSpecificPath,
                                 ));
                            }
                        }
                    }
                } catch (Exception $e) {
                    $io->warning(sprintf(
                        "Could not iterate plugins directory '%s': %s",
                        $pluginsRootDir,
                        $e->getMessage(),
                    ));
                }
            }

            if (empty($pathsToScan)) {
                $io->info(sprintf("No valid source directories found for type '%s'. Skipping.", $dirKey));
                continue;
            }

            $currentHandle = $mainHandle;
            if ($separateFiles) {
                $separateOutputFile = $outputBaseFilename . '_' . str_replace(DS, '_', $dirKey) . '.txt';
                $currentHandle = fopen($separateOutputFile, 'w');
                if (!$currentHandle) {
                    $io->error(sprintf('Failed to open separate output file for writing: %s', $separateOutputFile));
                    continue;
                }
                $this->writeMetadata($currentHandle);
            }

            if (!$currentHandle) {
                $io->error("No valid file handle for writing. This shouldn't happen.");

                return static::CODE_ERROR;
            }

            $this->writeSectionHeader($currentHandle, $dirKey);
            $filesExportedForThisKey = 0;

            foreach ($pathsToScan as $scanPath) {
                $io->verbose(sprintf("Scanning directory: %s for type '%s'", str_replace($rootDir .
                DS, '', $scanPath), $dirKey));
                try {
                    $iterator = new RecursiveIteratorIterator(
                        new RecursiveDirectoryIterator($scanPath, RecursiveDirectoryIterator::SKIP_DOTS |
                        RecursiveDirectoryIterator::FOLLOW_SYMLINKS),
                        RecursiveIteratorIterator::SELF_FIRST,
                    );

                    foreach ($iterator as $file) {
                        /** @var \SplFileInfo $file */
                        if ($file->isFile()) {
                            $fileExtension = strtolower($file->getExtension());
                            if (!in_array($fileExtension, $allowedExtensions, true)) {
                                continue;
                            }

                           // Skip minified JS/CSS files (check basename without extension)
                            if (
                                in_array($fileExtension, ['js', 'css'], true) && preg_match(
                                    '/\.min$/i',
                                    $file->getBasename('.' . $fileExtension),
                                )
                            ) {
                                $io->verbose(sprintf('Skipping minified file: %s', $file->getPathname()));
                                continue;
                            }

                           // Skip vendor directories within webroot (e.g., webroot/vendor/some_lib)
                           // or generally any path containing '/vendor/' if not desired
                            if (strpos($file->getPathname(), DS . 'vendor' . DS) !== false) {
                                $io->verbose(sprintf('Skipping vendor file: %s', $file->getPathname()));
                                continue;
                            }

                            $this->writeFileContent($currentHandle, $file, $rootDir);
                            $filesExportedForThisKey++;
                        }
                    }
                } catch (Exception $e) {
                    $io->warning(sprintf("Error scanning directory '%s': %s", $scanPath, $e->getMessage()));
                }
            }

            if ($filesExportedForThisKey === 0) {
                fwrite($currentHandle, "No files found matching criteria for this section.\n");
            }

            $this->writeSectionFooter($currentHandle, $dirKey);

            if ($separateFiles && $currentHandle) {
                fclose($currentHandle);
                $io->info(sprintf("Exported '%s' to separate file.", $dirKey));
            }
        }

        if ($mainHandle) {
            fclose($mainHandle);
            $io->success(sprintf('Code exported successfully to %s', $outputBaseFilename . '.txt'));
        } elseif ($separateFiles) {
            $io->success('Code exported successfully to separate files in the project root, prefixed with ' .
            self::OUTPUT_FILENAME_BASE . '_');
        } else {
            $io->warning('No code was exported. Check configurations or verbose output if no types were selected.');
        }

        return static::CODE_SUCCESS;
    }

    /**
     * Write metadata to the output file.
     *
     * @param resource $handle The file handle to write to.
     * @return void
     */
    protected function writeMetadata($handle): void
    {
        if (!$handle) {
            return;
        }
        $metadata = [
            'Export Date' => date('Y-m-d H:i:s'),
            'CakePHP Version' => Configure::version(),
            'PHP Version' => phpversion(),
        ];

        fwrite($handle, "METADATA:\n");
        foreach ($metadata as $key => $value) {
            fwrite($handle, "{$key}: {$value}\n");
        }
        fwrite($handle, "\n" . str_repeat('=', 80) . "\n\n");
    }

    /**
     * Write a section header to the output file.
     *
     * @param resource $handle The file handle to write to.
     * @param string $sectionName The name of the section.
     * @return void
     */
    protected function writeSectionHeader($handle, string $sectionName): void
    {
        if (!$handle) {
            return;
        }
        fwrite($handle, "\n\n" . str_repeat('=', 80) . "\n");
        fwrite($handle, "BEGIN SECTION: {$sectionName}\n");
        fwrite($handle, str_repeat('=', 80) . "\n\n");
    }

    /**
     * Write a section footer to the output file.
     *
     * @param resource $handle The file handle to write to.
     * @param string $sectionName The name of the section.
     * @return void
     */
    protected function writeSectionFooter($handle, string $sectionName): void
    {
        if (!$handle) {
            return;
        }
        fwrite($handle, "\n\n" . str_repeat('=', 80) . "\n");
        fwrite($handle, "END SECTION: {$sectionName}\n");
        fwrite($handle, str_repeat('=', 80) . "\n\n");
    }

    /**
     * Write the content of a file to the output file.
     *
     * @param resource $handle The file handle to write to.
     * @param \SplFileInfo $file The file information.
     * @param string $rootDir The root directory path.
     * @return void
     */
    protected function writeFileContent($handle, SplFileInfo $file, string $rootDir): void
    {
        if (!$handle) {
            return;
        }
        $relativePath = str_replace($rootDir . DS, '', $file->getPathname());
        $content = file_get_contents($file->getPathname());
        if ($content === false) {
            $io = new ConsoleIo(); // Temporary IO for error, not ideal but better than nothing
            $io->warning(sprintf('Could not read content of file: %s', $file->getPathname()));
            $content = "[Error: Could not read file content for {$relativePath}]";
        }

        fwrite($handle, "FILE: {$relativePath}\n");
        fwrite($handle, 'LAST MODIFIED: ' . date('Y-m-d H:i:s', (int)$file->getMTime()) . "\n");
        fwrite($handle, 'SIZE: ' . $file->getSize() . " bytes\n");
        fwrite($handle, "CONTENT:\n");
        fwrite($handle, $content);
        fwrite($handle, "\n\n// ----- END FILE: {$relativePath} -----\n\n");
    }
}


// ----- END FILE: src/Command/ExportCodeCommand.php -----

FILE: src/Command/InvestigateArticleCommand.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 9697 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;
use Cake\ORM\TableRegistry;
use Exception;

/**
 * InvestigateArticle command to debug translation and SEO issues.
 *
 * This command provides comprehensive debugging information for articles that may have
 * translation or SEO generation issues. It checks multiple data sources to help identify
 * why AI jobs might have failed or not been triggered.
 *
 * ## Usage Examples:
 *
 * ```bash
 * # Basic usage - investigate a specific article
 * bin/cake investigate_article my-article-slug
 *
 * # Using Docker (recommended for development)
 * docker compose exec willowcms bin/cake investigate_article my-article-slug
 * ```
 *
 * ## What This Command Checks:
 *
 * 1. **Article Basic Info**: Verifies the article exists and shows core metadata
 * 2. **Translation Status**: Checks if translations exist in articles_translations table
 * 3. **Translation Logs**: Searches system_logs for translation job activities and errors
 * 4. **SEO Logs**: Searches system_logs for SEO generation job activities and errors
 * 5. **Queue Jobs**: Checks for pending or failed queue jobs related to the article
 *
 * ## Common Issues This Helps Diagnose:
 *
 * - Articles not appearing in other languages (translation missing)
 * - Empty SEO fields (meta_title, meta_description, etc.)
 * - AI jobs that were queued but never completed
 * - Failed API calls to Anthropic or Google Translate
 * - Queue worker not running when article was published
 *
 * ## Prerequisites:
 *
 * - Queue worker should be running: `bin/cake queue worker --verbose`
 * - AI settings must be enabled in admin area
 * - Valid API keys for Anthropic and/or Google Translate
 *
 * @since 1.0.0
 */
class InvestigateArticleCommand extends Command
{
    /**
     * Hook method for defining this command's option parser.
     *
     * Configures the command to accept a required 'slug' argument which identifies
     * the article to investigate. The slug is the URL-friendly identifier used
     * in article URLs (e.g., 'my-article-title' from '/en/articles/my-article-title').
     *
     * @param \Cake\Console\ConsoleOptionParser $parser The parser to be defined
     * @return \Cake\Console\ConsoleOptionParser The built parser.
     */
    public function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $parser
            ->setDescription('Investigate article translation and SEO generation issues')
            ->addArgument('slug', [
                'help' => 'The slug of the article to investigate',
                'required' => true,
            ]);

        return $parser;
    }

    /**
     * Execute the investigation command.
     *
     * Performs a comprehensive analysis of an article's AI processing status by:
     * 1. Locating the article by slug
     * 2. Checking for existing translations in all configured locales
     * 3. Reviewing system logs for translation job activity and errors
     * 4. Reviewing system logs for SEO generation job activity and errors
     * 5. Checking queue_jobs table for pending/failed jobs
     *
     * ## Output Sections:
     * - **ARTICLE FOUND**: Basic article metadata and verification
     * - **EXISTING TRANSLATIONS**: Shows translations in articles_translations table
     * - **SYSTEM LOGS (Translation related)**: Recent logs containing translation keywords
     * - **SYSTEM LOGS (SEO related)**: Recent logs containing SEO generation keywords
     * - **PENDING QUEUE JOBS**: Active/failed jobs in the queue system
     *
     * ## Return Codes:
     * - `Command::CODE_SUCCESS` (0): Investigation completed successfully
     * - `Command::CODE_ERROR` (1): Article not found or exception occurred
     *
     * @param \Cake\Console\Arguments $args The command arguments containing the article slug
     * @param \Cake\Console\ConsoleIo $io Console I/O for output formatting and display
     * @return int The exit code indicating success or failure
     */
    public function execute(Arguments $args, ConsoleIo $io): ?int
    {
        $slug = $args->getArgument('slug');

        $io->out("Investigating article with slug: $slug");
        $io->hr();

        try {
            // 1. Find the article by slug
            $articles = TableRegistry::getTableLocator()->get('Articles');
            $article = $articles->find()->where(['slug' => $slug])->first();

            if (!$article) {
                $io->error("Article with slug '$slug' not found");

                return static::CODE_ERROR;
            }

            $io->out('=== ARTICLE FOUND ===');
            $io->out('ID: ' . $article->id);
            $io->out('Title: ' . $article->title);
            $io->out('Slug: ' . $article->slug);
            $io->out('Locale: ' . $article->locale);
            $io->out('Created: ' . $article->created);
            $io->out('Modified: ' . $article->modified);
            $io->out('');

            // 2. Check for translations in articles_translations table
            // Note: Uses TranslateBehavior structure where translations are stored separately
            $translations = TableRegistry::getTableLocator()->get('ArticlesTranslations');
            $existingTranslations = $translations->find()
                ->where(['id' => $article->id])
                ->toArray();

            $io->out('=== EXISTING TRANSLATIONS ===');
            if (empty($existingTranslations)) {
                $io->out('No translations found');
            } else {
                foreach ($existingTranslations as $translation) {
                    $io->out('Locale: ' . $translation->locale);
                    $io->out('Field: ' . $translation->field);
                    $io->out('Content: ' . substr($translation->content, 0, 100) . '...');
                    $io->out('---');
                }
            }
            $io->out('');

            // 3. Search system logs for translation-related activities and errors
            // This includes job queuing, processing, completion, and failure logs
            $systemLogs = TableRegistry::getTableLocator()->get('SystemLogs');
            $translationErrors = $systemLogs->find()
                ->where([
                    'OR' => [
                        'message LIKE' => '%TranslateArticleJob%',
                        'message LIKE' => '%translation%',
                        'message LIKE' => '%' . $article->id . '%',
                    ],
                ])
                ->orderByDesc('created')
                ->limit(10)
                ->toArray();

            $io->out('=== SYSTEM LOGS (Translation related) ===');
            if (empty($translationErrors)) {
                $io->out('No translation-related log entries found');
            } else {
                foreach ($translationErrors as $log) {
                    $io->out('Time: ' . $log->created);
                    $io->out('Level: ' . $log->level);
                    $io->out('Message: ' . $log->message);
                    $io->out('---');
                }
            }
            $io->out('');

            // 4. Search system logs for SEO generation activities and errors
            // Includes ArticleSeoUpdateJob processing and AI-powered SEO content generation
            $seoErrors = $systemLogs->find()
                ->where([
                    'OR' => [
                        'message LIKE' => '%ArticleSeoUpdateJob%',
                        'message LIKE' => '%SEO%',
                        'message LIKE' => '%seo%',
                    ],
                ])
                ->orderByDesc('created')
                ->limit(10)
                ->toArray();

            $io->out('=== SYSTEM LOGS (SEO related) ===');
            if (empty($seoErrors)) {
                $io->out('No SEO-related log entries found');
            } else {
                foreach ($seoErrors as $log) {
                    $io->out('Time: ' . $log->created);
                    $io->out('Level: ' . $log->level);
                    $io->out('Message: ' . $log->message);
                    $io->out('---');
                }
            }
            $io->out('');

            // 5. Check queue_jobs table for pending, processing, or failed jobs
            // This helps identify if jobs are stuck in the queue or failed to process
            $connection = $articles->getConnection();
            $queueJobs = $connection->execute(
                'SELECT * FROM queue_jobs WHERE payload LIKE ? OR payload LIKE ? ORDER BY created DESC LIMIT 10',
                ['%' . $article->id . '%', '%TranslateArticleJob%'],
            )->fetchAll();

            $io->out('=== PENDING QUEUE JOBS ===');
            if (empty($queueJobs)) {
                $io->out('No pending queue jobs found for this article');
            } else {
                foreach ($queueJobs as $job) {
                    $io->out('ID: ' . $job['id']);
                    $io->out('Status: ' . $job['status']);
                    $io->out('Queue: ' . $job['queue']);
                    $io->out('Job Type: ' . $job['job_type']);
                    $io->out('Created: ' . $job['created']);
                    $io->out('Payload excerpt: ' . substr($job['payload'], 0, 200) . '...');
                    $io->out('---');
                }
            }

            return static::CODE_SUCCESS;
        } catch (Exception $e) {
            $io->error('Error: ' . $e->getMessage());
            $io->error('Trace: ' . $e->getTraceAsString());

            return static::CODE_ERROR;
        }
    }
}


// ----- END FILE: src/Command/InvestigateArticleCommand.php -----

FILE: src/Command/GenerateArticlesCommand.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 9557 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use App\Model\Entity\Article;
use App\Model\Table\ArticlesTable;
use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;
use Cake\I18n\DateTime;
use Cake\ORM\TableRegistry;
use RuntimeException;

/**
 * GenerateArticles command.
 */
class GenerateArticlesCommand extends Command
{
    /**
     * @var string UUID of the admin user
     */
    private string $adminUserId;

    /**
     * @var \App\Model\Table\ArticlesTable
     */
    private ArticlesTable $Articles;

    /**
     * Initialize method
     *
     * @return void
     */
    public function initialize(): void
    {
        parent::initialize();
        $this->Articles = TableRegistry::getTableLocator()->get('Articles');
        $this->loadAdminUser();
    }

    /**
     * Build option parser method.
     *
     * @param \Cake\Console\ConsoleOptionParser $parser The parser to be defined
     * @return \Cake\Console\ConsoleOptionParser The built parser.
     */
    protected function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $parser->addArgument('count', [
            'help' => __('Number of articles to generate'),
            'required' => true,
        ])->addOption('delete', [
            'help' => __('Delete all articles before generating new ones'),
            'boolean' => true,
        ]);

        return $parser;
    }

    /**
     * Execute the command
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console io
     * @return int|null The exit code or null for success
     */
    public function execute(Arguments $args, ConsoleIo $io): ?int
    {
        if ($args->getOption('delete')) {
            $this->Articles->deleteAll([]);
            $io->out(__('All articles have been deleted.'));
        }

        // Check and create top-level tags if needed
        $this->ensureTopLevelTags($io);

        $count = (int)$args->getArgument('count');
        $io->out(__('Generating {0} articles...', $count));

        $successCount = 0;
        $failCount = 0;

        for ($i = 0; $i < $count; $i++) {
            $article = $this->generateArticle();

            $publishedDate = $article->published;

            if ($this->Articles->save($article, ['associated' => ['Tags']])) {
                $article->punlished = $publishedDate;
                $this->Articles->save($article);
                $io->out(__('Generated article: {0}', $article->title));
                $successCount++;
            } else {
                $io->error(__('Failed to generate article: {0}', $article->title));
                $errors = $article->getErrors();
                foreach ($errors as $field => $fieldErrors) {
                    foreach ($fieldErrors as $error) {
                        $io->error(__('Error in {0}: {1}', $field, $error));
                    }
                }
                $failCount++;
            }
        }

        $io->success(__('Generated {0} articles successfully.', $successCount));
        if ($failCount > 0) {
            $io->warning(__('Failed to generate {0} articles.', $failCount));
        }

        return static::CODE_SUCCESS;
    }

    /**
     * Ensures there are at least 10 top-level tags in the system
     *
     * @param \Cake\Console\ConsoleIo $io The console IO object
     * @return void
     */
    private function ensureTopLevelTags(ConsoleIo $io): void
    {
        $tagsTable = TableRegistry::getTableLocator()->get('Tags');

        // Count existing top-level tags
        $existingCount = $tagsTable->find()
            ->where(['parent_id IS' => null])
            ->count();

        if ($existingCount >= 10) {
            return;
        }

        $tagsToCreate = 10 - $existingCount;
        $io->out(__('Creating {0} new top-level tags...', $tagsToCreate));

        for ($i = 0; $i < $tagsToCreate; $i++) {
            $tag = $tagsTable->newEmptyEntity();

            // Generate a single word for name (max 10 characters)
            $tag->title = substr($this->generateRandomText(10), 0, 10);

            // Generate description (max 10 words)
            $tag->description = $this->generateRandomText(10, true);

            if ($tagsTable->save($tag)) {
                $io->out(__('Created tag: {0}', $tag->name));
            } else {
                $io->error(__('Failed to create tag: {0}', $tag->name));
                $errors = $tag->getErrors();
                foreach ($errors as $field => $fieldErrors) {
                    foreach ($fieldErrors as $error) {
                        $io->error(__('Error in {0}: {1}', $field, $error));
                    }
                }
            }
        }
    }

    /**
     * Generate a single article with random tags
     *
     * @return \App\Model\Entity\Article
     */
    private function generateArticle(): Article
    {
        // Generate shorter content to ensure it fits database constraints
        $title = $this->generateRandomText(100);
        $lede = $this->generateRandomText(200);
        $summary = $this->generateRandomText(50, true);
        $body = $this->generateRandomText(200, true);

        // Generate a random date between 2000 and now
        $year = rand(2000, (int)date('Y'));
        $month = str_pad((string)rand(1, 12), 2, '0', STR_PAD_LEFT);
        $day = str_pad((string)rand(1, 28), 2, '0', STR_PAD_LEFT);
        $hour = str_pad((string)rand(0, 23), 2, '0', STR_PAD_LEFT);
        $minute = str_pad((string)rand(0, 59), 2, '0', STR_PAD_LEFT);
        $second = str_pad((string)rand(0, 59), 2, '0', STR_PAD_LEFT);

        $publishedDate = new DateTime("{$year}-{$month}-{$day} {$hour}:{$minute}:{$second}");

        // Create new article entity
        $article = $this->Articles->newEmptyEntity();
        $article->title = $title;
        $article->lede = $lede;
        $article->summary = $summary;
        $article->body = $body;
        $article->slug = ''; // Will be auto-generated
        $article->user_id = $this->adminUserId;
        $article->kind = 'article';
        $article->is_published = true;
        $article->published = $publishedDate;

        // Get all available tags
        $tagsTable = TableRegistry::getTableLocator()->get('Tags');
        $allTags = $tagsTable->find()
            ->select(['id', 'title'])
            ->toArray();

        if (!empty($allTags)) {
            // Randomly select between 1 and 3 tags
            $numTags = min(rand(1, 3), count($allTags));
            $selectedIndices = array_rand($allTags, $numTags);

            // Convert to array if only one tag selected
            if (!is_array($selectedIndices)) {
                $selectedIndices = [$selectedIndices];
            }

            // Create array of tag entities
            $tags = [];
            foreach ($selectedIndices as $index) {
                $tags[] = $allTags[$index];
            }

            // Set the tags
            $article->tags = $tags;
        }

        return $article;
    }

    /**
     * Generate random text
     *
     * @param int $maxLength Maximum length of the text
     * @param bool $isWordCount Whether the length is in words
     * @return string Random text
     */
    private function generateRandomText(int $maxLength, bool $isWordCount = false): string
    {
        if ($isWordCount) {
            // Generate by word count
            $words = [];
            for ($i = 0; $i < $maxLength; $i++) {
                $wordLength = rand(3, 10);
                $word = '';
                for ($j = 0; $j < $wordLength; $j++) {
                    $word .= chr(rand(97, 122));
                }
                $words[] = $word;
            }

            return implode(' ', $words);
        }

        // Generate by character count
        $text = '';
        $currentLength = 0;

        while ($currentLength < $maxLength) {
            // Calculate remaining space
            $remainingSpace = $maxLength - $currentLength;

            // If we have very limited space left, just add a few characters
            if ($remainingSpace <= 4) {
                $text .= substr(str_shuffle('abcdefghijklmnopqrstuvwxyz'), 0, $remainingSpace);
                break;
            }

            // Generate a word that will fit in remaining space (including a space character)
            $maxWordLength = min(10, $remainingSpace - 1);
            $wordLength = rand(3, $maxWordLength);
            $word = '';
            for ($j = 0; $j < $wordLength; $j++) {
                $word .= chr(rand(97, 122));
            }

            // Add word and space if it fits
            if (strlen($text . $word . ' ') <= $maxLength) {
                $text .= $word . ' ';
                $currentLength = strlen($text);
            } else {
                break;
            }
        }

        return trim($text);
    }

    /**
     * Load admin user ID
     *
     * @throws \RuntimeException When no admin user is found
     * @return void
     */
    private function loadAdminUser(): void
    {
        $usersTable = TableRegistry::getTableLocator()->get('Users');
        $adminUser = $usersTable->find()
            ->select(['id'])
            ->where(['is_admin' => true])
            ->first();

        if ($adminUser) {
            $this->adminUserId = $adminUser->id;
        } else {
            throw new RuntimeException(__('No admin user found.'));
        }
    }
}


// ----- END FILE: src/Command/GenerateArticlesCommand.php -----

FILE: src/Command/DefaultDataImportCommand.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 13698 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;
use Cake\Database\Connection;
// Keep for potential direct connection use if needed elsewhere
use Cake\ORM\Exception\MissingTableClassException;
use Cake\ORM\TableRegistry;
use Cake\Utility\Inflector;
use Exception; // General exceptions

/**
 * DefaultDataImportCommand
 *
 * This command allows importing data from JSON files in the specified input directory
 * into database tables. It can import data for a specific table, all tables found
 * as .json files, or allow interactive selection.
 * For each table, existing data is deleted before new data is inserted, wrapped in a transaction.
 * Can optionally disable MySQL foreign key checks during import.
 */
class DefaultDataImportCommand extends Command
{
    /**
     * Configures the option parser for the command.
     *
     * @param \Cake\Console\ConsoleOptionParser $parser The option parser to configure.
     * @return \Cake\Console\ConsoleOptionParser The configured option parser.
     */
    protected function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $parser
            ->setDescription('Imports default data from JSON files into specified tables (MySQL focused).')
            ->addArgument('table', [
                'help' => 'The specific table (PascalCase, e.g., Users) to 
                    import data for. The file name is inferred (e.g., users.json).',
                'required' => false,
            ])
            ->addOption('input', [
                'short' => 'i',
                'help' => 'Input directory containing the JSON files.',
                'default' => ROOT . DS . 'default_data',
            ])
            ->addOption('all', [
                'short' => 'a',
                'help' => 'Import data from all JSON files found in the input directory.',
                'boolean' => true,
            ])
            ->addOption('disable-fk-checks', [
                'help' => 'Temporarily disable MySQL foreign key checks during import.',
                'boolean' => true,
                'default' => false,
            ]);

        return $parser;
    }

    /**
     * Executes the command to import data.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console io object.
     * @return int The exit code of the command.
     */
    public function execute(Arguments $args, ConsoleIo $io): int
    {
        $inputDir = (string)$args->getOption('input');
        $specificTableArg = $args->getArgument('table');
        $importAll = (bool)$args->getOption('all');
        $disableFkChecks = (bool)$args->getOption('disable-fk-checks');

        if (!is_dir($inputDir)) {
            if (!mkdir($inputDir, 0755, true) && !is_dir($inputDir)) {
                $io->error(sprintf('Input directory "%s" does not exist and could not be created.', $inputDir));

                return Command::CODE_ERROR;
            }
            $io->info(sprintf('Input directory "%s" created.', $inputDir));
        }

        $filesToProcess = [];

        if ($specificTableArg !== null) {
            $baseFileName = Inflector::underscore($specificTableArg);
            $filePath = $inputDir . DS . $baseFileName . '.json';

            if (!file_exists($filePath)) {
                $io->error(sprintf('No JSON file found for table "%s" (expected: %s).', $specificTableArg, $filePath));

                return Command::CODE_ERROR;
            }
            $filesToProcess[] = $filePath;
        } else {
            $jsonFilesInDir = glob($inputDir . DS . '*.json');
            if ($jsonFilesInDir === false || empty($jsonFilesInDir)) {
                $io->warning(sprintf('No JSON files found in the directory: %s', $inputDir));

                return Command::CODE_SUCCESS;
            }

            if ($importAll) {
                $filesToProcess = $jsonFilesInDir;
            } else {
                $io->out('Available data files:');
                foreach ($jsonFilesInDir as $index => $file) {
                    $io->out(sprintf('[%d] %s', $index + 1, basename($file)));
                }

                $choiceStr = $io->ask('Choose a file to import by number:');
                if (!ctype_digit($choiceStr)) {
                    $io->error('Invalid input. Please enter a number. Exiting.');

                    return Command::CODE_ERROR;
                }
                $choiceIndex = (int)$choiceStr - 1;

                if (!isset($jsonFilesInDir[$choiceIndex])) {
                    $io->error('Invalid choice. Exiting.');

                    return Command::CODE_ERROR;
                }
                $filesToProcess[] = $jsonFilesInDir[$choiceIndex];
            }
        }

        if (empty($filesToProcess)) {
            $io->info('No files selected or found for import.');

            return Command::CODE_SUCCESS;
        }

        $successfulImports = 0;
        $failedImports = 0;

        foreach ($filesToProcess as $filePath) {
            $baseFileName = basename($filePath, '.json');
            if ($this->importTableData($baseFileName, $inputDir, $io, $disableFkChecks)) {
                $successfulImports++;
            } else {
                $failedImports++;
            }
        }

        if ($successfulImports > 0) {
            $io->success(sprintf('Successfully imported data from %d file(s).', $successfulImports));
        }
        if ($failedImports > 0) {
            $io->error(sprintf('Failed to import data from %d file(s). Check messages above.', $failedImports));

            return Command::CODE_ERROR;
        }

        if ($successfulImports === 0 && $failedImports === 0) {
            $io->info('No data was imported.');
        }

        return Command::CODE_SUCCESS;
    }

    /**
     * Imports data from a JSON file into the specified table.
     *
     * @param string $baseFileName The base name of the JSON file (e.g., 'users', 'user_permissions').
     * @param string $inputDir The directory containing the JSON files.
     * @param \Cake\Console\ConsoleIo $io The console io object.
     * @param bool $disableFkChecks Whether to temporarily disable MySQL foreign key checks.
     * @return bool True on success, false on failure.
     */
    protected function importTableData(
        string $baseFileName,
        string $inputDir,
        ConsoleIo $io,
        bool $disableFkChecks = false,
    ): bool {
        $tableAlias = Inflector::camelize($baseFileName);
        $inputFile = $inputDir . DS . $baseFileName . '.json';

        $io->out(sprintf('Processing import for table "%s" from file "%s"...', $tableAlias, $baseFileName . '.json'));

        if (!file_exists($inputFile)) {
            $io->error(sprintf('Input file not found: %s', $inputFile));

            return false;
        }

        try {
            $table = TableRegistry::getTableLocator()->get($tableAlias);
        } catch (MissingTableClassException $e) {
            $io->error(
                sprintf(
                    'Table class for "%s" (derived from file "%s.json") could not be found. Error: %s',
                    $tableAlias,
                    $baseFileName,
                    $e->getMessage(),
                ),
            );

            return false;
        }

        $jsonContent = file_get_contents($inputFile);
        if ($jsonContent === false) {
            $io->error(sprintf('Could not read file content from: %s', $inputFile));

            return false;
        }

        $data = json_decode($jsonContent, true);

        if ($data === null && json_last_error() !== JSON_ERROR_NONE) {
            $io->error(sprintf('Failed to decode JSON from file: %s. Error: %s', $inputFile, json_last_error_msg()));

            return false;
        }

        if (empty($data) && $jsonContent !== '[]' && $jsonContent !== '{}') {
            $io->warning(
                sprintf(
                    'No data to import from %s, or JSON content was not a valid array of records.',
                    $inputFile,
                ),
            );

            return true;
        }
        if (empty($data) && ($jsonContent === '[]' || $jsonContent === '{}')) {
            $io->info(
                sprintf(
                    'File %s contains an empty JSON array/object. No records to import for table %s.',
                    $inputFile,
                    $tableAlias,
                ),
            );

            return true;
        }

        $connection = $table->getConnection();

        try {
            if ($disableFkChecks) {
                $this->toggleMySqlForeignKeyChecks($connection, false, $io);
            }

            $connection->begin();
            $io->info(sprintf('Attempting to delete existing records from table: %s', $tableAlias));
            $deleteResult = $table->deleteAll([]);
            if ($deleteResult === false) {
                throw new Exception(
                    sprintf(
                        'Failed to delete existing records from table: %s. An error occurred.',
                        $tableAlias,
                    ),
                );
            }
            $io->out(sprintf('Deleted %d existing record(s) from table: %s', $deleteResult, $tableAlias));

            $importedCount = 0;
            foreach ($data as $rowIndex => $row) {
                $entity = $table->newEntity($row);

                if ($tableAlias === 'Settings' && isset($entity->value_type) && property_exists($entity, 'value')) {
                    switch ($entity->value_type) {
                        case 'text':
                        case 'string':
                            $entity->value = (string)$entity->value;
                            break;
                        case 'numeric':
                        case 'integer':
                            $entity->value = (int)$entity->value;
                            break;
                        case 'bool':
                        case 'boolean':
                            if (is_string($entity->value) && strtolower($entity->value) === 'false') {
                                $entity->value = false;
                            } elseif (is_string($entity->value) && $entity->value === '0') {
                                $entity->value = false;
                            } else {
                                $entity->value = (bool)$entity->value;
                            }
                            break;
                        case 'float':
                            $entity->value = (float)$entity->value;
                            break;
                    }
                }

                // Optionally skip ORM-level rule checks if data is known to be valid
                if (!$table->save($entity, ['checkRules' => false, 'checkExisting' => false])) {
                    throw new Exception(sprintf(
                        'Failed to save entity for table %s (row %d). Errors: %s',
                        $tableAlias,
                        $rowIndex,
                        json_encode($entity->getErrors()),
                    ));
                }
                $importedCount++;
            }

            $connection->commit();
            $io->success(sprintf('Successfully imported %d record(s) into table: %s', $importedCount, $tableAlias));

            return true;
        } catch (Exception $e) {
            if ($connection->inTransaction()) {
                $connection->rollback();
            }
            $io->error(sprintf(
                'Error importing data for table %s: %s. Transaction rolled back.',
                $tableAlias,
                $e->getMessage(),
            ));

            return false;
        } finally {
            // ALWAYS re-enable FK checks if they were disabled
            if ($disableFkChecks) {
                $this->toggleMySqlForeignKeyChecks($connection, true, $io);
            }
        }
    }

    /**
     * Helper method to toggle MySQL foreign key checks.
     *
     * @param \Cake\Database\Connection $connection The database connection.
     * @param bool $enable True to enable, false to disable.
     * @param \Cake\Console\ConsoleIo $io The console io object.
     * @return void
     */
    protected function toggleMySqlForeignKeyChecks(
        Connection $connection,
        bool $enable,
        ConsoleIo $io,
    ): void {
        $action = $enable ? 'Enabling' : 'Disabling';
        $mode = $enable ? '1' : '0';
        $io->info(sprintf('%s MySQL foreign key checks...', $action));
        try {
            $connection->execute('SET FOREIGN_KEY_CHECKS=' . $mode . ';');
            $io->info(sprintf('MySQL foreign key checks %s.', ($enable ? 'enabled' : 'disabled')));
        } catch (Exception $e) {
            $io->error(sprintf('Failed to %s MySQL foreign key checks: %s', strtolower($action), $e->getMessage()));
            // Attempt to revert to enabled state if disabling failed, or notify if enabling failed.
            if (!$enable) {
                $io->warning('Attempting to re-enable MySQL foreign key checks due to previous error...');
                try {
                    $connection->execute('SET FOREIGN_KEY_CHECKS=1;');
                    $io->info('MySQL foreign key checks re-enabled.');
                } catch (Exception $reEnableEx) {
                    $io->error('Critical: Failed to re-enable MySQL foreign key checks: ' . $reEnableEx->getMessage());
                }
            }
        }
    }
}


// ----- END FILE: src/Command/DefaultDataImportCommand.php -----

FILE: src/Command/TranslateI18nCommand.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 2741 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use App\Utility\I18nManager;
use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\ORM\TableRegistry;
use Cake\Queue\QueueManager;

/**
 * Class TranslateI18nCommand
 *
 * This command finds internationalisations with empty message_str and queues translation jobs in batches.
 */
class TranslateI18nCommand extends Command
{
    /**
     * Default batch size for processing.
     *
     * @var int
     */
    protected int $batchSize = 35; // Adjust this number based on your AI's capacity

    /**
     * Executes the command to queue translation jobs for empty internationalisations.
     *
     * @param \Cake\Console\Arguments $args The command line arguments.
     * @param \Cake\Console\ConsoleIo $io The console input/output.
     * @return void
     */
    public function execute(Arguments $args, ConsoleIo $io): void
    {
        $locales = I18nManager::$locales;

        // Fetch the I18n table
        $i18nTable = TableRegistry::getTableLocator()->get('internationalisations');

        foreach ($locales as $locale) {
            // Find all records with empty message_str for the current locale
            $emptyInternationalisations = $i18nTable->find()
                ->where(['message_str' => '', 'locale' => $locale])
                ->all();

            $batch = ['locale' => $locale, 'internationalisations' => []];
            foreach ($emptyInternationalisations as $internationalisation) {
                $batch['internationalisations'][] = $internationalisation->id;

                // If the batch size is reached, queue the batch and reset
                if (count($batch['internationalisations']) >= $this->batchSize) {
                    $this->queueBatch($batch, $io);
                    $batch = ['locale' => $locale, 'internationalisations' => []];
                }
            }

            // Queue any remaining messages in the last batch
            if (!empty($batch['internationalisations'])) {
                $this->queueBatch($batch, $io);
            }
        }
    }

    /**
     * Queues a batch of messages for translation.
     *
     * @param array $batch The batch of messages to queue.
     * @param \Cake\Console\ConsoleIo $io The console input/output.
     * @return void
     */
    protected function queueBatch(array $batch, ConsoleIo $io): void
    {
        // Queue a job to translate the batch of messages
        QueueManager::push('App\Job\TranslateI18nJob', $batch);
        $io->out(sprintf(
            'Queued translation job for batch of %d messages for locale %s',
            count($batch['internationalisations']),
            $batch['locale'],
        ));
    }
}


// ----- END FILE: src/Command/TranslateI18nCommand.php -----

FILE: src/Command/CreateUserCommand.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 9170 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;
use Cake\Datasource\EntityInterface;
use Cake\Log\LogTrait;
use Cake\ORM\Table; // Added for type hinting

/**
 * Command for creating a user or updating a user's password in the database.
 */
class CreateUserCommand extends Command
{
    use LogTrait;

    /**
     * Builds the option parser for the command.
     *
     * @param \Cake\Console\ConsoleOptionParser $parser The console option parser.
     * @return \Cake\Console\ConsoleOptionParser The configured console option parser.
     */
    protected function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $parser = parent::buildOptionParser($parser);

        $parser
            ->setDescription('Creates a user or updates an existing user\'s password.')
            ->addOption('update-password', [
                'help' => 'Flag to update password for existing user. If set, 
                    --email and --password are used to find and update.',
                'boolean' => true,
                'default' => false,
            ])
            ->addOption('username', [
                'short' => 'u',
                'help' => 'Username for the user (required for creation).',
                'default' => null,
                'required' => false, // Made false, will be validated in execute
            ])
            ->addOption('password', [
                'short' => 'p',
                'help' => 'Password for the user (or new password if updating). Required.',
                'default' => null,
                'required' => true, // Always required (for create or for new password in update)
            ])
            ->addOption('email', [
                'short' => 'e',
                'help' => 'Email for the user (used to find user if updating). Required.',
                'default' => null,
                'required' => true, // Always required (for create or to find user in update)
            ])
            ->addOption('is_admin', [
                'short' => 'a',
                'help' => 'Is the user an admin? (1 for true, 0 for false; required for creation).',
                'default' => null,
                'required' => false, // Made false, will be validated in execute
            ]);

        return $parser;
    }

    /**
     * Executes the command.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console I/O.
     * @return int The exit code.
     */
    public function execute(Arguments $args, ConsoleIo $io): int
    {
        $usersTable = $this->fetchTable('Users');

        if ($args->getOption('update-password')) {
            // Validate required args for update
            if (!$args->getOption('email') || !$args->getOption('password')) {
                $io->error('For password update, --email and --password (new password) are required.');
                $this->abort();
            }
            if ($this->updateUserPassword($args, $io, $usersTable)) {
                $io->success('User password updated successfully.');

                return static::CODE_SUCCESS;
            }
            $io->error('Failed to update user password.');

            return static::CODE_ERROR;
        } else {
            // Validate required args for create
            $missingCreateArgs = [];
            if (!$args->getOption('username')) {
                $missingCreateArgs[] = '--username';
            }
            if (!$args->getOption('password')) {
                $missingCreateArgs[] = '--password';
            }
            if (!$args->getOption('email')) {
                $missingCreateArgs[] = '--email';
            }
            if ($args->getOption('is_admin') === null) {
                $missingCreateArgs[] = '--is_admin';
            }

            if (!empty($missingCreateArgs)) {
                $io->error('For user creation, the following options are required: '
                . implode(', ', $missingCreateArgs));
                $this->abort();
            }

            if ($this->createUser($args, $io, $usersTable)) {
                $io->success('User created successfully.');

                return static::CODE_SUCCESS;
            }
            $io->error('Failed to create user.');

            return static::CODE_ERROR;
        }
    }

    /**
     * Creates a user with the provided arguments.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console I/O.
     * @param \Cake\ORM\Table $usersTable The users table.
     * @return bool True if the user was created successfully, false otherwise.
     */
    private function createUser(Arguments $args, ConsoleIo $io, Table $usersTable): bool
    {
        $data = [
            'username' => $args->getOption('username'),
            'password' => $args->getOption('password'),
            'confirm_password' => $args->getOption('password'),
            'email' => $args->getOption('email'),
            'is_admin' => in_array($args->getOption('is_admin'), ['1', 1, true], true), // flexible boolean check
            'active' => 1,
        ];

        $logData = $data;
        unset($logData['password']);

        $this->log(
            sprintf('Attempting to create user with data: %s', json_encode($logData)),
            'info',
            ['scope' => ['user_management', 'user_creation']],
        );

        $user = $usersTable->newEmptyEntity();
        // Allow mass assignment for these fields during creation
        $user->setAccess('is_admin', true);
        $user->setAccess('active', true);
        $user = $usersTable->patchEntity($user, $data);

        if ($usersTable->save($user)) {
            $this->log(
                sprintf('User created successfully: %s (ID: %s)', $user->username, $user->id),
                'info',
                ['scope' => ['user_management', 'user_creation']],
            );
            $io->out(sprintf('User "%s" created with ID: %s', $user->username, $user->id));

            return true;
        }

        $this->log(
            sprintf(
                'Failed to create user: %s. Errors: %s',
                $data['username'],
                json_encode($user->getErrors()),
            ),
            'error',
            ['scope' => ['user_management', 'user_creation']],
        );
        $io->error(sprintf('Could not create user. Errors: %s', json_encode($user->getErrors())));

        return false;
    }

    /**
     * Updates the password for an existing user found by email.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console I/O.
     * @param \Cake\ORM\Table $usersTable The users table.
     * @return bool True if the user password was updated successfully, false otherwise.
     */
    private function updateUserPassword(Arguments $args, ConsoleIo $io, Table $usersTable): bool
    {
        $email = $args->getOption('email');
        $newPassword = $args->getOption('password');

        $user = $usersTable->findByEmail($email)->first();

        if (!$user instanceof EntityInterface) { // Check if user was found
            $io->warning(sprintf('User with email "%s" not found.', $email));
            $this->log(
                sprintf('Password update failed: User with email "%s" not found.', $email),
                'warning',
                ['scope' => ['user_management', 'password_update']],
            );

            return false;
        }

        // Patch entity with the new password.
        // The User entity's setter for 'password' should handle hashing.
        $usersTable->patchEntity($user, ['password' => $newPassword]);

        // Ensure no other fields are accidentally changed if they were passed
        // (e.g. if username was passed, it shouldn't update username here)
        // For password update, we only care about the password field.
        // $user->set('password', $newPassword); // This is another way if you directly want to set it.
                                              // The patchEntity approach is fine if _setPassword handles hashing.

        if ($usersTable->save($user)) {
            $this->log(
                sprintf('Password updated successfully for user: %s (ID: %s)', $user->email, $user->id),
                'info',
                ['scope' => ['user_management', 'password_update']],
            );
            $io->out(sprintf('Password updated for user with email: %s', $email));

            return true;
        }

        $this->log(
            sprintf(
                'Failed to update password for user: %s. Errors: %s',
                $user->email,
                json_encode($user->getErrors()),
            ),
            'error',
            ['scope' => ['user_management', 'password_update']],
        );
        $io->error(sprintf('Could not update password. Errors: %s', json_encode($user->getErrors())));

        return false;
    }
}


// ----- END FILE: src/Command/CreateUserCommand.php -----

FILE: src/Command/TestRateLimitCommand.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3775 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;

/**
 * TestRateLimitCommand class
 *
 * This command is used to test rate limiting by making multiple requests to a specified URL.
 */
class TestRateLimitCommand extends Command
{
    /**
     * Build the option parser for the command.
     *
     * @param \Cake\Console\ConsoleOptionParser $parser The option parser to be defined.
     * @return \Cake\Console\ConsoleOptionParser The option parser instance.
     */
    protected function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $parser
            ->addOption('url', [
                'short' => 'u',
                'help' => 'URL to test (default: /en/users/login)',
                'default' => '/en/users/login',
            ])
            ->addOption('attempts', [
                'short' => 'a',
                'help' => 'Number of attempts (default: 10)',
                'default' => '10',
            ]);

        return $parser;
    }

    /**
     * Execute the command.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console io.
     * @return int|null The exit code or null for success.
     */
    public function execute(Arguments $args, ConsoleIo $io): ?int
    {
        $url = $args->getOption('url');
        $attempts = (int)$args->getOption('attempts');

        $baseUrl = $this->getBaseUrl();
        $fullUrl = $baseUrl . $url;

        $io->out(sprintf('Testing rate limit on URL: %s', $fullUrl));
        $io->out(sprintf('Number of attempts: %d', $attempts));
        $io->hr();

        for ($i = 0; $i < $attempts; $i++) {
            $ch = curl_init($fullUrl);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_TIMEOUT, 10);
            curl_setopt($ch, CURLOPT_FAILONERROR, true);

            // Set headers to simulate a browser request
            curl_setopt($ch, CURLOPT_HTTPHEADER, [
                'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 ' .
                    '(KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language: en-US,en;q=0.5',
                'Connection: keep-alive',
                'Upgrade-Insecure-Requests: 1',
                'X-Forwarded-For: ' . $this->generateRandomIp(),
            ]);

            $response = curl_exec($ch);

            if ($response === false) {
                $error = curl_error($ch);
                $errno = curl_errno($ch);
                $io->error(sprintf('Attempt %d failed. Error (%d): %s', $i + 1, $errno, $error));
            } else {
                $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                $io->out(sprintf('Attempt %d: HTTP Code: %d', $i + 1, $httpCode));
                $io->out(sprintf('Response: %s', substr($response, 0, 100) . '...'));
            }

            curl_close($ch);
            $io->hr();

            usleep(100000); // 0.1 second delay
        }

        return static::CODE_SUCCESS;
    }

    /**
     * Get the base URL for the requests.
     *
     * @return string The base URL.
     */
    private function getBaseUrl(): string
    {
        return 'http://willowcms:80';
    }

    /**
     * Generate a random IP address.
     *
     * @return string A randomly generated IP address.
     */
    private function generateRandomIp(): string
    {
        return mt_rand(1, 255) . '.' . mt_rand(0, 255) . '.' . mt_rand(0, 255) . '.' . mt_rand(0, 255);
    }
}


// ----- END FILE: src/Command/TestRateLimitCommand.php -----

FILE: src/Command/LoadDefault18nCommand.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4639 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\ORM\TableRegistry;
use Exception;

/**
 * Class LoadDefault18nCommand
 *
 * This command processes teh default.pot file and updates the database with translation records per supported locale.
 */
class LoadDefault18nCommand extends Command
{
    /**
     * Executes the command to update internationalisation records.
     *
     * @param \Cake\Console\Arguments $args The command line arguments.
     * @param \Cake\Console\ConsoleIo $io The console input/output.
     * @return void
     */
    public function execute(Arguments $args, ConsoleIo $io): void
    {
        $potFile = 'resources/locales/default.pot';
        $translations = $this->parsePoFile($potFile);

        // Assuming you have an InternationalisationsTable to handle translation records
        $internationalisationsTable = TableRegistry::getTableLocator()->get('Internationalisations');

        // Define the locales you want to support
        $locales = [
            'de_DE', // German (Germany)
            'fr_FR', // French (France)
            'es_ES', // Spanish (Spain)
            'it_IT', // Italian (Italy)
            'pt_PT', // Portuguese (Portugal)
            'nl_NL', // Dutch (Netherlands)
            'pl_PL', // Polish (Poland)
            'ru_RU', // Russian (Russia)
            'sv_SE', // Swedish (Sweden)
            'da_DK', // Danish (Denmark)
            'fi_FI', // Finnish (Finland)
            'no_NO', // Norwegian (Norway)
            'el_GR', // Greek (Greece)
            'tr_TR', // Turkish (Turkey)
            'cs_CZ', // Czech (Czech Republic)
            'hu_HU', // Hungarian (Hungary)
            'ro_RO', // Romanian (Romania)
            'sk_SK', // Slovak (Slovakia)
            'sl_SI', // Slovenian (Slovenia)
            'bg_BG', // Bulgarian (Bulgaria)
            'hr_HR', // Croatian (Croatia)
            'et_EE', // Estonian (Estonia)
            'lv_LV', // Latvian (Latvia)
            'lt_LT', // Lithuanian (Lithuania)
            'uk_UA', // Ukrainian (Ukraine)
        ];

        foreach ($translations as $messageId => $messageStr) {
            foreach ($locales as $locale) {
                // Check if the message ID exists in the database for the given locale
                $internationalisation = $internationalisationsTable->find()
                    ->where(['message_id' => $messageId, 'locale' => $locale])
                    ->first();

                if (!$internationalisation) {
                    // If not, add it with an empty translation for each locale
                    $internationalisation = $internationalisationsTable->newEntity([
                        'message_id' => $messageId,
                        'locale' => $locale,
                        'message_str' => '',
                    ]);
                    $internationalisationsTable->save($internationalisation);
                }
            }
        }

        $io->success('Internationalisations updated successfully.');
    }

    /**
     * Parses a .po file to extract translations.
     *
     * @param string $file The path to the .po file.
     * @return array An associative array of message IDs and their corresponding translations.
     * @throws \Exception If the file does not exist.
     */
    private function parsePoFile(string $file): array
    {
        if (!file_exists($file)) {
            throw new Exception("The file {$file} does not exist.");
        }

        $translations = [];
        $currentMsgId = null;
        $currentMsgStr = '';

        $lines = file($file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($lines as $line) {
            $line = trim($line);

            if (strpos($line, 'msgid "') === 0) {
                if ($currentMsgId !== null) {
                    $translations[$currentMsgId] = $currentMsgStr;
                    $currentMsgStr = '';
                }
                $currentMsgId = substr($line, 7, -1);
            } elseif (strpos($line, 'msgstr "') === 0) {
                $currentMsgStr = substr($line, 8, -1);
            } elseif ($currentMsgId !== null && strpos($line, '"') === 0) {
                if (strpos($line, 'msgid') === false && strpos($line, 'msgstr') === false) {
                    $currentMsgStr .= substr($line, 1, -1);
                }
            }
        }

        // Add the last translation
        if ($currentMsgId !== null) {
            $translations[$currentMsgId] = $currentMsgStr;
        }

        return $translations;
    }
}


// ----- END FILE: src/Command/LoadDefault18nCommand.php -----

FILE: src/Command/GeneratePoFilesCommand.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 3114 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use App\Utility\I18nManager;
use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\ORM\ResultSet;
use Cake\ORM\TableRegistry;
use Cake\Utility\Filesystem;

/**
 * Class GeneratePoFilesCommand
 *
 * This command generates default.po files for each locale based on the translations in the database.
 */
class GeneratePoFilesCommand extends Command
{
    /**
     * Executes the command to generate default.po files.
     *
     * @param \Cake\Console\Arguments $args The command line arguments.
     * @param \Cake\Console\ConsoleIo $io The console input/output.
     * @return int The exit code.
     */
    public function execute(Arguments $args, ConsoleIo $io): int
    {
        $locales = I18nManager::$locales;

        // Fetch the I18n table
        $i18nTable = TableRegistry::getTableLocator()->get('internationalisations');

        $filesystem = new Filesystem();

        foreach ($locales as $locale) {
            $translations = $i18nTable->find()
                ->where(['locale' => $locale, 'message_str !=' => ''])
                ->all();

            // Check if there are any translations for the locale
            if ($translations->isEmpty()) {
                $io->out(sprintf('No translations found for locale: %s. Skipping...', $locale));
                continue;
            }

            $poContent = $this->generatePoContent($locale, $translations);

            $filePath = ROOT . DS . 'resources' . DS . 'locales' . DS . $locale . DS . 'default.po';
            $dirPath = dirname($filePath);

            if (!is_dir($dirPath)) {
                $filesystem->mkdir($dirPath, 0755, true);
            }

            $filesystem->dumpFile($filePath, $poContent);
            $io->out(sprintf('Generated default.po for locale: %s', $locale));
        }

        return Command::CODE_SUCCESS;
    }

    /**
     * Generates the content for a .po file.
     *
     * @param string $locale The locale for which the .po file is generated.
     * @param \Cake\ORM\ResultSet $translations The translations to include in the .po file.
     * @return string The content of the .po file.
     */
    protected function generatePoContent(string $locale, ResultSet $translations): string
    {
        $header = <<<EOT
# LANGUAGE translation of CakePHP Application
# Copyright YEAR NAME <EMAIL@ADDRESS>
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PROJECT VERSION"
"POT-Creation-Date: 2024-10-23 23:47+0100"
"PO-Revision-Date: YYYY-mm-DD HH:MM+ZZZZ"
"Last-Translator: NAME <EMAIL@ADDRESS>"
"Language-Team: LANGUAGE <EMAIL@ADDRESS>"
"MIME-Version: 1.0"
"Content-Type: text/plain; charset=utf-8"
"Content-Transfer-Encoding: 8bit"
"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;"

EOT;

        $body = '';
        foreach ($translations as $translation) {
            $body .= "#: {$translation->context}\n";
            $body .= "msgid \"{$translation->message_id}\"\n";
            $body .= "msgstr \"{$translation->message_str}\"\n\n";
        }

        return $header . $body;
    }
}


// ----- END FILE: src/Command/GeneratePoFilesCommand.php -----

FILE: src/Command/DefaultDataExportCommand.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 9171 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;
use Cake\Datasource\ConnectionManager;
use Cake\ORM\TableRegistry;
use Cake\Utility\Inflector;
use Exception;

/**
 * DefaultDataExportCommand
 *
 * This command allows exporting data from a selected database table (or all tables)
 * to a JSON file. By default, it excludes common timestamp columns and generic 'id' columns
 * (unless 'id' is part of a composite primary key).
 * An option is provided to include all columns.
 */
class DefaultDataExportCommand extends Command
{
    /**
     * Configures the option parser for the command.
     *
     * @param \Cake\Console\ConsoleOptionParser $parser The option parser to configure.
     * @return \Cake\Console\ConsoleOptionParser The configured option parser.
     */
    protected function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $parser
            ->setDescription('Exports data from specified table(s) to JSON files.')
            ->addOption('output', [
                'short' => 'o',
                'help' => 'Output directory for the exported JSON file(s).',
                'default' => ROOT . DS . 'default_data',
            ])
            ->addOption('all', [
                'short' => 'a',
                'help' => 'Export data from all tables. Overrides interactive selection.',
                'boolean' => true,
            ])
            ->addOption('include-all-columns', [
                'short' => 'c',
                'help' => 'Include ALL columns in the export, overriding default 
                    exclusions (id, created, modified unless PK).',
                'boolean' => true,
                'default' => false,
            ]);

        return $parser;
    }

    /**
     * Executes the command to export data.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console io object.
     * @return int The exit code of the command.
     */
    public function execute(Arguments $args, ConsoleIo $io): int
    {
        $outputDir = (string)$args->getOption('output');
        $includeAllColumns = (bool)$args->getOption('include-all-columns');

        if (!is_dir($outputDir)) {
            if (!mkdir($outputDir, 0755, true) && !is_dir($outputDir)) {
                 $io->error(sprintf('Output directory "%s" could not be created.', $outputDir));

                 return Command::CODE_ERROR;
            }
            $io->info(sprintf('Output directory "%s" created.', $outputDir));
        }

        $connection = ConnectionManager::get('default');
        $allTables = $connection->getSchemaCollection()->listTables();

        $exportAllByFlag = (bool)$args->getOption('all');

        if ($exportAllByFlag) {
            if (empty($allTables)) {
                $io->info('No tables found in the database to export via --all flag.');

                return Command::CODE_SUCCESS;
            }

            return $this->_exportAllTables($outputDir, $io, $allTables, $includeAllColumns);
        } else {
            if (empty($allTables)) {
                $io->warning('No tables found in the database for interactive export.');

                return Command::CODE_SUCCESS;
            }

            $io->out('Available actions:');
            $io->out('[0] Export All Tables');
            foreach ($allTables as $index => $table) {
                $io->out(sprintf('[%d] %s', $index + 1, $table));
            }

            $choiceStr = $io->ask('Please select an option by number:');

            if (!ctype_digit($choiceStr)) {
                $io->error('Invalid input. Please enter a number. Exiting.');

                return Command::CODE_ERROR;
            }
            $choice = (int)$choiceStr;

            if ($choice === 0) {
                return $this->_exportAllTables($outputDir, $io, $allTables, $includeAllColumns);
            } else {
                $tableIndex = $choice - 1;
                if (!isset($allTables[$tableIndex])) {
                    $io->error('Invalid table selection. Exiting.');

                    return Command::CODE_ERROR;
                }
                $tableName = $allTables[$tableIndex];
                if ($this->exportTableData($tableName, $outputDir, $io, $includeAllColumns)) {
                    return Command::CODE_SUCCESS;
                } else {
                    return Command::CODE_ERROR;
                }
            }
        }

        return Command::CODE_SUCCESS;
    }

    /**
     * Helper method to export all tables.
     *
     * @param string $outputDir The output directory.
     * @param \Cake\Console\ConsoleIo $io The console IO object.
     * @param array $allTables List of all table names.
     * @param bool $includeAllColumns Whether to include all columns.
     * @return int Command exit code (CODE_SUCCESS or CODE_ERROR).
     */
    private function _exportAllTables(string $outputDir, ConsoleIo $io, array $allTables, bool $includeAllColumns): int
    {
        $io->out(sprintf('Exporting all tables to %s...', $outputDir));
        if ($includeAllColumns) {
            $io->info('Including ALL columns in export.');
        }
        $exportedCount = 0;
        $failedCount = 0;

        foreach ($allTables as $tableName) {
            if ($this->exportTableData($tableName, $outputDir, $io, $includeAllColumns)) {
                $exportedCount++;
            } else {
                $failedCount++;
            }
        }

        if ($exportedCount > 0) {
            $io->success(sprintf('Successfully exported data from %d table(s).', $exportedCount));
        }
        if ($failedCount > 0) {
            $io->error(sprintf('Failed to export data from %d table(s). Check logs above.', $failedCount));

            return Command::CODE_ERROR;
        }
        if ($exportedCount === 0 && $failedCount === 0) {
            $io->info('No tables were available or specified to export.');
        }

        return Command::CODE_SUCCESS;
    }

    /**
     * Exports data from a single table to a JSON file.
     *
     * @param string $tableName The name of the table to export.
     * @param string $outputDir The directory to save the JSON file.
     * @param \Cake\Console\ConsoleIo $io The console io object.
     * @param bool $includeAllColumns Whether to include all columns.
     * @return bool True on success, false on failure.
     */
    private function exportTableData(string $tableName, string $outputDir, ConsoleIo $io, bool $includeAllColumns): bool
    {
        $io->out(sprintf('Processing table: %s...', $tableName));
        try {
            $table = TableRegistry::getTableLocator()->get($tableName);
            $query = $table->find();
            $schema = $table->getSchema();
            $allSchemaColumns = $schema->columns();

            $selectedColumns = [];

            if ($includeAllColumns) {
                $io->out(sprintf('Table %s: Including all columns due to --include-all-columns flag.', $tableName));
                $selectedColumns = $allSchemaColumns;
            } else {
                $primaryKey = (array)$schema->getPrimaryKey();
                $columnsToPotentiallyExclude = ['id', 'created', 'modified'];

                $selectedColumns = $allSchemaColumns;
                foreach ($columnsToPotentiallyExclude as $col) {
                    if (in_array($col, $selectedColumns) && !in_array($col, $primaryKey)) {
                        $selectedColumns = array_diff($selectedColumns, [$col]);
                    }
                }
                // $io->out(sprintf('Table %s: Exporting columns: %s', $tableName, implode(', ', $selectedColumns)));
            }

            if (empty($selectedColumns)) {
                $io->info(sprintf(
                    'Table "%s" has no columns to export after considering exclusions/inclusions. Skipping.',
                    $tableName,
                ));

                return true;
            }

            $query->select(array_values($selectedColumns));
            $data = $query->disableHydration()->all()->toArray();

            $outputFile = $outputDir . DS . Inflector::underscore($tableName) . '.json';
            $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);

            if ($json === false) {
                $io->error(sprintf('Failed to encode JSON for table %s. Error: %s', $tableName, json_last_error_msg()));

                return false;
            }

            if (file_put_contents($outputFile, $json) === false) {
                $io->error(sprintf('Failed to write data for table %s to %s.', $tableName, $outputFile));

                return false;
            }

            $io->success(sprintf('Data for table "%s" exported to %s', $tableName, $outputFile));

            return true;
        } catch (Exception $e) {
            $io->error(sprintf('Error exporting table "%s": %s', $tableName, $e->getMessage()));

            return false;
        }
    }
}


// ----- END FILE: src/Command/DefaultDataExportCommand.php -----

FILE: src/Command/ResizeImagesCommand.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 6085 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Command;

use App\Utility\SettingsManager;
use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;
use Cake\Log\LogTrait;
use Exception;
use Imagick;

/**
 * ResizeImages command.
 *
 * This command is responsible for resizing images for specified models.
 */
class ResizeImagesCommand extends Command
{
    use LogTrait;

    /**
     * Stores the model names and their respective columns to process.
     *
     * @var array<string, string>
     */
    protected array $modelsWithImages = [
        'Users' => [
            'file' => 'image',
            'dir' => 'dir',
            'size' => 'size',
            'type' => 'mime',
        ],
        'Images' => [
            'file' => 'image',
            'dir' => 'dir',
            'size' => 'size',
            'type' => 'mime',
        ],
        'Articles' => [
            'file' => 'image',
            'dir' => 'dir',
            'size' => 'size',
            'type' => 'mime',
        ],
        'Tags' => [
            'file' => 'image',
            'dir' => 'dir',
            'size' => 'size',
            'type' => 'mime',
        ],
    ];

    /**
     * Stores the ConsoleIo instance for output operations.
     *
     * @var \Cake\Console\ConsoleIo
     */
    protected ConsoleIo $io;

    /**
     * Hook method for defining this command's option parser.
     *
     * @see https://book.cakephp.org/4/en/console-commands/commands.html#defining-arguments-and-options
     * @param \Cake\Console\ConsoleOptionParser $parser The parser to be defined
     * @return \Cake\Console\ConsoleOptionParser The built parser.
     */
    public function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $parser = parent::buildOptionParser($parser);

        return $parser;
    }

    /**
     * Executes the command to resize images.
     *
     * This method iterates through the specified models, retrieves images,
     * and resizes them according to the configured sizes.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console io
     * @return int The exit code of the command.
     */
    public function execute(Arguments $args, ConsoleIo $io): int
    {
        //save reference for IO
        $this->io = $io;
        //for our models that have images, get their table
        foreach ($this->modelsWithImages as $model => $columns) {
            $imagesTable = $this->fetchTable($model);
            $images = $imagesTable->find('all')
            ->select(['id', $columns['image'], $columns['dir']])
            ->where([$columns['image'] . ' IS NOT' => null])
            ->toArray();

            foreach ($images as $image) {
                $folder = ROOT . DS . $image->dir;
                $original = $folder . $image->{$columns['image']};
                if (file_exists($original)) {
                    foreach (SettingsManager::read('ImageSizes') as $width) {
                        $this->createImage($folder, $image->{$columns['image']}, intval($width));
                    }
                }
            }
        }

        return static::CODE_SUCCESS;
    }

    /**
     * Creates a resized image.
     *
     * This method resizes the given image to the specified width and saves it
     * in the appropriate directory.
     *
     * @param string $folder The directory where the original image is stored.
     * @param string $file The name of the image file.
     * @param int $width The target width for the resized image.
     * @throws \Exception If the directory cannot be created.
     * @return void
     */
    private function createImage(string $folder, string $file, int $width): void
    {
        // Make sure folder for size exists
        // Ensure the folder path ends with a directory separator
        $folder = rtrim($folder, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;

        // Create the full path including the width
        $sizeFolder = $folder . $width . DIRECTORY_SEPARATOR;

        // Check if the directory exists, if not, create it
        if (!is_dir($sizeFolder)) {
            if (!mkdir($sizeFolder, 0755, true)) {
                throw new Exception("Failed to create directory: $sizeFolder");
            }
        }

        try {
            if (!file_exists($folder . $file)) {
                $this->log(
                    sprintf('Original image not found for resizing. Path: %s', $folder . $file),
                    'error',
                    ['group_name' => 'image_processing'],
                );

                return;
            }

            if (file_exists($sizeFolder . $file)) {
                $this->log(
                    sprintf(
                        'Skipped resizing, image already exists. Path: %s',
                        $sizeFolder . $file,
                    ),
                    'info',
                    ['group_name' => 'image_processing'],
                );

                return;
            }

            $imagick = new Imagick($folder . $file);
            $imagick->resizeImage($width, 0, Imagick::FILTER_LANCZOS, 1);
            $imagick->writeImage($sizeFolder . $file);
            $imagick->clear();

            $this->log(
                sprintf(
                    'Successfully resized and saved image. Original: %s, Resized: %s, Width: %dpx',
                    $folder . $file,
                    $sizeFolder . $file,
                    $width,
                ),
                'info',
                ['group_name' => 'image_processing'],
            );
        } catch (Exception $e) {
            $this->log(
                sprintf(
                    'Error resizing image. Original: %s, Target Width: %dpx, Error: %s',
                    $folder . $file,
                    $width,
                    $e->getMessage(),
                ),
                'error',
                ['group_name' => 'image_processing'],
            );
        }
    }
}


// ----- END FILE: src/Command/ResizeImagesCommand.php -----

FILE: plugins/AdminTheme/src/Command/Bake/ControllerCommand.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 1292 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace AdminTheme\Command\Bake;

use Bake\Command\ControllerCommand as BakeControllerCommand;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;

class ControllerCommand extends BakeControllerCommand
{
    public function bakeController(string $controllerName, array $data, Arguments $args, ConsoleIo $io): void
    {
        $io->quiet(sprintf('Baking controller class for %s...', $controllerName));

        $data['actions'] = ['index', 'view', 'add', 'edit', 'delete'];
        $data['searchFields'] = $this->getSearchFields($data['modelObj']);

        $contents = $this->createTemplateRenderer()
            ->set($data)
            ->generate('AdminTheme.Controller/controller');

        $path = $this->getPath($args);
        $filename = $path . $controllerName . 'Controller.php';
        $io->createFile($filename, $contents, $this->force);
    }

    protected function getSearchFields($modelObj): array
    {
        $schema = $modelObj->getSchema();
        $searchFields = [];

        foreach ($schema->columns() as $field) {
            $type = $schema->getColumnType($field);
            if (in_array($type, ['string', 'text'])) {
                $searchFields[] = $field;
            }
        }

        return $searchFields;
    }
}

// ----- END FILE: plugins/AdminTheme/src/Command/Bake/ControllerCommand.php -----

FILE: plugins/AdminTheme/src/Command/Bake/TemplateCommand.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 5051 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace AdminTheme\Command\Bake;

use Bake\Command\TemplateCommand as BakeTemplateCommand;
use Bake\Utility\Model\AssociationFilter;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Core\Configure;
use Cake\Utility\Inflector;

class TemplateCommand extends BakeTemplateCommand
{
    /**
     * Actions to use for scaffolding
     *
     * @var array<string>
     */
    public array $scaffoldActions = ['index', 'view', 'add', 'edit', 'search_results'];

    /**
     * Execute the command.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console io
     * @return int|null The exit code or null for success
     */
    public function execute(Arguments $args, ConsoleIo $io): ?int
    {
        $this->extractCommonProperties($args);
        $name = $args->getArgument('name') ?? '';
        $name = $this->_getName($name);

        if (empty($name)) {
            return parent::execute($args, $io);
        }

        $controller = $args->getOption('controller');
        $this->controller($args, $name, $controller);
        $this->model($name);

        $vars = $this->_loadController($io);
        $methods = $this->scaffoldActions;

        foreach ($methods as $method) {
            try {
                $content = $this->getContent($args, $io, $method, $vars);
                $this->bake($args, $io, $method, $content);
            } catch (\Exception $e) {
                $io->error($e->getMessage());
            }
        }

        return static::CODE_SUCCESS;
    }

    /**
     * Get the path base for view templates.
     *
     * @param \Cake\Console\Arguments $args The arguments
     * @param string|null $container Unused.
     * @return string
     */
    public function getTemplatePath(Arguments $args, ?string $container = null): string
    {
        $path = Configure::read('App.paths.templates')[0];
        $path .= 'Admin' . DS . $this->controllerName . DS;

        return $path;
    }

    /**
     * Builds content from template and variables
     *
     * @param \Cake\Console\Arguments $args The CLI arguments
     * @param \Cake\Console\ConsoleIo $io The console io
     * @param string $action name to generate content to
     * @param array|null $vars passed for use in templates
     * @return string Content from template
     */
    public function getContent(Arguments $args, ConsoleIo $io, string $action, ?array $vars = null): string
    {
        if (!$vars) {
            $vars = $this->_loadController($io);
        }

        if (empty($vars['primaryKey'])) {
            $io->error('Cannot generate views for models with no primary key');
            $this->abort();
        }

        if (in_array($action, $this->excludeHiddenActions)) {
            $vars['fields'] = array_diff($vars['fields'], $vars['hidden']);
        }

        $renderer = $this->createTemplateRenderer()
            ->set('action', $action)
            ->set('plugin', $this->plugin)
            ->set($vars);

        $indexColumns = 0;
        if ($action === 'index' && $args->getOption('index-columns') !== null) {
            $indexColumns = $args->getOption('index-columns');
        }
        $renderer->set('indexColumns', $indexColumns);

        return $renderer->generate("AdminTheme.Template/$action");
    }

    /**
     * Assembles and writes bakes the view file.
     *
     * @param \Cake\Console\Arguments $args CLI arguments
     * @param \Cake\Console\ConsoleIo $io Console io
     * @param string $template Template file to use.
     * @param string|true $content Content to write.
     * @param ?string $outputFile The output file to create. If null will use `$template`
     * @return void
     */
    public function bake(
        Arguments $args,
        ConsoleIo $io,
        string $template,
        string|bool $content = '',
        ?string $outputFile = null
    ): void {
        if ($outputFile === null) {
            $outputFile = $template;
        }
        if ($content === true) {
            $content = $this->getContent($args, $io, $template);
        }
        if (empty($content)) {
            $io->err("<warning>No generated content for '{$template}.{$this->ext}', not generating template.</warning>");
            return;
        }
        $path = $this->getTemplatePath($args);
        $filename = $path . Inflector::underscore($outputFile) . '.' . $this->ext;

        $io->out("\n" . sprintf('Baking `%s` view template file...', $outputFile), 1, ConsoleIo::NORMAL);
        $io->createFile($filename, $content, $this->force);
    }

    /**
     * Get filtered associations
     *
     * @param \Cake\ORM\Table $model Table
     * @return array associations
     */
    protected function _filteredAssociations(\Cake\ORM\Table $model): array
    {
        if ($this->_associationFilter === null) {
            $this->_associationFilter = new AssociationFilter();
        }

        return $this->_associationFilter->filterAssociations($model);
    }
}


// ----- END FILE: plugins/AdminTheme/src/Command/Bake/TemplateCommand.php -----



================================================================================
END SECTION: Commands
================================================================================



================================================================================
BEGIN SECTION: Components
================================================================================

FILE: src/Controller/Component/MediaPickerTrait.php
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 4587 bytes
CONTENT:
<?php
declare(strict_types=1);

namespace App\Controller\Component;

use Cake\Http\Response;
use Cake\ORM\Query;
use Cake\ORM\Table;

/**
 * MediaPickerTrait
 *
 * Provides shared functionality for media picker methods across controllers.
 * Handles common patterns for search, pagination, and AJAX responses in picker interfaces.
 */
trait MediaPickerTrait
{
    /**
     * Build base picker query with common select fields and ordering
     *
     * @param \Cake\ORM\Table $table The table to query
     * @param array $selectFields Fields to select
     * @param array $options Additional query options
     * @return \Cake\ORM\Query
     */
    protected function buildPickerQuery(Table $table, array $selectFields, array $options = []): Query
    {
        $query = $table->find()->select($selectFields);

        // Apply default ordering
        if (isset($options['order'])) {
            $query->orderBy($options['order']);
        } else {
            $query->orderBy([$table->getAlias() . '.created' => 'DESC']);
        }

        // Apply any containments
        if (isset($options['contain'])) {
            $query->contain($options['contain']);
        }

        return $query;
    }

    /**
     * Handle search filtering for picker queries
     *
     * @param \Cake\ORM\Query $query Query to filter
     * @param string|null $searchTerm Search term
     * @param array $searchFields Fields to search in
     * @return \Cake\ORM\Query
     */
    protected function handlePickerSearch(Query $query, ?string $searchTerm, array $searchFields): Query
    {
        if (!empty($searchTerm)) {
            $conditions = [];
            foreach ($searchFields as $field) {
                $conditions[] = [$field . ' LIKE' => '%' . $searchTerm . '%'];
            }
            $query->where(['OR' => $conditions]);
        }

        return $query;
    }

    /**
     * Setup pagination configuration for picker
     *
     * @param array $options Pagination options
     * @return array
     */
    protected function setupPickerPagination(array $options = []): array
    {
        $defaults = [
            'limit' => 12,
            'maxLimit' => 24,
        ];

        return array_merge($defaults, $options);
    }

    /**
     * Handle picker AJAX response
     *
     * @param mixed $results Results to return
     * @param string|null $search Search term
     * @param string $template Template to render for AJAX
     * @return \Cake\Http\Response|null
     */
    protected function handlePickerAjaxResponse(mixed $results, ?string $search, string $template): ?Response
    {
        if ($this->request->is('ajax')) {
            $this->set(compact('results', 'search'));
            $this->set('_serialize', ['results', 'search']);
            $this->viewBuilder()->setLayout('ajax');

            return $this->render($template);
        }

        return null;
    }

    /**
     * Apply exclusion filter for picker (e.g., exclude images already in gallery)
     *
     * @param \Cake\ORM\Query $query Query to filter
     * @param \Cake\ORM\Table $pivotTable Pivot table for relationships
     * @param string $foreignKey Foreign key field name
     * @param string $recordId Record ID to exclude related items from
     * @param string $excludeField Field name to exclude
     * @return \Cake\ORM\Query
     */
    protected function applyPickerExclusion(
        Query $query,
        Table $pivotTable,
        string $foreignKey,
        string $recordId,
        string $excludeField,
    ): Query {
        $excludeIds = $pivotTable
            ->find()
            ->select([$excludeField])
            ->where([$foreignKey => $recordId])
            ->all()
            ->extract($excludeField)
            ->toArray();

        if (!empty($excludeIds)) {
            $tableAlias = $query->getRepository()->getAlias();
            $query->where([$tableAlias . '.id NOT IN' => $excludeIds]);
        }

        return $query;
    }

    /**
     * Handle request limit parameter with validation
     *
     * @param int $default Default limit
     * @param int $max Maximum allowed limit
     * @return int
     */
    protected function getRequestLimit(int $default = 12, int $max = 24): int
    {
        return min((int)$this->request->getQuery('limit', $default), $max);
    }

    /**
     * Get current page from request
     *
     * @param int $default Default page number
     * @return int
     */
    protected function getRequestPage(int $default = 1): int
    {
        return (int)$this->request->getQuery('page', $default);
    }
}


// ----- END FILE: src/Controller/Component/MediaPickerTrait.php -----

FILE: plugins/DefaultTheme/src/Controller/Component/FrontEndSiteComponent.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 4117 bytes
CONTENT:
<?php
namespace DefaultTheme\Controller\Component;

use Cake\Controller\Component;
use Cake\Event\EventInterface;
use App\Utility\I18nManager;
use App\Utility\SettingsManager;
use Cake\Core\Configure;

/**
 * FrontEndSiteComponent
 *
 * This component is responsible for preparing and setting up data
 * for the front-end of the site, specifically the article tree and tag list.
 * It automatically runs before rendering non-admin pages.
 */
class FrontEndSiteComponent extends Component
{
    /**
     * Default configuration.
     *
     * Defines the events this component listens to.
     *
     * @var array
     */
    protected array $_defaultConfig = [
        'implementedEvents' => [
            'Controller.beforeRender' => 'beforeRender'
        ]
    ];

    /**
     * Before render callback.
     *
     * This method is automatically called before the view is rendered
     * using the DefaultTheme. It prepares and sets data
     * for use in the views.
     *
     * @param \Cake\Event\EventInterface $event The beforeRender event that was fired.
     * @return void
     */
    public function beforeRender(EventInterface $event): void
    {
        $controller = $this->getController();
        $request = $controller->getRequest();
        
        // Skip processing for admin routes
        if ($request->getParam('prefix') === 'Admin') {
            return;
        }
        
        // Skip processing for certain user actions during tests
        if (Configure::read('debug') && $request->getParam('controller') === 'Users') {
            $skipActions = ['login', 'logout', 'register', 'edit', 'forgotPassword', 'resetPassword', 'confirmEmail'];
            if (in_array($request->getParam('action'), $skipActions)) {
                // Set minimal required variables
                $controller->set([
                    'menuPages' => [],
                    'rootTags' => [],
                    'featuredArticles' => [],
                    'articleArchives' => [],
                    'siteLanguages' => I18nManager::getEnabledLanguages(),
                    'selectedSiteLanguage' => $request->getParam('lang', 'en')
                ]);
                return;
            }
        }

        $cacheKey = $controller->cacheKey;
        $articlesTable = $controller->fetchTable('Articles');
        $tagsTable = $controller->fetchTable('Tags');

        $menuPages = [];
        switch(SettingsManager::read('SitePages.mainMenuShow', 'root')) {
            case "root":
                $menuPages = $articlesTable->getRootPages($cacheKey);
                break;
            case "selected":
                $menuPages = $articlesTable->getMainMenuPages($cacheKey);
                break;
        }

        $rootTags = [];
        switch(SettingsManager::read('SitePages.mainTagMenuShow', 'root')) {
            case "root":
                $rootTags = $tagsTable->getRootTags($cacheKey);
                break;
            case "selected":
                $rootTags = $tagsTable->getMainMenuTags($cacheKey);
                break;
        }

        $featuredArticles = $articlesTable->getFeatured($cacheKey);
        
        $articleArchives = $articlesTable->getArchiveDates($cacheKey);

        $privacyPolicyId = SettingsManager::read('SitePages.privacyPolicy', null);
        if ($privacyPolicyId && $privacyPolicyId != 'None') {
            $privacyPolicy = $articlesTable->find()
                ->select(['id', 'title', 'slug'])
                ->where(['id' => $privacyPolicyId])
                ->cache($cacheKey . 'priv_page', 'content')
                ->first();
                
            if ($privacyPolicy) {
                $controller->set('sitePrivacyPolicy', $privacyPolicy->toArray());
            }
        }
        
        $controller->set(compact(
            'menuPages',
            'rootTags',
            'featuredArticles',
            'articleArchives',
        ));
        
        $controller->set('siteLanguages', I18nManager::getEnabledLanguages());
        $controller->set('selectedSiteLanguage', $request->getParam('lang', 'en'));
    }
}

// ----- END FILE: plugins/DefaultTheme/src/Controller/Component/FrontEndSiteComponent.php -----



================================================================================
END SECTION: Components
================================================================================



================================================================================
BEGIN SECTION: Views
================================================================================

FILE: templates/email/html/default.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 759 bytes
CONTENT:
<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @since         0.10.0
 * @license       https://opensource.org/licenses/mit-license.php MIT License
 * @var \Cake\View\View $this
 * @var string $content
 */

$lines = explode("\n", $content);

foreach ($lines as $line) :
    echo '<p> ' . $line . "</p>\n";
endforeach;


// ----- END FILE: templates/email/html/default.php -----

FILE: templates/email/text/default.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 663 bytes
CONTENT:
<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @since         0.10.0
 * @license       https://opensource.org/licenses/mit-license.php MIT License
 * @var \Cake\View\View $this
 * @var string $content
 */

echo $content;


// ----- END FILE: templates/email/text/default.php -----

FILE: templates/Error/error400.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 1003 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \Cake\Database\StatementInterface $error
 * @var string $message
 * @var string $url
 */
use Cake\Core\Configure;
use Cake\Error\Debugger;

$this->layout = 'error';

if (Configure::read('debug')) :
    $this->layout = 'dev_error';

    $this->assign('title', $message);
    $this->assign('templateName', 'error400.php');

    $this->start('file');
?>
<?php if (!empty($error->queryString)) : ?>
    <p class="notice">
        <strong>SQL Query: </strong>
        <?= h($error->queryString) ?>
    </p>
<?php endif; ?>
<?php if (!empty($error->params)) : ?>
    <strong>SQL Query Params: </strong>
    <?php Debugger::dump($error->params) ?>
<?php endif; ?>

<?php
    echo $this->element('auto_table_warning');

    $this->end();
endif;
?>
<h2><?= h($message) ?></h2>
<p class="error">
    <strong><?= __d('cake', 'Error') ?>: </strong>
    <?= __d('cake', 'The requested address {0} was not found on this server.', "<strong>'{$url}'</strong>") ?>
</p>


// ----- END FILE: templates/Error/error400.php -----

FILE: templates/Error/error500.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 1238 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \Cake\Database\StatementInterface $error
 * @var string $message
 * @var string $url
 */
use Cake\Core\Configure;
use Cake\Error\Debugger;

$this->layout = 'error';

if (Configure::read('debug')) :
    $this->layout = 'dev_error';

    $this->assign('title', $message);
    $this->assign('templateName', 'error500.php');

    $this->start('file');
?>
<?php if (!empty($error->queryString)) : ?>
    <p class="notice">
        <strong>SQL Query: </strong>
        <?= h($error->queryString) ?>
    </p>
<?php endif; ?>
<?php if (!empty($error->params)) : ?>
    <strong>SQL Query Params: </strong>
    <?php Debugger::dump($error->params) ?>
<?php endif; ?>
<?php if ($error instanceof Error) : ?>
    <?php $file = $error->getFile() ?>
    <?php $line = $error->getLine() ?>
    <strong>Error in: </strong>
    <?= $this->Html->link(sprintf('%s, line %s', Debugger::trimPath($file), $line), Debugger::editorUrl($file, $line)); ?>
<?php endif; ?>
<?php
    echo $this->element('auto_table_warning');

    $this->end();
endif;
?>
<h2><?= __d('cake', 'An Internal Error Has Occurred.') ?></h2>
<p class="error">
    <strong><?= __d('cake', 'Error') ?>: </strong>
    <?= h($message) ?>
</p>


// ----- END FILE: templates/Error/error500.php -----

FILE: templates/Error/error429.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 933 bytes
CONTENT:
<?php
use Cake\Core\Configure;

$this->layout = 'error';

if (Configure::read('debug')) :
    $this->layout = 'dev_error';

    $this->assign('title', $message);
    $this->assign('templateName', 'error429.php');

    $this->start('file');
?>
<h2><?= __d('cake', 'Too Many Requests') ?></h2>
<p class="error">
    <strong><?= __d('cake', 'Error') ?>: </strong>
    <?= h($message) ?>
</p>
<?php
    if (!empty($error->queryString)) :
        echo "<p>" . __d('cake', 'SQL Query') . ": " . h($error->queryString) . "</p>";
    endif;
?>
<?php if (!empty($error->params)) : ?>
        <strong><?= __d('cake', 'SQL Query Params') ?>: </strong>
        <?php Debugger::dump($error->params) ?>
<?php endif;
    echo $this->element('auto_table_warning');

    $this->end();
endif;
?>
<h2><?= __d('cake', 'Too Many Requests') ?></h2>
<p class="error">
    <?= __d('cake', 'You have exceeded the rate limit. Please try again later.') ?>
</p>

// ----- END FILE: templates/Error/error429.php -----

FILE: templates/cell/Gallery/display.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 1538 bytes
CONTENT:
<?php
/**
 * Gallery Cell Display Template
 * 
 * This template renders a gallery from cell data.
 * It receives the following variables from the GalleryCell:
 * 
 * @var \App\Model\Entity\ImageGallery|null $gallery The gallery entity
 * @var \App\Model\Entity\Image[] $images Array of gallery images
 * @var string $theme Gallery display theme
 * @var string $title Gallery title (with override support)
 * @var bool $isEmpty Whether the gallery is empty or unavailable
 * @var string|null $error Error message if rendering failed
 */

// Handle empty/error states gracefully
if ($isEmpty || !$gallery) {
    // Return empty string for silent degradation on frontend
    return;
}

// Load PhotoSwipe library from CDN (required dependency)
echo $this->Html->css('https://cdn.jsdelivr.net/npm/photoswipe@5.4.2/dist/photoswipe.css');
echo $this->Html->script('https://cdn.jsdelivr.net/npm/photoswipe@5.4.2/dist/photoswipe.umd.min.js');

// Load our gallery script
echo $this->Html->script('photoswipe-gallery');

// Load theme-specific CSS
if ($theme === 'admin') {
    echo $this->Html->css('AdminTheme.photo-gallery');
} else {
    echo $this->Html->css('DefaultTheme.photo-gallery');
}

// Render the gallery using the existing shared element
echo $this->element('shared_photo_gallery', [
    'images' => $images,
    'title' => $title,
    'description' => $description,
    'theme' => $theme,
    'showActions' => false, // Actions handled separately when needed
    'galleryId' => null, // Links handled separately when needed
]);
?>

// ----- END FILE: templates/cell/Gallery/display.php -----

FILE: templates/element/libraries/highlightjs.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 678 bytes
CONTENT:
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/php.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/css.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/xml.min.js"></script>
<script>
    hljs.highlightAll();
</script>

// ----- END FILE: templates/element/libraries/highlightjs.php -----

FILE: templates/element/shared_photo_gallery.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 6696 bytes
CONTENT:
<?php
/**
 * Shared Photo Gallery Element
 * 
 * Works across both AdminTheme and DefaultTheme with automatic theme detection
 * 
 * @var \App\View\AppView $this
 * @var array $images Array of image entities
 * @var string $title Gallery title
 * @var string $description Gallery description
 * @var string $theme Gallery theme ('admin' or 'default') - auto-detected if not provided
 * @var bool $showActions Whether to show management actions (admin only)
 * @var string $galleryId Gallery ID for management links
 */

// Auto-detect theme if not provided
if (!isset($theme)) {
    $request = $this->getRequest();
    $theme = (str_contains($request->getPath(), '/admin/') || $this->getPlugin() === 'AdminTheme') ? 'admin' : 'default';
}

$showActions = $showActions ?? ($theme === 'admin');
$title = $title ?? __('Gallery Images');
$description = $description ?? '';
$images = $images ?? [];
$galleryId = $galleryId ?? null;
?>

<?php if (!empty($images)) : ?>
    <?php if ($theme === 'admin'): ?>
        <div class="gallery-header">
            <div class="d-flex justify-content-end">
                <span class="gallery-count"><?= count($images) ?> <?= __('images') ?></span>
            </div>
        </div>
    <?php elseif (!empty($title) && $theme === 'default'): ?>
        <div class="gallery-header">
            <h4 class="gallery-title"><?= h($title) ?></h4>
            <?php if (!empty($description)): ?>
                <p class="gallery-description text-muted"><?= h($description) ?></p>
            <?php endif; ?>
        </div>
    <?php endif; ?>
    
    <div class="<?= $theme === 'admin' ? 'admin-gallery' : 'default-gallery' ?>">
        <div class="photo-gallery">
            <?php foreach ($images as $image) : ?>
                <div class="gallery-item">
                    <a href="<?= h($image->massiveImageUrl ?: $image->extraLargeImageUrl ?: $image->getImageUrlBySize('massive') ?: $image->getImageUrlBySize('extraLarge')) ?>" 
                       data-title="<?= h($image->name) ?>"
                       data-caption="<?= h($image->alt_text) ?>"
                       data-pswp-width=""
                       data-pswp-height="">
                        <img src="<?= h($image->largeImageUrl ?: $image->getImageUrlBySize('large')) ?>" 
                             alt="<?= h($image->alt_text ?: $image->name) ?>"
                             loading="lazy"
                             class="gallery-image" />
                        
                        <div class="gallery-item-overlay">
                            <div class="gallery-item-title"><?= h($image->name) ?></div>
                            <?php if ($image->alt_text): ?>
                                <div class="gallery-item-caption"><?= h($image->alt_text) ?></div>
                            <?php endif; ?>
                        </div>
                    </a>
                </div>
            <?php endforeach; ?>
        </div>
    </div>
    
    <?php if ($showActions && !empty($galleryId)): ?>
        <!-- Image Management Actions (Admin Theme) -->
        <div class="mt-4 pt-4 border-top">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <div class="btn-group gap-2" role="group">
                        <?= $this->Html->link(
                            '<i class="fas fa-edit me-2"></i>' . __('Manage Images'),
                            ['controller' => 'ImageGalleries', 'action' => 'manageImages', $galleryId],
                            ['class' => 'btn btn-primary btn-lg', 'escape' => false]
                        ) ?>
                        
                        <?= $this->Html->link(
                            '<i class="fas fa-plus me-2"></i>' . __('Add More Images'),
                            ['controller' => 'ImageGalleries', 'action' => 'edit', $galleryId],
                            ['class' => 'btn btn-outline-secondary btn-lg ms-2', 'escape' => false]
                        ) ?>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="text-muted small text-end">
                        <i class="fas fa-info-circle me-1"></i>
                        <?= __('Click any image to view slideshow') ?><br>
                        <small class="text-muted"><?= __('Press spacebar or use controls to play automatically') ?></small>
                    </div>
                </div>
            </div>
        </div>
    <?php elseif ($theme === 'default' && !empty($galleryId)): ?>
        <!-- Image Management Actions (Default Theme) -->
        <div class="mt-4 pt-3 border-top">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <?= $this->Html->link(
                        '<i class="fas fa-edit me-2"></i>' . __('Manage Images'),
                        ['controller' => 'ImageGalleries', 'action' => 'manageImages', $galleryId],
                        ['class' => 'btn btn-primary', 'escape' => false]
                    ) ?>
                    
                    <?= $this->Html->link(
                        '<i class="fas fa-plus me-2"></i>' . __('Add More Images'),
                        ['controller' => 'ImageGalleries', 'action' => 'edit', $galleryId],
                        ['class' => 'btn btn-outline-secondary', 'escape' => false]
                    ) ?>
                </div>
                
                <div class="text-muted small">
                    <i class="fas fa-info-circle me-1"></i>
                    <?= __('Click any image to view slideshow') ?>
                </div>
            </div>
        </div>
    <?php endif; ?>
<?php else: ?>
    <div class="gallery-empty">
        <div class="gallery-empty-icon">
            <i class="fas fa-images"></i>
        </div>
        <div class="gallery-empty-text"><?= __('No images in this gallery') ?></div>
        <div class="gallery-empty-subtext"><?= __('Add some images to get started') ?></div>
        
        <?php if ($showActions && !empty($galleryId)): ?>
            <div class="mt-3">
                <?= $this->Html->link(
                    '<i class="fas fa-plus me-2"></i>' . __('Add Images'),
                    ['controller' => 'ImageGalleries', 'action' => 'edit', $galleryId],
                    ['class' => 'btn btn-primary', 'escape' => false]
                ) ?>
            </div>
        <?php endif; ?>
    </div>
<?php endif; ?>

<?php
// Note: PhotoSwipe assets are now loaded by the calling cell/controller
// This keeps the element focused on just rendering the gallery HTML
?>

// ----- END FILE: templates/element/shared_photo_gallery.php -----

FILE: templates/element/flash/success.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 279 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var array $params
 * @var string $message
 */
if (!isset($params['escape']) || $params['escape'] !== false) {
    $message = h($message);
}
?>
<div class="message success" onclick="this.classList.add('hidden')"><?= $message ?></div>


// ----- END FILE: templates/element/flash/success.php -----

FILE: templates/element/flash/info.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 272 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var array $params
 * @var string $message
 */
if (!isset($params['escape']) || $params['escape'] !== false) {
    $message = h($message);
}
?>
<div class="message" onclick="this.classList.add('hidden');"><?= $message ?></div>


// ----- END FILE: templates/element/flash/info.php -----

FILE: templates/element/flash/error.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 278 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var array $params
 * @var string $message
 */
if (!isset($params['escape']) || $params['escape'] !== false) {
    $message = h($message);
}
?>
<div class="message error" onclick="this.classList.add('hidden');"><?= $message ?></div>


// ----- END FILE: templates/element/flash/error.php -----

FILE: templates/element/flash/default.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 373 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var array $params
 * @var string $message
 */
$class = 'message';
if (!empty($params['class'])) {
    $class .= ' ' . $params['class'];
}
if (!isset($params['escape']) || $params['escape'] !== false) {
    $message = h($message);
}
?>
<div class="<?= h($class) ?>" onclick="this.classList.add('hidden');"><?= $message ?></div>


// ----- END FILE: templates/element/flash/default.php -----

FILE: templates/element/flash/warning.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 280 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var array $params
 * @var string $message
 */
if (!isset($params['escape']) || $params['escape'] !== false) {
    $message = h($message);
}
?>
<div class="message warning" onclick="this.classList.add('hidden');"><?= $message ?></div>


// ----- END FILE: templates/element/flash/warning.php -----

FILE: templates/layout/email/html/default.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 807 bytes
CONTENT:
<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @since         0.10.0
 * @license       https://opensource.org/licenses/mit-license.php MIT License
 * @var \App\View\AppView $this
 */
?>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
    <title><?= $this->fetch('title') ?></title>
</head>
<body>
    <?= $this->fetch('content') ?>
</body>
</html>


// ----- END FILE: templates/layout/email/html/default.php -----

FILE: templates/layout/email/text/default.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 656 bytes
CONTENT:
<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @since         0.10.0
 * @license       https://opensource.org/licenses/mit-license.php MIT License
 * @var \App\View\AppView $this
 */

echo $this->fetch('content');


// ----- END FILE: templates/layout/email/text/default.php -----

FILE: templates/layout/error.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 1198 bytes
CONTENT:
<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @since         0.10.0
 * @license       https://opensource.org/licenses/mit-license.php MIT License
 * @var \App\View\AppView $this
 */
?>
<!DOCTYPE html>
<html>
<head>
    <?= $this->Html->charset() ?>
    <title>
        <?= $this->fetch('title') ?>
    </title>
    <?= $this->Html->meta('icon') ?>

    <?= $this->Html->css(['normalize.min', 'milligram.min', 'fonts', 'cake']) ?>

    <?= $this->fetch('meta') ?>
    <?= $this->fetch('css') ?>
    <?= $this->fetch('script') ?>
</head>
<body>
    <div class="error-container">
        <?= $this->Flash->render() ?>
        <?= $this->fetch('content') ?>
        <?= $this->Html->link(__('Back'), 'javascript:history.back()') ?>
    </div>
</body>
</html>


// ----- END FILE: templates/layout/error.php -----

FILE: templates/layout/default.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 1772 bytes
CONTENT:
<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @since         0.10.0
 * @license       https://opensource.org/licenses/mit-license.php MIT License
 * @var \App\View\AppView $this
 */

$cakeDescription = 'CakePHP: the rapid development php framework';
?>
<!DOCTYPE html>
<html>
<head>
    <?= $this->Html->charset() ?>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>
        <?= $cakeDescription ?>:
        <?= $this->fetch('title') ?>
    </title>
    <?= $this->Html->meta('icon') ?>

    <?= $this->Html->css(['normalize.min', 'milligram.min', 'fonts', 'cake']) ?>

    <?= $this->fetch('meta') ?>
    <?= $this->fetch('css') ?>
    <?= $this->fetch('script') ?>
</head>
<body>
    <nav class="top-nav">
        <div class="top-nav-title">
            <a href="<?= $this->Url->build('/') ?>"><span>Cake</span>PHP</a>
        </div>
        <div class="top-nav-links">
            <a target="_blank" rel="noopener" href="https://book.cakephp.org/5/">Documentation</a>
            <a target="_blank" rel="noopener" href="https://api.cakephp.org/">API</a>
        </div>
    </nav>
    <main class="main">
        <div class="container">
            <?= $this->Flash->render() ?>
            <?= $this->fetch('content') ?>
        </div>
    </main>
    <footer>
    </footer>
</body>
</html>


// ----- END FILE: templates/layout/default.php -----

FILE: templates/layout/minimal.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 30 bytes
CONTENT:
<?= $this->fetch('content') ?>

// ----- END FILE: templates/layout/minimal.php -----

FILE: templates/layout/ajax.php
LAST MODIFIED: 2025-07-14 07:03:35
SIZE: 656 bytes
CONTENT:
<?php
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @since         0.10.0
 * @license       https://opensource.org/licenses/mit-license.php MIT License
 * @var \App\View\AppView $this
 */

echo $this->fetch('content');


// ----- END FILE: templates/layout/ajax.php -----

FILE: plugins/AdminTheme/templates/email/html/default.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 16 bytes
CONTENT:
<?= $bodyHtml ?>

// ----- END FILE: plugins/AdminTheme/templates/email/html/default.php -----

FILE: plugins/AdminTheme/templates/email/text/default.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 17 bytes
CONTENT:
<?= $bodyPlain ?>

// ----- END FILE: plugins/AdminTheme/templates/email/text/default.php -----

FILE: plugins/AdminTheme/templates/element/ImageGalleries/gallery_card.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 5193 bytes
CONTENT:
<?php
/**
 * Gallery Card Element for Grid View
 * 
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\ImageGallery $gallery Gallery entity
 * @var array $options Card options
 */

$defaults = [
    'showActions' => true,
    'showPreview' => true,
    'cardClass' => 'card h-100 gallery-card',
];
$config = array_merge($defaults, $options ?? []);
?>

<div class="<?= h($config['cardClass']) ?>">
    <!-- Card Header -->
    <div class="card-header d-flex justify-content-between align-items-center">
        <h6 class="mb-0"><?= h($gallery->name) ?></h6>
        <?php if ($gallery->is_published): ?>
            <span class="badge bg-success">
                <i class="fas fa-eye"></i> <?= __('Published') ?>
            </span>
        <?php else: ?>
            <span class="badge bg-secondary">
                <i class="fas fa-eye-slash"></i> <?= __('Draft') ?>
            </span>
        <?php endif; ?>
    </div>

    <!-- Card Body -->
    <?php if ($config['showPreview']): ?>
    <div class="card-body p-0">
        <?php if (!empty($gallery->images)): ?>
            <!-- Preview Image -->
            <?php if ($gallery->hasPreviewImage()): ?>
                <div class="gallery-preview-overlay" data-gallery-id="gallery-<?= $gallery->id ?>">
                    <img src="<?= h($gallery->getPreviewImageUrl()) ?>" 
                         alt="<?= h($gallery->name) ?>"
                         class="gallery-preview-image">
                    <div class="gallery-image-count">
                        <i class="fas fa-images me-1"></i><?= $gallery->getImageCount() ?>
                    </div>
                    <div class="position-absolute top-50 start-50 translate-middle gallery-play-button">
                        <i class="fas fa-play-circle fa-3x text-white"></i>
                    </div>
                </div>
            <?php else: ?>
                <!-- Use first gallery image as preview -->
                <?= $this->element('image/icon', [
                    'model' => $gallery->images[0],
                    'icon' => $gallery->images[0]->tinyImageUrl,
                    'preview' => $gallery->images[0]->mediumImageUrl,
                    'class' => 'gallery-preview-thumb'
                ]) ?>
            <?php endif; ?>

            <!-- Hidden gallery for slideshow using GalleryCell -->
            <div class="d-none">
                <?= $this->cell('Gallery::display', [
                    $gallery->id,
                    'admin',
                    $gallery->name
                ]) ?>
            </div>
        <?php else: ?>
            <!-- No images state -->
            <div class="text-center text-muted py-5">
                <i class="fas fa-images fa-2x mb-2"></i>
                <p><?= __('No images') ?></p>
            </div>
        <?php endif; ?>

        <!-- Gallery Description -->
        <?php if ($gallery->description): ?>
            <div class="p-3">
                <p class="card-text small">
                    <?= $this->Text->truncate(h($gallery->description), 100) ?>
                </p>
            </div>
        <?php endif; ?>
    </div>
    <?php endif; ?>

    <!-- Card Footer with Actions -->
    <?php if ($config['showActions']): ?>
    <div class="card-footer">
        <div class="d-flex gap-2">
            <!-- View Button -->
            <?= $this->Html->link(
                '<i class="fas fa-eye"></i> ' . __('View'),
                ['action' => 'view', $gallery->id],
                ['class' => 'btn btn-outline-primary btn-sm flex-fill', 'escape' => false]
            ) ?>

            <!-- Edit Button -->
            <?= $this->Html->link(
                '<i class="fas fa-edit"></i> ' . __('Edit'),
                ['action' => 'edit', $gallery->id],
                ['class' => 'btn btn-outline-secondary btn-sm flex-fill', 'escape' => false]
            ) ?>

            <!-- Dropdown Actions -->
            <div class="dropdown">
                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" 
                        type="button" 
                        data-bs-toggle="dropdown">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <?= $this->Html->link(
                            __('Manage Images'),
                            ['action' => 'manageImages', $gallery->id],
                            ['class' => 'dropdown-item']
                        ) ?>
                    </li>
                    <li><hr class="dropdown-divider"></li>
                    <li>
                        <?= $this->Form->postLink(
                            __('Delete'),
                            ['action' => 'delete', $gallery->id],
                            [
                                'class' => 'dropdown-item text-danger',
                                'confirm' => __('Are you sure you want to delete this gallery?')
                            ]
                        ) ?>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <?php endif; ?>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/ImageGalleries/gallery_card.php -----

FILE: plugins/AdminTheme/templates/element/ImageGalleries/gallery_actions_dropdown.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1899 bytes
CONTENT:
<?php
/**
 * @var \App\Model\Entity\ImageGallery $gallery
 */
?>
<div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
    <div class="dropdown">
        <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        <?= __('Actions') ?>
        </button>
        <ul class="dropdown-menu">
            <li>
                <?= $this->Html->link(
                    '<i class="fas fa-images me-2"></i>' . __('Manage Images'), 
                    ['action' => 'manageImages', $gallery->id], 
                    ['class' => 'dropdown-item', 'escape' => false]
                ) ?>
            </li>
            <li><hr class="dropdown-divider"></li>
            <li>
                <?= $this->Html->link(
                    '<i class="fas fa-edit me-2"></i>' . __('Edit'), 
                    ['action' => 'edit', $gallery->id], 
                    ['class' => 'dropdown-item', 'escape' => false]
                ) ?>
            </li>
            <li>
                <?= $this->Html->link(
                    '<i class="fas fa-eye me-2"></i>' . __('View'), 
                    ['action' => 'view', $gallery->id], 
                    ['class' => 'dropdown-item', 'escape' => false]
                ) ?>
            </li>
            <li><hr class="dropdown-divider"></li>
            <li>
                <?= $this->Form->postLink(
                    '<i class="fas fa-trash me-2"></i>' . __('Delete'), 
                    ['action' => 'delete', $gallery->id], 
                    [
                        'confirm' => __('Are you sure you want to delete the gallery "{0}"?', $gallery->name), 
                        'class' => 'dropdown-item text-danger',
                        'escape' => false
                    ]
                ) ?>
            </li>
        </ul>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/ImageGalleries/gallery_actions_dropdown.php -----

FILE: plugins/AdminTheme/templates/element/image/icon.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 558 bytes
CONTENT:

<?php
// Handle null or empty icon values by falling back to original image URL
$imageUrl = $icon ?: ($model->image ? $model->imageUrl : null);

if ($imageUrl): ?>
    <?= $this->Html->image($imageUrl, [
        'pathPrefix' => '', 
        'alt' => $model->alt_text ?: h($model->name), 
        'class' => 'img-thumbnail'
    ]) ?>
<?php else: ?>
    <div class="text-muted text-center d-flex align-items-center justify-content-center img-thumbnail" style="width: 100px; height: 75px;">
        <i class="fas fa-image fa-2x"></i>
    </div>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/element/image/icon.php -----

FILE: plugins/AdminTheme/templates/element/image_carousel.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1790 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php
/**
 * @var \App\View\AppView $this
 * @var array $images
 * @var string $carouselId
 */
?>
<?php if (!empty($images)): ?>
<h4><?= __('Images') ?></h4>
<div id="<?= $carouselId ?>" class="carousel slide" data-bs-ride="carousel">
    <div class="carousel-inner">
        <?php foreach ($images as $index => $image): ?>
            <div class="carousel-item <?= $index === 0 ? 'active' : '' ?>">
                <?= $this->Html->image(SettingsManager::read('ImageSizes.large', '200') . '/' . $image->image, 
                [
                    'pathPrefix' => 'files/Images/image/',
                    'class' => 'd-block w-100',
                    'alt' => $image->alt_text,
                ]) ?>
                <?php if (empty($hideRemove)) :?>
                <div class="carousel-caption">
                    <?= $this->Form->control('unlink_images[]', [
                        'type' => 'checkbox',
                        'label' => 'Unlink this image',
                        'value' => $image->id,
                        'class' => 'form-check-input'
                    ]) ?>
                </div>
                <?php endif; ?>
            </div>
        <?php endforeach; ?>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#<?= $carouselId ?>" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#<?= $carouselId ?>" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/element/image_carousel.php -----

FILE: plugins/AdminTheme/templates/element/search_form.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1628 bytes
CONTENT:
<?php
/**
 * Search Form Element
 * 
 * @var \App\View\AppView $this
 * @var string|null $searchValue Current search value
 * @var array $options Configuration options
 */

$defaults = [
    'id' => 'search-form',
    'inputId' => 'search-input', 
    'placeholder' => __('Search...'),
    'class' => 'd-flex me-3',
    'buttonClass' => 'btn btn-outline-secondary',
    'inputClass' => 'form-control',
    'showClearButton' => false,
];
$config = array_merge($defaults, $options ?? []);
$searchValue = $searchValue ?? $this->request->getQuery('search');
?>

<form class="<?= h($config['class']) ?>" id="<?= h($config['id']) ?>">
    <div class="input-group">
        <input class="<?= h($config['inputClass']) ?>" 
               type="search" 
               id="<?= h($config['inputId']) ?>" 
               name="search"
               placeholder="<?= h($config['placeholder']) ?>" 
               value="<?= h($searchValue) ?>">
        
        <?php if ($config['showClearButton'] && !empty($searchValue)): ?>
            <button class="btn btn-outline-secondary" type="button" onclick="clearSearch()">
                <i class="fas fa-times"></i>
            </button>
        <?php endif; ?>
        
        <button class="<?= h($config['buttonClass']) ?>" type="submit">
            <i class="fas fa-search"></i>
        </button>
    </div>
</form>

<?php if ($config['showClearButton']): ?>
<script>
function clearSearch() {
    document.getElementById('<?= h($config['inputId']) ?>').value = '';
    document.getElementById('<?= h($config['id']) ?>').dispatchEvent(new Event('submit'));
}
</script>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/element/search_form.php -----

FILE: plugins/AdminTheme/templates/element/evd_dropdown.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1452 bytes
CONTENT:
<div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
    <div class="dropdown">
        <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
        <?= __('Actions') ?>
        </button>
        <ul class="dropdown-menu">
            <li>
                <?= $this->Html->link(
                    __('Edit'), 
                    isset($controller) ? ['controller' => $controller, 'action' => 'edit', $model->id] : ['action' => 'edit', $model->id], 
                    ['class' => 'dropdown-item']
                ) ?>
            </li>
            <li>
                <?= $this->Html->link(
                    __('View'), 
                    isset($controller) ? ['controller' => $controller, 'action' => 'view', $model->id] : ['action' => 'view', $model->id], 
                    ['class' => 'dropdown-item']
                ) ?>
            </li>
            <li><hr class="dropdown-divider"></li>
            <li>
                <?= $this->Form->postLink(
                    __('Delete'), 
                    isset($controller) ? ['controller' => $controller, 'action' => 'delete', $model->id] : ['action' => 'delete', $model->id], 
                    ['confirm' => __('Are you sure you want to delete {0}?', $model->{$display}), 'class' => 'dropdown-item text-danger']
                ) ?>
            </li>
        </ul>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/evd_dropdown.php -----

FILE: plugins/AdminTheme/templates/element/locale_filters.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 763 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var array $locales
 * @var string|null $selectedLocale
 */
?>
<div class="mb-3">
    <div class="btn-group flex-wrap" role="group" aria-label="Locale filters" style="display: flex; flex-wrap: wrap; width: 100%;">
        <?= $this->Html->link(__('All Locales'), ['action' => 'index'], ['class' => 'btn btn-outline-secondary' . (!$selectedLocale ? ' active' : '')]) ?>
        <?php foreach ($locales as $locale): ?>
            <?= $this->Html->link(
                h($locale),
                ['action' => 'index', '?' => ['locale' => $locale]],
                ['class' => 'btn btn-outline-secondary' . ($selectedLocale === $locale ? ' active' : '')]
            ) ?>
        <?php endforeach; ?>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/locale_filters.php -----

FILE: plugins/AdminTheme/templates/element/user_actions.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1277 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<div class="flex-shrink-0 dropdown ms-auto">
    <a href="#" class="d-block link-body-emphasis text-decoration-none dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
        <?php if (isset($profilePic)) : ?>
            <?= $this->Html->image($profilePic, 
            [
                'pathPrefix' => '', 
                'class' => 'rounded-circle',
                'width' => '32',
                'height' => '32',

            ])?>
        <?php else: ?>
            <img src="/img/willow-icon.png" width="32" height="32" class="rounded-circle">
        <?php endif; ?>
    </a>
    <ul class="dropdown-menu dropdown-menu-end text-small shadow">
        <li>
            <?= $this->Html->link(__('Front Site'), '/', ['class' => 'dropdown-item']) ?>
        </li>
        <li>
            <?= $this->Html->link(__('My Account'), ['prefix' => 'Admin', 'controller' => 'Users', 'action' => 'view', $this->Identity->get('id')], ['class' => 'dropdown-item']) ?>
        </li>
        <li><hr class="dropdown-divider"></li>
        <li>
            <?= $this->Html->link(__('Logout'), ['prefix' => 'Admin', 'controller' => 'Users', 'action' => 'logout'], ['class' => 'dropdown-item']) ?>
        </li>
    </ul>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/user_actions.php -----

FILE: plugins/AdminTheme/templates/element/related/comments.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2271 bytes
CONTENT:
<?php $hideColumns = $hideColumns ?? []; ?>
<div class="card mt-4">
    <div class="card-body">
        <h4 class="card-title"><?= __('Related Comments') ?></h4>
        <?php if (!empty($comments)) : ?>
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <?php if (!in_array('User', $hideColumns)) : ?>
                        <th><?= __('User') ?></th>
                        <?php endif; ?>
                        <th><?= __('Content') ?></th>
                        <th><?= __('Display') ?></th>
                        <th><?= __('Inappropriate') ?></th>
                        <th><?= __('Reason') ?></th>
                        <th><?= __('Created') ?></th>
                        <th class="actions"><?= __('Actions') ?></th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($comments as $comment) : ?>
                    <tr>
                        <?php if (!in_array('User', $hideColumns)) : ?>
                        <td><?= $model->hasValue('user') ? $this->Html->link($model->user->username, ['controller' => 'Users', 'action' => 'view', $model->user->id], ['class' => 'btn btn-link']) : '' ?></td>
                        <?php endif; ?>
                        <td><?= h($comment->content) ?></td>
                        <td><?= $comment->display ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-danger">' . __('No') . '</span>'; ?></td>
                        <td><?= $comment->is_inappropriate ? '<span class="badge bg-danger">' . __('Yes') . '</span>' : '<span class="badge bg-success">' . __('No') . '</span>'; ?></td>
                        <td><?= h($comment->inappropriate_reason) ?></td>
                        <td><?= h($comment->created) ?></td>
                        <td class="actions">
                            <?= $this->element('evd_dropdown', ['controller' => 'Comments', 'model' => $comment, 'display' => 'id']); ?>
                        </td>
                    </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
        <?php endif; ?>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/related/comments.php -----

FILE: plugins/AdminTheme/templates/element/related/articles.php
LAST MODIFIED: 2025-07-16 03:36:50
SIZE: 3390 bytes
CONTENT:
<?php $hideColumns = $hideColumns ?? []; ?>
<div class="card mt-4">
    <div class="card-body">
        <h4 class="card-title"><?= __('Related Articles/Pages') ?></h4>
        <?php if (!empty($articles)) : ?>
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <?php if (!in_array('User', $hideColumns)) : ?>
                        <th><?= __('User') ?></th>
                        <?php endif; ?>
                        <th><?= __('Kind') ?></th>
                        <th><?= __('Title') ?></th>
                        <th><?= __('Published') ?></th>
                        <th class="actions"><?= __('Actions') ?></th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($articles as $article) : ?>
                    <tr>
                        <?php if (!in_array('User', $hideColumns)) : ?>
                        <td>
                            <?= $article->hasValue('user') ? $this->Html->link($article->user->username, ['controller' => 'Users', 'action' => 'view', $article->user->id], ['class' => 'btn btn-link']) : '' ?>
                        </td>
                        <?php endif; ?>
                        <td><?= h($article->kind) ?></td>
                        <td>
                            <?php $ruleName = ($article->kind == 'article') ? 'article-by-slug' : 'page-by-slug';?>
                            <?php if ($article->is_published == true): ?>
                                <?= $this->Html->link(
                                    $article->title,
                                    [
                                        'controller' => 'Articles',
                                        'action' => 'view-by-slug',
                                        'slug' => $article->slug,
                                        '_name' => $ruleName,
                                    ],
                                    ['escape' => false]
                                );
                                ?>
                            <?php else: ?>
                                <?= $this->Html->link(
                                    $article->title,
                                    [
                                        'prefix' => 'Admin',
                                        'controller' => 'Articles',
                                        'action' => 'view',
                                        $article->id
                                    ],
                                    ['escape' => false]
                                ) ?>
                            <?php endif; ?>
                        </td>
                        <td>
                            <?= $article->is_published ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-danger">' . __('No') . '</span>'; ?>
                        </td>
                        <td class="actions">
                            <?= $this->element('evd_dropdown', ['controller' => 'Articles', 'model' => $article, 'display' => 'title']); ?>
                        </td>
                    </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
        <?php endif; ?>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/related/articles.php -----

FILE: plugins/AdminTheme/templates/element/empty_state.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2027 bytes
CONTENT:
<?php
/**
 * Empty State Element
 * 
 * @var \App\View\AppView $this
 * @var array $options Configuration options
 */

$defaults = [
    'icon' => 'fas fa-inbox',
    'iconSize' => 'fa-3x',
    'title' => __('No Items Found'),
    'message' => __('There are no items to display.'),
    'actionText' => null,
    'actionUrl' => null,
    'actionClass' => 'btn btn-primary',
    'class' => 'text-center py-5',
    'iconClass' => 'text-muted mb-3',
    'titleClass' => 'text-muted',
    'messageClass' => 'text-muted',
    'type' => 'default', // default, search, error
];
$config = array_merge($defaults, $options ?? []);

// Adjust defaults based on type
switch ($config['type']) {
    case 'search':
        $config['icon'] = $config['icon'] ?: 'fas fa-search';
        $config['title'] = $config['title'] ?: __('No Results Found');
        $config['message'] = $config['message'] ?: __('Try adjusting your search terms or filters.');
        break;
    case 'error':
        $config['icon'] = $config['icon'] ?: 'fas fa-exclamation-triangle';
        $config['title'] = $config['title'] ?: __('Something Went Wrong');
        $config['message'] = $config['message'] ?: __('Please try again later.');
        $config['iconClass'] = 'text-danger mb-3';
        break;
}
?>

<div class="<?= h($config['class']) ?>">
    <i class="<?= h($config['icon']) ?> <?= h($config['iconSize']) ?> <?= h($config['iconClass']) ?>"></i>
    
    <?php if ($config['title']): ?>
        <h4 class="<?= h($config['titleClass']) ?>"><?= h($config['title']) ?></h4>
    <?php endif; ?>
    
    <?php if ($config['message']): ?>
        <p class="<?= h($config['messageClass']) ?>"><?= h($config['message']) ?></p>
    <?php endif; ?>
    
    <?php if ($config['actionText'] && $config['actionUrl']): ?>
        <?= $this->Html->link(
            '<i class="fas fa-plus"></i> ' . h($config['actionText']),
            $config['actionUrl'],
            ['class' => $config['actionClass'], 'escape' => false]
        ) ?>
    <?php endif; ?>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/empty_state.php -----

FILE: plugins/AdminTheme/templates/element/seo_display_fields.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3175 bytes
CONTENT:
<div class="accordion mb-3" id="seoAccordion">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingSeoFields">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#seoFields" aria-expanded="false" aria-controls="seoFields">
                <?= __('SEO Fields') ?>
            </button>
        </h2>
        <div id="seoFields" class="accordion-collapse collapse" aria-labelledby="headingSeoFields" data-bs-parent="#seoAccordion">
            <div class="accordion-body">
            <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Meta Description') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($model->meta_description)); ?></p>
                        </div>
                    </div>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Meta Keywords') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($model->meta_keywords)); ?></p>
                        </div>
                    </div>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Facebook Description') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($model->facebook_description)); ?></p>
                        </div>
                    </div>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Linkedin Description') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($model->linkedin_description)); ?></p>
                        </div>
                    </div>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Instagram Description') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($model->instagram_description)); ?></p>
                        </div>
                    </div>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Twitter Description') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($model->twitter_description)); ?></p>
                        </div>
                    </div>
                <?php if (!isset($hideWordCount)) : ?>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Word Count') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($model->word_count)); ?></p>
                        </div>
                    </div>
                <?php endif; ?>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/seo_display_fields.php -----

FILE: plugins/AdminTheme/templates/element/actions_card.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4371 bytes
CONTENT:
<?php
use Cake\Core\Configure;
use Cake\Utility\Inflector;

$modelNamePlural = Inflector::pluralize($modelName);
$debugOnlyOptions = $debugOnlyOptions ?? [];
$controllerIndexAction = $controllerIndexAction ?? 'index';
$entityDisplayName = $entityDisplayName ?? '';
?>

<div class="page-actions-floating">
    <div class="btn-group" role="group" aria-label="<?= __('Page Actions') ?>">

            <?= $this->Html->link(
                '<i class="fas fa-list me-1"></i>' . __('List {0}', [$modelNamePlural]),
                [
                    'controller' => $controllerName,
                    'action' => $controllerIndexAction,
                    '?' => isset($urlParams) ? $urlParams : [],
                ],
                ['class' => 'btn btn-secondary', 'escape' => false]
            ) ?>

            <?php if (!in_array($this->request->getParam('action'), ['add', 'view', 'bulkUpload', 'sendEmail'])): ?>
                <?php if (!isset($hideView)) : ?>
                    <?= $this->Html->link(
                        '<i class="fas fa-eye me-1"></i>' . __('View'),
                        [
                            'controller' => $controllerName,
                            'action' => 'view',
                            $entity->id,
                            '?' => isset($urlParams) ? $urlParams : [],
                        ],
                        ['class' => 'btn btn-primary', 'escape' => false]
                    ) ?>
                <?php endif; ?>
            <?php endif; ?>

            <?php if (!isset($hideNew)) : ?>
                <?php if (
                    (Configure::read('debug') && in_array('add', $debugOnlyOptions))
                    || !in_array('add', $debugOnlyOptions)
                    ) : ?>
                    <?= $this->Html->link(
                        '<i class="fas fa-plus me-1"></i>' . __('New'),
                        [
                            'controller' => $controllerName,
                            'action' => 'add',
                            '?' => isset($urlParams) ? $urlParams : []
                        ],
                        ['class' => 'btn btn-success', 'escape' => false]
                    ) ?>
                <?php endif; ?>
            <?php endif; ?>

            <?php if (!in_array($this->request->getParam('action'), ['add', 'edit', 'bulkUpload', 'sendEmail'])): ?>
                <?php if (!isset($hideEdit)) : ?>
                    <?= $this->Html->link(
                        '<i class="fas fa-edit me-1"></i>' . __('Edit'),
                        [
                            'controller' => $controllerName,
                            'action' => 'edit',
                            $entity->id,
                            '?' => isset($urlParams) ? $urlParams : []
                        ],
                        ['class' => 'btn btn-warning', 'escape' => false]
                    ) ?>
                <?php endif; ?>
            <?php endif; ?>


            <?php if (!in_array($this->request->getParam('action'), ['add', 'bulkUpload', 'sendEmail'])): ?>
                <?php if (!isset($hideDelete)) : ?>
                    <?php
                        $customConfirm = __('Are you sure you want to delete {0}?', $entityDisplayName);
                        if (isset($confirm)) {
                            $customConfirm = $confirm;
                        }
                    ?>

                    <?php if (empty($debugOnlyOptions) || in_array('delete', $debugOnlyOptions) && Configure::read('debug')) : ?>
                        <?= $this->Form->postLink(
                            '<i class="fas fa-trash me-1"></i>' . __('Delete'),
                            [
                                'controller' => $controllerName,
                                'action' => 'delete',
                                $entity->id,
                                '?' => isset($urlParams) ? $urlParams : []
                            ],
                            [
                                'confirm' => $customConfirm, 
                                'class' => 'btn btn-danger',
                                'escape' => false
                            ]
                        ) ?>
                    <?php endif; ?>
                <?php endif; ?>
            <?php endif; ?>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/actions_card.php -----

FILE: plugins/AdminTheme/templates/element/tree/page_tree.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3875 bytes
CONTENT:
<ul class="list-group sortable-list" data-level="<?= $level ?>">
    <?php foreach ($articles as $article): ?>
        <li class="list-group-item list-group-item-action sortable-item py-2 px-3 border" data-id="<?= $article['id'] ?>">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="d-flex align-items-center">
                    <span class="handle me-2">☰</span>
                    <?php
                    if ($article->is_published) {
                        $title = $this->Html->link(
                            html_entity_decode($article['title']),
                            [
                                'controller' => 'Articles',
                                'action' => 'view-by-slug',
                                'slug' => $article->slug,
                                '_name' => 'page-by-slug'
                            ]
                        );
                    } else {
                        $title = html_entity_decode($article['title']);
                    }
                    ?>
                    <span class="me-3"><?= $title ?></span>
                    <span class="badge me-3 <?= $article->is_published ? 'bg-success' : 'bg-secondary' ?>">
                        <?= $article->is_published ? 'Published' : 'Unpublished' ?>
                    </span>
                    <?= $this->Html->link(
                        '<span class="badge bg-info me-3">' . __('{0} Views', $article->view_count) . '</span>',
                        [
                            'prefix' => 'Admin',
                            'controller' => 'PageViews',
                            'action' => 'pageViewStats',
                            $article['id']
                        ],
                        [
                            'escape' => false,
                            'class' => 'ms-2'
                        ]
                    ) ?>
                </div>
                <div class="btn-group" role="group">
                    <div class="btn-group">
                        <div class="dropdown">
                            <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <?= __('Actions') ?>
                            </button>
                            <ul class="dropdown-menu">
                                <li><?= $this->Html->link(__('Add'), ['action' => 'add', '?' => ['kind' => 'page', 'parent_id' => $article['id']]], ['class' => 'dropdown-item']) ?></li>
                                <li><?= $this->Html->link(__('Edit'), ['action' => 'edit', $article['id'], '?' => ['kind' => 'page', 'parent_id' => $article['parent_id']]], ['class' => 'dropdown-item']) ?></li>
                                <li><?= $this->Html->link(__('View'), ['action' => 'view', $article['id'], '?' => ['kind' => 'page']], ['class' => 'dropdown-item']) ?></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $article['id'], '?' => ['kind' => 'page']], ['confirm' => __('Are you sure you want to delete {0}?', $article->title), 'class' => 'dropdown-item text-danger']) ?></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="children-container">
                <?php if (!empty($article['children'])): ?>
                    <?= $this->element('tree/page_tree', ['articles' => $article['children'], 'level' => $level + 1]) ?>
                <?php else: ?>
                    <ul class="list-group sortable-list"></ul>
                <?php endif; ?>
            </div>
        </li>
    <?php endforeach; ?>
</ul>

// ----- END FILE: plugins/AdminTheme/templates/element/tree/page_tree.php -----

FILE: plugins/AdminTheme/templates/element/tree/tag_tree.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2272 bytes
CONTENT:
<ul class="list-group sortable-list" data-level="<?= $level ?>">
    <?php foreach ($tags as $tag): ?>
        <li class="list-group-item list-group-item-action sortable-item py-2 px-3 border" data-id="<?= $tag['id'] ?>">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="d-flex align-items-center">
                    <span class="handle me-2">☰</span>
                    <span class="me-3"><?= $tag->title ?></span>
                </div>
                <div class="btn-group" role="group">
                    <div class="btn-group">
                        <div class="dropdown">
                            <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <?= __('Actions') ?>
                            </button>
                            <ul class="dropdown-menu">
                                <li><?= $this->Html->link(__('Add'), ['action' => 'add', '?' => ['parent_id' => $tag['id']]], ['class' => 'dropdown-item']) ?></li>
                                <li><?= $this->Html->link(__('Edit'), ['action' => 'edit', $tag['id'], '?' => ['parent_id' => $tag['parent_id']]], ['class' => 'dropdown-item']) ?></li>
                                <li><?= $this->Html->link(__('View'), ['action' => 'view', $tag['id']], ['class' => 'dropdown-item']) ?></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $tag['id']], ['confirm' => __('Are you sure you want to delete {0}?', $tag->title), 'class' => 'dropdown-item text-danger']) ?></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="children-container">
                <?php if (!empty($tag['children'])): ?>
                    <?= $this->element('tree/tag_tree', ['tags' => $tag['children'], 'level' => $level + 1]) ?>
                <?php else: ?>
                    <ul class="list-group sortable-list"></ul>
                <?php endif; ?>
            </div>
        </li>
    <?php endforeach; ?>
</ul>

// ----- END FILE: plugins/AdminTheme/templates/element/tree/tag_tree.php -----

FILE: plugins/AdminTheme/templates/element/form/seo.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4826 bytes
CONTENT:
<div class="accordion mb-3" id="seoAccordion">
    <div class="accordion-item">
        <h2 class="accordion-header" id="headingSeoFields">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#seoFields" aria-expanded="false" aria-controls="seoFields">
                <?= __('SEO Fields') ?>
            </button>
        </h2>
        <div id="seoFields" class="accordion-collapse collapse" aria-labelledby="headingSeoFields" data-bs-parent="#seoAccordion">
            <div class="accordion-body">
                <div class="mb-3">
                    <?php echo $this->Form->control('meta_title', ['class' => 'form-control' . ($this->Form->isFieldError('meta_title') ? ' is-invalid' : '')]); ?>
                        <?php if ($this->Form->isFieldError('meta_title')): ?>
                        <div class="invalid-feedback">
                            <?= $this->Form->error('meta_title') ?>
                        </div>
                    <?php endif; ?>
                </div>
                <div class="mb-3">
                    <?php echo $this->Form->control('meta_description', ['class' => 'form-control' . ($this->Form->isFieldError('meta_description') ? ' is-invalid' : '')]); ?>
                        <?php if ($this->Form->isFieldError('meta_description')): ?>
                        <div class="invalid-feedback">
                            <?= $this->Form->error('meta_description') ?>
                        </div>
                    <?php endif; ?>
                </div>
                <div class="mb-3">
                    <?php echo $this->Form->control('meta_keywords', ['class' => 'form-control' . ($this->Form->isFieldError('meta_keywords') ? ' is-invalid' : '')]); ?>
                        <?php if ($this->Form->isFieldError('meta_keywords')): ?>
                        <div class="invalid-feedback">
                            <?= $this->Form->error('meta_keywords') ?>
                        </div>
                    <?php endif; ?>
                </div>
                <div class="mb-3">
                    <?php echo $this->Form->control('facebook_description', ['class' => 'form-control' . ($this->Form->isFieldError('facebook_description') ? ' is-invalid' : '')]); ?>
                        <?php if ($this->Form->isFieldError('facebook_description')): ?>
                        <div class="invalid-feedback">
                            <?= $this->Form->error('facebook_description') ?>
                        </div>
                    <?php endif; ?>
                </div>
                <div class="mb-3">
                    <?php echo $this->Form->control('linkedin_description', ['class' => 'form-control' . ($this->Form->isFieldError('linkedin_description') ? ' is-invalid' : '')]); ?>
                        <?php if ($this->Form->isFieldError('linkedin_description')): ?>
                        <div class="invalid-feedback">
                            <?= $this->Form->error('linkedin_description') ?>
                        </div>
                    <?php endif; ?>
                </div>
                <div class="mb-3">
                    <?php echo $this->Form->control('instagram_description', ['class' => 'form-control' . ($this->Form->isFieldError('instagram_description') ? ' is-invalid' : '')]); ?>
                        <?php if ($this->Form->isFieldError('instagram_description')): ?>
                        <div class="invalid-feedback">
                            <?= $this->Form->error('instagram_description') ?>
                        </div>
                    <?php endif; ?>
                </div>
                <div class="mb-3">
                    <?php echo $this->Form->control('twitter_description', ['class' => 'form-control' . ($this->Form->isFieldError('twitter_description') ? ' is-invalid' : '')]); ?>
                        <?php if ($this->Form->isFieldError('twitter_description')): ?>
                        <div class="invalid-feedback">
                            <?= $this->Form->error('twitter_description') ?>
                        </div>
                    <?php endif; ?>
                </div>
                <?php if (!isset($hideWordCount)) : ?>
                <div class="mb-3">
                    <?php echo $this->Form->control('word_count', ['type' => 'number', 'class' => 'form-control' . ($this->Form->isFieldError('word_count') ? ' is-invalid' : '')]); ?>
                    <?php if ($this->Form->isFieldError('word_count')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('word_count') ?>
                    </div>
                    <?php endif; ?>
                </div>
                <?php endif; ?>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/form/seo.php -----

FILE: plugins/AdminTheme/templates/element/form/article.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 9079 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php $kind = $this->request->getQuery('kind', 'article'); ?>
<div class="mb-3">
    <?php echo $this->Form->control('title', ['class' => 'form-control' . ($this->Form->isFieldError('title') ? ' is-invalid' : '')]); ?>
        <?php if ($this->Form->isFieldError('title')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('title') ?>
        </div>
    <?php endif; ?>
</div>
<div class="mb-3">
    <?php echo $this->Form->control('slug', ['class' => 'form-control' . ($this->Form->isFieldError('slug') ? ' is-invalid' : '')]); ?>
        <?php if ($this->Form->isFieldError('slug')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('slug') ?>
        </div>
    <?php endif; ?>
</div>


<?php if(SettingsManager::read('Editing.editor') == 'markdownit') : ?>
    <?= $this->element('form/article_body_markdownit'); ?>
<?php elseif(SettingsManager::read('Editing.editor') == 'trumbowyg') : ?>
    <div class="mb-3">
            <?php echo $this->Form->control('body',
                [
                    'id' => 'article-body',
                    'rows' => '30',
                    'class' => 'form-control' . ($this->Form->isFieldError('body') ? ' is-invalid' : '')
                ]); ?>
                <?php if ($this->Form->isFieldError('body')): ?>
                <div class="invalid-feedback">
                    <?= $this->Form->error('body') ?>
                </div>
            <?php endif; ?>
        </div>
<?php else: ?>
    <!-- Default fallback editor -->
    <div class="mb-3">
            <?php echo $this->Form->control('body',
                [
                    'id' => 'article-body',
                    'rows' => '30',
                    'class' => 'form-control' . ($this->Form->isFieldError('body') ? ' is-invalid' : '')
                ]); ?>
                <?php if ($this->Form->isFieldError('body')): ?>
                <div class="invalid-feedback">
                    <?= $this->Form->error('body') ?>
                </div>
            <?php endif; ?>
        </div>
<?php endif; ?>

<div class="mb-3">
    <?php echo $this->Form->control('lede', ['class' => 'form-control' . ($this->Form->isFieldError('lede') ? ' is-invalid' : '')]); ?>
        <?php if ($this->Form->isFieldError('lede')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('lede') ?>
        </div>
    <?php endif; ?>
</div>
<div class="mb-3">
    <?php echo $this->Form->control('summary',
        [
            'class' => 'form-control' . ($this->Form->isFieldError('summary') ? ' is-invalid' : '')
        ]); ?>
    <?php if ($this->Form->isFieldError('summary')): ?>
    <div class="invalid-feedback">
        <?= $this->Form->error('summary') ?>
    </div>
    <?php endif; ?>
</div>
<?php if ($kind == 'article') : ?>
<div class="mb-3">
    <div class="me-3">
        <?php echo $this->Form->label('tags._ids', __('Select Tags'), ['class' => 'form-label']); ?>
        <?php echo $this->Form->select('tags._ids', $tags, [
            'multiple' => true,
            'data-live-search' => 'true',
            'data-actions-box' => 'true',
            'id' => 'tags-select',
            'class' => 'form-select' . ($this->Form->isFieldError('tags._ids') ? ' is-invalid' : '')
        ]); ?>
        <?php if ($this->Form->isFieldError('tags._ids')): ?>
            <div class="invalid-feedback">
                <?= $this->Form->error('tags._ids') ?>
            </div>
        <?php endif; ?>
    </div>
</div>
<?php endif; ?>
<div class="mb-3">
    <?php if ($article->tags && SettingsManager::read('AI.enabled') && SettingsManager::read('AI.articleTags')): ?>
        <?php if ($kind == 'article') : ?>
        <div class="form-check d-flex align-items-center">
            <?= $this->Form->checkbox("regenerateTags", [
                'checked' => false,
                'class' => 'form-check-input' . ($this->Form->isFieldError('regenerateTags') ? ' is-invalid' : '')
            ]) ?>
            <label class="form-check-label ms-2" for="regenerate-tags">
                <?= __('Auto Tag') ?>
            </label>
            <?php if ($this->Form->isFieldError('regenerateTags')): ?>
                <div class="invalid-feedback">
                    <?= $this->Form->error('regenerateTags') ?>
                </div>
            <?php endif; ?>
        </div>
        <?php endif; ?>
    <?php endif; ?>
    
    <div class="form-check">
        <?php echo $this->Form->checkbox('is_published', [
            'class' => 'form-check-input' . ($this->Form->isFieldError('is_published') ? ' is-invalid' : '')
        ]); ?>
        <label class="form-check-label" for="is-published">
            <?= __('Published') ?>
        </label>
        <?php if ($this->Form->isFieldError('is_published')): ?>
            <div class="invalid-feedback">
                <?= $this->Form->error('is_published') ?>
            </div>
        <?php endif; ?>
    </div>

    <?php if ($kind == 'article') : ?>
    <div class="form-check">
        <?php echo $this->Form->checkbox('featured', [
            'class' => 'form-check-input' . ($this->Form->isFieldError('featured') ? ' is-invalid' : '')
        ]); ?>
        <label class="form-check-label" for="featured">
            <?= __('Featured') ?>
        </label>
        <?php if ($this->Form->isFieldError('featured')): ?>
            <div class="invalid-feedback">
                <?= $this->Form->error('featured') ?>
            </div>
        <?php endif; ?>
    </div>
    <?php endif; ?>

    <?php if ($kind == 'page' && SettingsManager::read('SitePages.mainMenuShow') == 'selected') : ?>
    <div class="form-check">
        <?php echo $this->Form->checkbox('main_menu', [
            'class' => 'form-check-input' . ($this->Form->isFieldError('main_menu') ? ' is-invalid' : '')
        ]); ?>
        <label class="form-check-label" for="main_menu">
            <?= __('Main Menu') ?>
        </label>
        <?php if ($this->Form->isFieldError('main_menu')): ?>
            <div class="invalid-feedback">
                <?= $this->Form->error('main_menu') ?>
            </div>
        <?php endif; ?>
    </div>
    <?php endif; ?>

</div>
<div class="mb-3">
    <?php $parentId = $this->request->getQuery('parent_id'); ?>
    <?php if ($kind == 'page' || $parentId) : ?>
        <?php echo $this->Form->control('parent_id',
            [
                'empty' => __('None'),
                'options' => $parentArticles,
                'default' => $parentId,
                'class' => 'form-control' . ($this->Form->isFieldError('parent_id') ? ' is-invalid' : '')
            ]); ?>
            <?php if ($this->Form->isFieldError('parent_id')): ?>
            <div class="invalid-feedback">
                <?= $this->Form->error('parent_id') ?>
            </div>
        <?php endif; ?>
    <?php endif; ?>
</div>
<div class="mb-3">
    <?= $this->Form->control('image', [
        'type' => 'file',
        'label' => [
            'text' => __('Main Image'),
            'class' => 'form-label'
        ],
        'class' => 'form-control' . ($this->Form->isFieldError('image') ? ' is-invalid' : ''),
        'id' => 'customFile'
    ]) ?>
    <?php if ($this->Form->isFieldError('image')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('image') ?>
        </div>
    <?php endif; ?>
</div>

<?php if (!empty($article->image)): ?>
    <div class="mb-3">
        <?= $this->element('image/icon', ['model' => $article, 'icon' => $article->teenyImageUrl, 'preview' => $article->extraLargeImageUrl]); ?>
    </div>
<?php endif; ?>

<?php if (SettingsManager::read('PagesAndArticles.additionalImages')) : ?>
    <div class="mb-3">
        <label class="form-label" for="customFileMultiple"><?= __('Image Uploads') ?></label>
        <?= $this->Form->file('image_uploads[]', [
            'multiple' => true,
            'class' => 'form-control' . ($this->Form->isFieldError('image_uploads') ? ' is-invalid' : ''),
            'id' => 'customFileMultiple'
        ]) ?>
        <?php if ($this->Form->isFieldError('image_uploads')): ?>
            <div class="invalid-feedback">
                <?= $this->Form->error('image_uploads') ?>
            </div>
        <?php endif; ?>
    </div>

    <?php if (!empty($article->images)) : ?>
        <div class="mb-3">
        <?= $this->element('image_carousel', [
            'images' => $article->images,
            'carouselId' => $carouselId ?? 'imageCarouselID'
        ]) ?>
        </div>
    <?php endif; ?>
            
<?php endif; ?>

<div class="mb-3">
    <?php echo $this->Form->control('user_id', [
        'default' => $this->Identity->get('id'),
        'options' => $users,
        'class' => 'form-select' . ($this->Form->isFieldError('user_id') ? ' is-invalid' : '')
    ]); ?>
    <?php if ($this->Form->isFieldError('user_id')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('user_id') ?>
        </div>
    <?php endif; ?>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/form/article.php -----

FILE: plugins/AdminTheme/templates/element/form/article_body_markdownit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3741 bytes
CONTENT:
<ul class="nav nav-tabs" id="editorTabs" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" id="editor-tab" data-bs-toggle="tab" href="#editor" role="tab" 
            aria-controls="editor" aria-selected="true">
            <?= __('Body Editor') ?>
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="preview-tab" data-bs-toggle="tab" href="#preview" role="tab" 
            aria-controls="preview" aria-selected="false">
            <?= __('Body Preview') ?>
        </a>
    </li>
</ul>
<div class="tab-content" id="editorTabContent">
    <div class="tab-pane show active" id="editor" role="tabpanel" aria-labelledby="editor-tab">
        <div class="">
            <button type="button" class="btn my-1 btn-secondary" id="insertImageBtn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-images" viewBox="0 0 16 16">
                    <path d="M4.502 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3"/>
                    <path d="M14.002 13a2 2 0 0 1-2 2h-10a2 2 0 0 1-2-2V5A2 2 0 0 1 2 3a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v8a2 2 0 0 1-1.998 2M14 2H4a1 1 0 0 0-1 1h9.002a2 2 0 0 1 2 2v7A1 1 0 0 0 15 11V3a1 1 0 0 0-1-1M2.002 4a1 1 0 0 0-1 1v8l2.646-2.354a.5.5 0 0 1 .63-.062l2.66 1.773 3.71-3.71a.5.5 0 0 1 .577-.094l1.777 1.947V5a1 1 0 0 0-1-1z"/>
                </svg>
                <?= __('Insert Image') ?>
            </button>
            <button type="button" class="btn my-1 btn-secondary" id="insertVideoBtn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-circle" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="M6.271 5.055a.5.5 0 0 1 .52.08L11 7.055a.5.5 0 0 1 0 .89L6.791 9.865a.5.5 0 0 1-.791-.39V5.525a.5.5 0 0 1 .271-.47z"/>
                </svg>
                <?= __('Insert Video') ?>
            </button>
            <button type="button" class="btn my-1 btn-secondary" id="insertGalleryBtn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-collection" viewBox="0 0 16 16">
                    <path d="M2.5 3.5a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-11zm2-2a.5.5 0 0 1 0-1h7a.5.5 0 0 1 0 1h-7zM0 13a1.5 1.5 0 0 0 1.5 1.5h13A1.5 1.5 0 0 0 16 13V6a1.5 1.5 0 0 0-1.5-1.5h-13A1.5 1.5 0 0 0 0 6v7zm1.5.5A.5.5 0 0 1 1 13V6a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5h-13z"/>
                </svg>
                <?= __('Insert Gallery') ?>
            </button>
        </div>
        <div class="mb-3">
            <?php echo $this->Form->control('markdown',
                [
                    'id' => 'article-markdown',
                    'rows' => '30',
                    'class' => 'form-control' . ($this->Form->isFieldError('markdown') ? ' is-invalid' : ''),
                    'label' => false,
                ]); ?>
                <?php if ($this->Form->isFieldError('markdown')): ?>
                <div class="invalid-feedback">
                    <?= $this->Form->error('markdown') ?>
                </div>
            <?php endif; ?>
        </div>
        <?php echo $this->Form->control('body', [
            'type' => 'textarea',
            'id' => 'article-body',
            'style' => 'display: none;'
        ]); ?>
    </div>
    <div class="tab-pane" id="preview" role="tabpanel" aria-labelledby="preview-tab">
        <div class="">
            <div class="card-body border rounded my-3" id="markdown-preview">

            </div>
        </div>
    </div>
</div>
<?= $this->Html->script('AdminTheme.markdown-it-media-insert') ?>

// ----- END FILE: plugins/AdminTheme/templates/element/form/article_body_markdownit.php -----

FILE: plugins/AdminTheme/templates/element/form/tag.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3640 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<div class="mb-3">
    <?php echo $this->Form->control('title', ['class' => 'form-control' . ($this->Form->isFieldError('title') ? ' is-invalid' : '')]); ?>
        <?php if ($this->Form->isFieldError('title')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('title') ?>
        </div>
    <?php endif; ?>
</div>

<div class="mb-3">
    <?php echo $this->Form->control('slug', ['class' => 'form-control' . ($this->Form->isFieldError('slug') ? ' is-invalid' : '')]); ?>
        <?php if ($this->Form->isFieldError('slug')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('slug') ?>
        </div>
    <?php endif; ?>
</div>

<div class="mb-3">
    <?php echo $this->Form->control('description', ['class' => 'form-control' . ($this->Form->isFieldError('description') ? ' is-invalid' : '')]); ?>
        <?php if ($this->Form->isFieldError('description')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('description') ?>
        </div>
    <?php endif; ?>
</div>

<div class="mb-3">
    <?= $this->Form->control('image', [
        'type' => 'file',
        'label' => [
            'text' => __('Main Image'),
            'class' => 'form-label'
        ],
        'class' => 'form-control' . ($this->Form->isFieldError('image') ? ' is-invalid' : ''),
        'id' => 'customFile'
    ]) ?>
    <?php if ($this->Form->isFieldError('image')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('image') ?>
        </div>
    <?php endif; ?>
</div>

<?php if (!empty($tag->image)): ?>
    <div class="mb-3">
        <?= $this->element('image/icon', ['model' => $tag, 'icon' => $tag->smallImageUrl, 'preview' => $tag->extraLargeImageUrl]); ?>
    </div>
<?php endif; ?>

<div class="mb-3">
    <?php $parentId = $this->request->getQuery('parent_id'); ?>
        <?php echo $this->Form->control('parent_id',
            [
                'empty' => __('None'),
                'options' => $parentTags,
                'default' => $parentId,
                'class' => 'form-control' . ($this->Form->isFieldError('parent_id') ? ' is-invalid' : '')
            ]); ?>
        <?php if ($this->Form->isFieldError('parent_id')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('parent_id') ?>
        </div>
        <?php endif; ?>
</div>

<?php if (SettingsManager::read('SitePages.mainTagMenuShow') == 'selected') : ?>
<div class="form-check">
    <?php echo $this->Form->checkbox('main_menu', [
        'class' => 'form-check-input' . ($this->Form->isFieldError('main_menu') ? ' is-invalid' : '')
    ]); ?>
    <label class="form-check-label" for="main_menu">
        <?= __('Main Menu') ?>
    </label>
    <?php if ($this->Form->isFieldError('main_menu')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('main_menu') ?>
        </div>
    <?php endif; ?>
</div>
<?php endif; ?>

<div class="mb-3">
    <?php echo $this->Form->label('articles._ids', __('Tag Articles/Pages'), ['class' => 'form-label']); ?>
    <?php echo $this->Form->select('articles._ids', $articles, [
        'multiple' => true,
        'data-live-search' => 'true',
        'data-actions-box' => 'true',
        'id' => 'articles-select',
        'class' => 'w-100 form-select' . ($this->Form->isFieldError('articles._ids') ? ' is-invalid' : '')
    ]); ?>
    <?php if ($this->Form->isFieldError('articles._ids')): ?>
        <div class="invalid-feedback">
            <?= $this->Form->error('articles._ids') ?>
        </div>
    <?php endif; ?>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/form/tag.php -----

FILE: plugins/AdminTheme/templates/element/associated_images_control.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 338 bytes
CONTENT:
<?php if (!empty($images)): ?>
    <?= $this->element('image_carousel', [
        'images' => $images,
        'carouselId' => $carouselId ?? 'imageCarouselID'
    ]) ?>
<?php endif; ?>
<?= $this->Form->label('image_uploads[]', 'Images') ?>
<?= $this->Form->file('image_uploads[]', ['multiple' => true, 'class' => 'form-control-file']) ?>

// ----- END FILE: plugins/AdminTheme/templates/element/associated_images_control.php -----

FILE: plugins/AdminTheme/templates/element/status_filter.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1560 bytes
CONTENT:
<?php
/**
 * Status Filter Element
 * 
 * @var \App\View\AppView $this
 * @var array $options Configuration options
 */

$defaults = [
    'action' => 'index',
    'buttonText' => __('Status'),
    'class' => 'dropdown',
    'buttonClass' => 'btn btn-outline-secondary dropdown-toggle',
    'menuClass' => 'dropdown-menu',
    'itemClass' => 'dropdown-item',
    'filters' => [
        'all' => ['label' => __('All'), 'params' => []],
        'published' => ['label' => __('Published'), 'params' => ['status' => '1']],
        'unpublished' => ['label' => __('Un-Published'), 'params' => ['status' => '0']],
    ],
    'preserveParams' => true,
];
$config = array_merge($defaults, $options ?? []);

// Get current query params to preserve
$currentParams = $config['preserveParams'] ? $this->request->getQueryParams() : [];
// Remove status from current params so it doesn't get duplicated
unset($currentParams['status']);
?>

<div class="<?= h($config['class']) ?>">
    <button class="<?= h($config['buttonClass']) ?>" type="button" data-bs-toggle="dropdown">
        <?= h($config['buttonText']) ?>
    </button>
    <ul class="<?= h($config['menuClass']) ?>">
        <?php foreach ($config['filters'] as $key => $filter): ?>
            <li>
                <?= $this->Html->link(
                    h($filter['label']),
                    ['action' => $config['action'], '?' => $filter['params'] + $currentParams],
                    ['class' => $config['itemClass']]
                ) ?>
            </li>
        <?php endforeach; ?>
    </ul>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/status_filter.php -----

FILE: plugins/AdminTheme/templates/element/js/semanticui/dropdown.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 80 bytes
CONTENT:
<script>
$('<?= $selector ?>')
  .dropdown({
    clearable: true
  });
</script>

// ----- END FILE: plugins/AdminTheme/templates/element/js/semanticui/dropdown.php -----

FILE: plugins/AdminTheme/templates/element/pretty_message.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 341 bytes
CONTENT:
<?php
$lines = explode("\n", $message);
$output = '';
foreach ($lines as $line) {
    if (strpos($line, 'Stack Trace') !== false) {
        $output .= "<strong>$line</strong><br>";
    } elseif (preg_match('/^#\d+/', $line)) {
        $output .= "<code>$line</code><br>";
    } else {
        $output .= "$line<br>";
    }
}
echo $output;
?>

// ----- END FILE: plugins/AdminTheme/templates/element/pretty_message.php -----

FILE: plugins/AdminTheme/templates/element/media/header.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4780 bytes
CONTENT:
<?php
/**
 * Reusable media header element
 * 
 * @var \App\View\AppView $this
 * @var string $title Title for the header
 * @var array $actions Array of action buttons
 * @var array $viewSwitcher View switcher configuration
 * @var array $searchForm Search form configuration  
 * @var array $filters Additional filter elements
 */

$title = $title ?? __('Media');
$actions = $actions ?? [];
$viewSwitcher = $viewSwitcher ?? null;
$searchForm = $searchForm ?? null;
$filters = $filters ?? [];
?>

<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center">
        <div class="d-flex align-items-center me-auto">
            <?php if ($viewSwitcher): ?>
                <!-- View Switcher -->
                <?php if (isset($viewSwitcher['helper']) && $viewSwitcher['helper'] === 'Gallery'): ?>
                    <?= $this->element('view_switcher', [
                        'currentView' => $viewSwitcher['currentView'],
                        'queryParams' => $viewSwitcher['queryParams'] ?? []
                    ]) ?>
                <?php else: ?>
                    <div class="btn-group me-3" role="group">
                        <?= $this->Html->link(
                            '<i class="fas fa-list"></i>',
                            ['action' => 'index', '?' => ['view' => 'list'] + ($viewSwitcher['queryParams'] ?? [])],
                            [
                                'class' => 'btn ' . (($viewSwitcher['currentView'] ?? 'list') === 'list' ? 'btn-primary' : 'btn-outline-secondary'),
                                'escape' => false,
                                'title' => __('List View'),
                            ]
                        ) ?>
                        <?= $this->Html->link(
                            '<i class="fas fa-th"></i>',
                            ['action' => 'index', '?' => ['view' => 'grid'] + ($viewSwitcher['queryParams'] ?? [])],
                            [
                                'class' => 'btn ' . (($viewSwitcher['currentView'] ?? 'list') === 'grid' ? 'btn-primary' : 'btn-outline-secondary'),
                                'escape' => false,
                                'title' => __('Grid View'),
                            ]
                        ) ?>
                    </div>
                <?php endif; ?>
            <?php endif; ?>

            <?php if ($searchForm): ?>
                <!-- Search Form -->
                <?php if (isset($searchForm['helper']) && $searchForm['helper'] === 'Gallery'): ?>
                    <?= $this->element('search_form', [
                        'searchValue' => $searchForm['value'] ?? null,
                        'options' => [
                            'id' => $searchForm['id'] ?? 'gallery-search-form',
                            'inputId' => $searchForm['inputId'] ?? 'gallery-search',
                            'placeholder' => $searchForm['placeholder'] ?? __('Search galleries...')
                        ]
                    ]) ?>
                <?php else: ?>
                    <form class="d-flex me-3" role="search" id="<?= $searchForm['id'] ?? 'media-search-form' ?>">
                        <div class="input-group">
                            <?= $this->Form->control('search', [
                                'type' => 'search',
                                'id' => $searchForm['inputId'] ?? 'media-search',
                                'class' => 'form-control',
                                'placeholder' => $searchForm['placeholder'] ?? __('Search...'),
                                'value' => h($searchForm['value'] ?? ''),
                                'label' => false,
                            ]) ?>
                            <button class="btn btn-outline-secondary" type="submit">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </form>
                <?php endif; ?>
            <?php endif; ?>

            <?php foreach ($filters as $filter): ?>
                <?= $this->element($filter['element'], $filter['data'] ?? []) ?>
            <?php endforeach; ?>
        </div>
        
        <div class="flex-shrink-0">
            <?php foreach ($actions as $action): ?>
                <?= $this->Html->link(
                    ($action['icon'] ?? '') . ' ' . $action['text'],
                    $action['url'],
                    array_merge([
                        'class' => 'btn ' . ($action['class'] ?? 'btn-primary'),
                        'escape' => false
                    ], $action['options'] ?? [])
                ) ?>
            <?php endforeach; ?>
        </div>
    </div>
</header>

// ----- END FILE: plugins/AdminTheme/templates/element/media/header.php -----

FILE: plugins/AdminTheme/templates/element/media/image_picker_item.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2595 bytes
CONTENT:
<?php

use App\Utility\FileUtility;

/**
 * Image picker item element
 * 
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Image $item Image entity
 * @var array $pickerOptions Picker configuration
 * @var string $viewType View type (grid|list)
 */

$item = $item ?? null;
$pickerOptions = $pickerOptions ?? [];
$viewType = $viewType ?? 'grid';

if (!$item) return;

$imageUrl = $item->getImageUrl('thumbnail');
$imageName = h($item->name);
$imageAlt = h($item->alt_text ?: $item->name);
?>

<?php if ($viewType === 'list'): ?>
    <div class="list-group-item list-group-item-action insert-image" 
         data-id="<?= $item->id ?>"
         data-src="<?= h($item->image) ?>"
         data-name="<?= $imageName ?>"
         data-alt="<?= $imageAlt ?>"
         style="cursor: pointer;">
        <div class="d-flex align-items-center">
            <img src="<?= $imageUrl ?>" 
                 alt="<?= $imageAlt ?>"
                 class="me-3"
                 style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">
            <div class="flex-grow-1">
                <h6 class="mb-1"><?= $imageName ?></h6>
                <?php if ($item->alt_text): ?>
                    <small class="text-muted"><?= $imageAlt ?></small>
                <?php endif; ?>
            </div>
            <div class="ms-2">
                <small class="text-muted"><?= FileUtility::formatFileSize($item->size ?: 0) ?></small>
            </div>
        </div>
    </div>
<?php else: ?>
    <div class="card h-100 image-picker-card">
        <div class="card-body p-2 text-center">
            <img src="<?= $imageUrl ?>" 
                 alt="<?= $imageAlt ?>"
                 class="img-fluid mb-2 insert-image"
                 data-id="<?= $item->id ?>"
                 data-src="<?= h($item->image) ?>"
                 data-name="<?= $imageName ?>"
                 data-alt="<?= $imageAlt ?>"
                 style="max-height: 120px; cursor: pointer; border-radius: 4px;">
            
            <h6 class="card-title small mb-1"><?= $this->Text->truncate($imageName, 25) ?></h6>
            
            <!-- Size selector -->
            <select class="form-select form-select-sm" id="<?= $item->id ?>_size">
                <option value="thumbnail"><?= __('Thumbnail') ?></option>
                <option value="medium"><?= __('Medium') ?></option>
                <option value="large" selected><?= __('Large') ?></option>
                <option value="original"><?= __('Original') ?></option>
            </select>
        </div>
    </div>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/element/media/image_picker_item.php -----

FILE: plugins/AdminTheme/templates/element/media/gallery_picker_item.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6130 bytes
CONTENT:
<?php
/**
 * Gallery picker item element
 * 
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\ImageGallery $item Gallery entity
 * @var array $pickerOptions Picker configuration
 * @var string $viewType View type (grid|list)
 */

$item = $item ?? null;
$pickerOptions = $pickerOptions ?? [];
$viewType = $viewType ?? 'grid';

if (!$item) return;

$galleryName = h($item->name);
$imageCount = $item->getImageCount();
?>

<?php if ($viewType === 'list'): ?>
    <div class="list-group-item list-group-item-action select-gallery" 
         data-gallery-id="<?= $item->id ?>"
         data-gallery-name="<?= $galleryName ?>"
         data-gallery-slug="<?= h($item->slug) ?>"
         data-image-count="<?= $imageCount ?>"
         data-theme="default"
         style="cursor: pointer;">
        <div class="d-flex align-items-center">
            <div class="me-3">
                <?php if ($item->hasPreviewImage()): ?>
                    <img src="<?= h($item->getPreviewImageUrl()) ?>"
                         alt="<?= $galleryName ?>"
                         class="gallery-preview-thumb"
                         style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">
                <?php elseif (!empty($item->images)): ?>
                    <img src="<?= $item->images[0]->getImageUrl('thumbnail') ?>"
                         alt="<?= $galleryName ?>"
                         class="gallery-preview-thumb"
                         style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">
                <?php else: ?>
                    <div class="text-center text-muted d-flex align-items-center justify-content-center"
                         style="width: 50px; height: 50px; border: 1px solid #ddd; border-radius: 4px;">
                        <i class="fas fa-images"></i>
                    </div>
                <?php endif; ?>
            </div>
            <div class="flex-grow-1">
                <h6 class="mb-1"><?= $galleryName ?></h6>
                <?php if ($item->description): ?>
                    <small class="text-muted"><?= $this->Text->truncate(h($item->description), 50) ?></small>
                <?php endif; ?>
            </div>
            <div class="ms-2">
                <span class="badge bg-info me-1">
                    <?= $imageCount ?> <?= __('images') ?>
                </span>
                <?php if ($item->is_published): ?>
                    <span class="badge bg-success">
                        <i class="fas fa-eye"></i> <?= __('Published') ?>
                    </span>
                <?php else: ?>
                    <span class="badge bg-secondary">
                        <i class="fas fa-eye-slash"></i> <?= __('Draft') ?>
                    </span>
                <?php endif; ?>
            </div>
        </div>
    </div>
<?php else: ?>
    <div class="card h-100 gallery-picker-card">
        <div class="card-body p-2">
            <div class="position-relative mb-2">
                <?php if ($item->hasPreviewImage()): ?>
                    <img src="<?= h($item->getPreviewImageUrl()) ?>" 
                         alt="<?= $galleryName ?>"
                         class="img-fluid select-gallery"
                         data-gallery-id="<?= $item->id ?>"
                         data-gallery-name="<?= $galleryName ?>"
                         data-gallery-slug="<?= h($item->slug) ?>"
                         data-image-count="<?= $imageCount ?>"
                         data-theme="default"
                         style="max-height: 120px; width: 100%; object-fit: cover; cursor: pointer; border-radius: 4px;">
                <?php elseif (!empty($item->images)): ?>
                    <img src="<?= $item->images[0]->getImageUrl('thumbnail') ?>" 
                         alt="<?= $galleryName ?>"
                         class="img-fluid select-gallery"
                         data-gallery-id="<?= $item->id ?>"
                         data-gallery-name="<?= $galleryName ?>"
                         data-gallery-slug="<?= h($item->slug) ?>"
                         data-image-count="<?= $imageCount ?>"
                         data-theme="default"
                         style="max-height: 120px; width: 100%; object-fit: cover; cursor: pointer; border-radius: 4px;">
                <?php else: ?>
                    <div class="text-center text-muted d-flex align-items-center justify-content-center select-gallery"
                         data-gallery-id="<?= $item->id ?>"
                         data-gallery-name="<?= $galleryName ?>"
                         data-gallery-slug="<?= h($item->slug) ?>"
                         data-image-count="<?= $imageCount ?>"
                         data-theme="default"
                         style="height: 120px; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
                        <i class="fas fa-images fa-2x"></i>
                    </div>
                <?php endif; ?>
                
                <!-- Image count overlay -->
                <div class="position-absolute top-0 end-0 m-1">
                    <span class="badge bg-dark bg-opacity-75">
                        <i class="fas fa-images me-1"></i><?= $imageCount ?>
                    </span>
                </div>
            </div>
            
            <h6 class="card-title small mb-1"><?= $this->Text->truncate($galleryName, 25) ?></h6>
            
            <div class="d-flex justify-content-between align-items-center">
                <?php if ($item->is_published): ?>
                    <span class="badge bg-success">
                        <i class="fas fa-eye"></i> <?= __('Published') ?>
                    </span>
                <?php else: ?>
                    <span class="badge bg-secondary">
                        <i class="fas fa-eye-slash"></i> <?= __('Draft') ?>
                    </span>
                <?php endif; ?>
                <small class="text-muted"><?= $item->created->format('M j') ?></small>
            </div>
        </div>
    </div>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/element/media/gallery_picker_item.php -----

FILE: plugins/AdminTheme/templates/element/media/picker_container.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3915 bytes
CONTENT:
<?php
/**
 * Reusable media picker container element
 * 
 * @var \App\View\AppView $this
 * @var iterable $results Items to display in picker
 * @var string|null $search Current search term
 * @var string $mediaType Type of media (image, video, gallery)
 * @var array $pickerOptions Picker configuration options
 */

$results = $results ?? [];
$search = $search ?? '';
$mediaType = $mediaType ?? 'media';
$pickerOptions = $pickerOptions ?? [];

// Container ID for the specific media type
$containerId = $pickerOptions['containerId'] ?? $mediaType . '-gallery';
$viewType = $pickerOptions['viewType'] ?? 'grid';
$searchPlaceholder = $pickerOptions['searchPlaceholder'] ?? __('Search {0}...', $mediaType);
$emptyMessage = $pickerOptions['emptyMessage'] ?? __('No {0} found', $mediaType);
?>

<div class="modal-picker-container">
    <!-- Search Header -->
    <div class="picker-search-header p-3 border-bottom">
        <div class="row align-items-center">
            <div class="col">
                <form class="d-flex" role="search" onsubmit="return false;">
                    <div class="input-group">
                        <input type="search" 
                               class="form-control" 
                               id="<?= $mediaType ?>Search"
                               placeholder="<?= $searchPlaceholder ?>"
                               value="<?= h($search) ?>"
                               autocomplete="off">
                        <button class="btn btn-outline-secondary" type="button">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </form>
            </div>
            <?php if (isset($pickerOptions['additionalControls'])): ?>
            <div class="col-auto">
                <?php foreach ($pickerOptions['additionalControls'] as $control): ?>
                    <?= $this->element($control['element'], $control['data'] ?? []) ?>
                <?php endforeach; ?>
            </div>
            <?php endif; ?>
        </div>
    </div>

    <!-- Results Container -->
    <div class="picker-results-container" 
         id="<?= $containerId ?>" 
         style="max-height: 60vh; overflow-y: auto;">
        
        <?php if (empty($results)): ?>
            <div class="text-center p-5">
                <i class="fas fa-search fa-2x text-muted mb-3"></i>
                <p class="text-muted"><?= $emptyMessage ?></p>
                <?php if (empty($search)): ?>
                    <small class="text-muted"><?= __('Enter a search term to find {0}', $mediaType) ?></small>
                <?php endif; ?>
            </div>
        <?php else: ?>
            <?php if ($viewType === 'grid'): ?>
                <div class="row g-3 p-3">
                    <?php foreach ($results as $result): ?>
                    <div class="col-6 col-md-4 col-lg-3">
                        <?= $this->element("media/{$mediaType}_picker_item", [
                            'item' => $result,
                            'pickerOptions' => $pickerOptions
                        ]) ?>
                    </div>
                    <?php endforeach; ?>
                </div>
            <?php else: ?>
                <div class="list-group list-group-flush">
                    <?php foreach ($results as $result): ?>
                        <?= $this->element("media/{$mediaType}_picker_item", [
                            'item' => $result,
                            'pickerOptions' => $pickerOptions,
                            'viewType' => 'list'
                        ]) ?>
                    <?php endforeach; ?>
                </div>
            <?php endif; ?>
            
            <!-- Pagination -->
            <div class="p-3 border-top">
                <?= $this->element('pagination') ?>
            </div>
        <?php endif; ?>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/media/picker_container.php -----

FILE: plugins/AdminTheme/templates/element/media/table_container.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3001 bytes
CONTENT:
<?php
/**
 * Reusable media table container element
 * 
 * @var \App\View\AppView $this
 * @var iterable $items Items to display in table
 * @var array $columns Table column configuration
 * @var array $emptyState Empty state configuration
 * @var string $tableClass CSS classes for table
 */

$items = $items ?? [];
$columns = $columns ?? [];
$emptyState = $emptyState ?? [];
$tableClass = $tableClass ?? 'table table-striped table-hover';
?>

<div id="ajax-target">
    <?php if (empty($items)): ?>
        <?= $this->element('empty_state', $emptyState) ?>
    <?php else: ?>
        <div class="table-responsive">
            <table class="<?= $tableClass ?>">
                <thead>
                    <tr>
                        <?php foreach ($columns as $column): ?>
                        <th<?= isset($column['class']) ? ' class="' . $column['class'] . '"' : '' ?>>
                            <?php if (isset($column['sortable']) && $column['sortable']): ?>
                                <?= $this->Paginator->sort($column['field'], $column['title']) ?>
                            <?php else: ?>
                                <?= $column['title'] ?>
                            <?php endif; ?>
                        </th>
                        <?php endforeach; ?>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($items as $item): ?>
                    <tr>
                        <?php foreach ($columns as $column): ?>
                        <td<?= isset($column['cellClass']) ? ' class="' . $column['cellClass'] . '"' : '' ?>>
                            <?php
                            if (isset($column['element'])) {
                                // Render element for this column
                                echo $this->element($column['element'], array_merge(
                                    ['item' => $item],
                                    $column['elementData'] ?? []
                                ));
                            } elseif (isset($column['callback']) && is_callable($column['callback'])) {
                                // Use callback function
                                echo $column['callback']($item, $this);
                            } elseif (isset($column['field'])) {
                                // Simple field display
                                $value = $item;
                                foreach (explode('.', $column['field']) as $field) {
                                    $value = $value->{$field} ?? '';
                                }
                                echo h($value);
                            }
                            ?>
                        </td>
                        <?php endforeach; ?>
                    </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
        
        <?= $this->element('pagination') ?>
    <?php endif; ?>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/media/table_container.php -----

FILE: plugins/AdminTheme/templates/element/media/grid_container.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1204 bytes
CONTENT:
<?php
/**
 * Reusable media grid container element
 * 
 * @var \App\View\AppView $this
 * @var iterable $items Items to display in grid
 * @var array $emptyState Empty state configuration
 * @var array $gridOptions Grid layout options
 * @var string $itemElement Element to use for each item
 * @var array $itemData Additional data to pass to item element
 */

$items = $items ?? [];
$emptyState = $emptyState ?? [];
$gridOptions = $gridOptions ?? [];
$itemElement = $itemElement ?? 'media/grid_item';
$itemData = $itemData ?? [];

// Default grid classes
$gridClass = $gridOptions['gridClass'] ?? 'row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4';
$colClass = $gridOptions['colClass'] ?? 'col';
?>

<div id="ajax-target">
    <?php if (empty($items)): ?>
        <?= $this->element('empty_state', $emptyState) ?>
    <?php else: ?>
        <div class="<?= $gridClass ?>">
            <?php foreach ($items as $item): ?>
            <div class="<?= $colClass ?>">
                <?= $this->element($itemElement, array_merge(['item' => $item], $itemData)) ?>
            </div>
            <?php endforeach; ?>
        </div>
        
        <?= $this->element('pagination') ?>
    <?php endif; ?>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/media/grid_container.php -----

FILE: plugins/AdminTheme/templates/element/media/video_picker_item.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2999 bytes
CONTENT:
<?php
/**
 * Video picker item element
 * 
 * @var \App\View\AppView $this
 * @var array $item Video data from YouTube API
 * @var array $pickerOptions Picker configuration
 * @var string $viewType View type (grid|list)
 */

$item = $item ?? [];
$pickerOptions = $pickerOptions ?? [];
$viewType = $viewType ?? 'grid';

if (empty($item)) return;

$videoId = h($item['id'] ?? '');
$videoTitle = h($item['title'] ?? '');
$videoThumbnail = h($item['thumbnail'] ?? '');
$videoDescription = h($item['description'] ?? '');
?>

<?php if ($viewType === 'list'): ?>
    <div class="list-group-item list-group-item-action select-video" 
         data-video-id="<?= $videoId ?>"
         data-title="<?= $videoTitle ?>"
         style="cursor: pointer;">
        <div class="d-flex align-items-center">
            <div class="me-3 position-relative">
                <img src="<?= $videoThumbnail ?>" 
                     alt="<?= $videoTitle ?>"
                     style="width: 80px; height: 60px; object-fit: cover; border-radius: 4px;">
                <div class="position-absolute top-50 start-50 translate-middle">
                    <i class="fas fa-play-circle fa-lg text-white"></i>
                </div>
            </div>
            <div class="flex-grow-1">
                <h6 class="mb-1"><?= $this->Text->truncate($videoTitle, 60) ?></h6>
                <?php if ($videoDescription): ?>
                    <small class="text-muted"><?= $this->Text->truncate($videoDescription, 100) ?></small>
                <?php endif; ?>
            </div>
        </div>
    </div>
<?php else: ?>
    <div class="card h-100 video-picker-card">
        <div class="card-body p-2">
            <div class="position-relative mb-2 select-video"
                 data-video-id="<?= $videoId ?>"
                 data-title="<?= $videoTitle ?>"
                 style="cursor: pointer;">
                <img src="<?= $videoThumbnail ?>" 
                     alt="<?= $videoTitle ?>"
                     class="img-fluid"
                     style="width: 100%; height: 120px; object-fit: cover; border-radius: 4px;">
                
                <!-- Play button overlay -->
                <div class="position-absolute top-50 start-50 translate-middle">
                    <i class="fas fa-play-circle fa-2x text-white"></i>
                </div>
                
                <!-- YouTube logo overlay -->
                <div class="position-absolute bottom-0 end-0 m-1">
                    <span class="badge bg-danger">
                        <i class="fab fa-youtube"></i>
                    </span>
                </div>
            </div>
            
            <h6 class="card-title small mb-1"><?= $this->Text->truncate($videoTitle, 30) ?></h6>
            
            <?php if ($videoDescription): ?>
                <small class="text-muted"><?= $this->Text->truncate($videoDescription, 50) ?></small>
            <?php endif; ?>
        </div>
    </div>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/element/media/video_picker_item.php -----

FILE: plugins/AdminTheme/templates/element/trumbowyg-icons.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 33510 bytes
CONTENT:
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><symbol id="trumbowyg-code-insert" viewBox="0 0 16 16"><path d="M2.114 8.063V7.9c1.005-.102 1.497-.615 1.497-1.6V4.503c0-1.094.39-1.538 1.354-1.538h.273V2h-.376C3.25 2 2.49 2.759 2.49 4.352v1.524c0 1.094-.376 1.456-1.49 1.456v1.299c1.114 0 1.49.362 1.49 1.456v1.524c0 1.593.759 2.352 2.372 2.352h.376v-.964h-.273c-.964 0-1.354-.444-1.354-1.538V9.663c0-.984-.492-1.497-1.497-1.6M13.886 7.9v.163c-1.005.103-1.497.616-1.497 1.6v1.798c0 1.094-.39 1.538-1.354 1.538h-.273v.964h.376c1.613 0 2.372-.759 2.372-2.352v-1.524c0-1.094.376-1.456 1.49-1.456V7.332c-1.114 0-1.49-.362-1.49-1.456V4.352C13.51 2.759 12.75 2 11.138 2h-.376v.964h.273c.964 0 1.354.444 1.354 1.538V6.3c0 .984.492 1.497 1.497 1.6"/></symbol><symbol id="trumbowyg-camera-reels" viewBox="0 0 16 16"><path d="M6 3a3 3 0 1 1-6 0 3 3 0 0 1 6 0M1 3a2 2 0 1 0 4 0 2 2 0 0 0-4 0"/><path d="M9 6h.5a2 2 0 0 1 1.983 1.738l3.11-1.382A1 1 0 0 1 16 7.269v7.462a1 1 0 0 1-1.406.913l-3.111-1.382A2 2 0 0 1 9.5 16H2a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2zm6 8.73V7.27l-3.5 1.555v4.35zM1 8v6a1 1 0 0 0 1 1h7.5a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1"/><path d="M9 6a3 3 0 1 0 0-6 3 3 0 0 0 0 6M7 3a2 2 0 1 1 4 0 2 2 0 0 1-4 0"/></symbol><symbol id="trumbowyg-blockquote" viewBox="0 0 72 72"><path d="M21.3 31.9h-.6c.8-1.2 1.9-2.2 3.4-3.2 2.1-1.4 5-2.7 9.2-3.3l-1.4-8.9c-4.7.7-8.5 2.1-11.7 4-2.4 1.4-4.3 3.1-5.8 4.9-2.3 2.7-3.7 5.7-4.5 8.5-.8 2.8-1 5.4-1 7.5 0 2.3.3 4 .4 4.8 0 .1.1.3.1.4 1.2 5.4 6.1 9.5 11.9 9.5 6.7 0 12.2-5.4 12.2-12.2s-5.5-12-12.2-12zm28.2 0h-.6c.8-1.2 1.9-2.2 3.4-3.2 2.1-1.4 5-2.7 9.2-3.3l-1.4-8.9c-4.7.7-8.5 2.1-11.7 4-2.4 1.4-4.3 3.1-5.8 4.9-2.3 2.7-3.7 5.7-4.5 8.5-.8 2.8-1 5.4-1 7.5 0 2.3.3 4 .4 4.8 0 .1.1.3.1.4 1.2 5.4 6.1 9.5 11.9 9.5 6.7 0 12.2-5.4 12.2-12.2s-5.5-12-12.2-12z"/></symbol><symbol id="trumbowyg-bold" viewBox="0 0 72 72"><path d="M51.1 37.8c-1.1-1.4-2.5-2.5-4.2-3.3 1.2-.8 2.1-1.8 2.8-3 1-1.6 1.5-3.5 1.5-5.3 0-2-.6-4-1.7-5.8-1.1-1.8-2.8-3.2-4.8-4.1-2-.9-4.6-1.3-7.8-1.3h-16v42h16.3c2.6 0 4.8-.2 6.7-.7 1.9-.5 3.4-1.2 4.7-2.1 1.3-1 2.4-2.4 3.2-4.1.9-1.7 1.3-3.6 1.3-5.7.2-2.5-.5-4.7-2-6.6zM40.8 50.2c-.6.1-1.8.2-3.4.2h-9V38.5h8.3c2.5 0 4.4.2 5.6.6 1.2.4 2 1 2.7 2 .6.9 1 2 1 3.3 0 1.1-.2 2.1-.7 2.9-.5.9-1 1.5-1.7 1.9-.8.4-1.7.8-2.8 1zm2.6-20.4c-.5.7-1.3 1.3-2.5 1.6-.8.3-2.5.4-4.8.4h-7.7V21.6h7.1c1.4 0 2.6 0 3.6.1s1.7.2 2.2.4c1 .3 1.7.8 2.2 1.7.5.9.8 1.8.8 3-.1 1.3-.4 2.2-.9 3z"/></symbol><symbol id="trumbowyg-close" viewBox="0 0 72 72"><path d="m57 20.5-5.4-5.4-15.5 15.5-15.6-15.5-5.4 5.4L30.7 36 15.1 51.5l5.4 5.4 15.6-15.5 15.5 15.5 5.4-5.4L41.5 36z"/></symbol><symbol id="trumbowyg-create-link" viewBox="0 0 72 72"><path d="m31.1 48.9-6.7 6.7c-.8.8-1.6.9-2.1.9s-1.4-.1-2.1-.9L15 50.4c-1.1-1.1-1.1-3.1 0-4.2l6.1-6.1.2-.2 6.5-6.5c-1.2-.6-2.5-.9-3.8-.9-2.3 0-4.6.9-6.3 2.6L11 41.8c-3.5 3.5-3.5 9.2 0 12.7l5.2 5.2c1.7 1.7 4 2.6 6.3 2.6s4.6-.9 6.3-2.6l6.7-6.7c2.5-2.6 3.1-6.7 1.5-10l-5.9 5.9zm7.6-26.4 6.7-6.7c.8-.8 1.6-.9 2.1-.9s1.4.1 2.1.9l5.2 5.2c1.1 1.1 1.1 3.1 0 4.2l-6.1 6.1-.2.2L42 38c1.2.6 2.5.9 3.8.9 2.3 0 4.6-.9 6.3-2.6l6.7-6.7c3.5-3.5 3.5-9.2 0-12.7l-5.2-5.2c-1.7-1.7-4-2.6-6.3-2.6s-4.6.9-6.3 2.6l-6.7 6.7c-2.7 2.7-3.3 6.9-1.7 10.2l6.1-6.1c0 .1 0 .1 0 0z"/><path d="M44.2 30.5c.2-.2.4-.6.4-.9 0-.3-.1-.6-.4-.9l-2.3-2.3c-.3-.2-.6-.4-.9-.4-.3 0-.6.1-.9.4L25.9 40.6c-.2.2-.4.6-.4.9 0 .3.1.6.4.9l2.3 2.3c.2.2.6.4.9.4.3 0 .6-.1.9-.4l14.2-14.2zm5.7 24.9h-8.5v-5h8.5v-8.9h5.2v8.9h8.5v5h-8.5v8.9h-5.2v-8.9z"/></symbol><symbol id="trumbowyg-del" viewBox="0 0 72 72"><path d="M45.8 45c0 1-.3 1.9-.9 2.8-.6.9-1.6 1.6-3 2.1s-3.1.8-5 .8c-2.1 0-4-.4-5.7-1.1-1.7-.7-2.9-1.7-3.6-2.7-.8-1.1-1.3-2.6-1.5-4.5l-.1-.8-6.7.6v.9c.1 2.8.9 5.4 2.3 7.6 1.5 2.3 3.5 4 6.1 5.1 2.6 1.1 5.7 1.6 9.4 1.6 2.9 0 5.6-.5 8-1.6 2.4-1.1 4.3-2.7 5.6-4.7 1.3-2 2-4.2 2-6.5 0-1.6-.3-3.1-.9-4.5l-.2-.6H44c0 .1 1.8 2.3 1.8 5.5zM29 28.9c-.8-.8-1.2-1.7-1.2-2.9 0-.7.1-1.3.4-1.9.3-.6.7-1.1 1.4-1.6.6-.5 1.4-.9 2.5-1.1 1.1-.3 2.4-.4 3.9-.4 2.9 0 5 .6 6.3 1.7 1.3 1.1 2.1 2.7 2.4 5.1l.1.9 6.8-.5v-.9c-.1-2.5-.8-4.7-2.1-6.7s-3.2-3.5-5.6-4.5c-2.4-1-5.1-1.5-8.1-1.5-2.8 0-5.3.5-7.6 1.4-2.3 1-4.2 2.4-5.4 4.3-1.2 1.9-1.9 3.9-1.9 6.1 0 1.7.4 3.4 1.2 4.9l.3.5h11.8c-2.3-.9-3.9-1.7-5.2-2.9zm13.3-6.2zm-19.6-2.4zM13 34.1h46.1v3.4H13z"/></symbol><symbol id="trumbowyg-em" viewBox="0 0 72 72"><path d="m26 57 10.1-42h7.2L33.2 57H26z"/></symbol><symbol id="trumbowyg-fullscreen" viewBox="0 0 72 72"><path d="M25.2 7.1H7.1v17.7l6.7-6.5 10.5 10.5 4.5-4.5-10.4-10.5zm22 0 6.5 6.7-10.5 10.5 4.5 4.5 10.5-10.4 6.7 6.8V7.1zm.5 36.1-4.5 4.5 10.4 10.5-6.8 6.7h18.1V47.2l-6.7 6.5zm-23.4 0L13.8 53.6l-6.7-6.8v18.1h17.7l-6.5-6.7 10.5-10.5z"/><path fill="currentColor" d="M10.7 28.8h18.1V11.2l-6.6 6.4L11.6 7.1l-4.5 4.5 10.5 10.5zm50.1 0-6.4-6.6 10.5-10.6-4.5-4.5-10.5 10.5-6.7-6.9v18.1zm-.4 36.1 4.5-4.5-10.5-10.5 6.9-6.7H43.2v17.6l6.6-6.4zm-48.8 0 10.5-10.5 6.7 6.9V43.2H11.1l6.5 6.6L7.1 60.4z"/></symbol><symbol id="trumbowyg-h1" viewBox="0 0 72 72"><path d="M6.4 14.9h7.4v16.7h19.1V14.9h7.4V57h-7.4V38H13.8v19H6.4V14.9zm41.4 7.6c1.4 0 2.8-.1 4.1-.4 1.3-.2 2.5-.6 3.6-1.2 1.1-.5 2-1.3 2.8-2.1.8-.9 1.3-1.9 1.5-3.2h5.5v41.2h-7.4v-29H47.8v-5.3z"/></symbol><symbol id="trumbowyg-h2" viewBox="0 0 72 72"><path d="M1.5 14.9h7.4v16.7H28V14.9h7.4V57H28V38H8.8v19H1.5V14.9zm68.7 42H42c0-3.4.9-6.4 2.5-9s3.8-4.8 6.6-6.7c1.3-1 2.7-1.9 4.2-2.9 1.5-.9 2.8-1.9 4-3 1.2-1.1 2.2-2.2 3-3.4.8-1.2 1.2-2.7 1.2-4.3 0-.7-.1-1.5-.3-2.4s-.5-1.6-1-2.4c-.5-.7-1.2-1.3-2.1-1.8-.9-.5-2.1-.7-3.5-.7-1.3 0-2.4.3-3.3.8s-1.6 1.3-2.1 2.2-.9 2-1.2 3.3c-.3 1.3-.4 2.6-.4 4.1h-6.7c0-2.3.3-4.4.9-6.3.6-1.9 1.5-3.6 2.7-5 1.2-1.4 2.7-2.5 4.4-3.3 1.7-.8 3.8-1.2 6.1-1.2 2.5 0 4.6.4 6.3 1.2 1.7.8 3.1 1.9 4.1 3.1 1 1.3 1.8 2.6 2.2 4.1.4 1.5.6 2.9.6 4.2 0 1.6-.3 3.1-.8 4.5-.5 1.3-1.2 2.6-2.1 3.7-.9 1.1-1.8 2.2-2.9 3.1-1.1.9-2.2 1.8-3.4 2.7-1.2.8-2.4 1.6-3.5 2.4-1.2.7-2.3 1.5-3.3 2.2-1 .7-1.9 1.5-2.6 2.3-.7.8-1.3 1.7-1.5 2.6h20.1v5.9z"/></symbol><symbol id="trumbowyg-h3" viewBox="0 0 72 72"><path d="M1.4 14.5h7.4v16.7h19.1V14.5h7.4v42.1h-7.4v-19H8.8v19H1.4V14.5zm51.7 17.9c1.1 0 2.2 0 3.3-.2 1.1-.2 2.1-.5 2.9-1 .9-.5 1.6-1.2 2.1-2 .5-.9.8-1.9.8-3.2 0-1.8-.6-3.2-1.8-4.2-1.2-1.1-2.7-1.6-4.6-1.6-1.2 0-2.2.2-3.1.7-.9.5-1.6 1.1-2.2 1.9-.6.8-1 1.7-1.3 2.7-.3 1-.4 2-.4 3.1h-6.7c.1-2 .5-3.9 1.1-5.6.7-1.7 1.6-3.2 2.7-4.4s2.6-2.2 4.2-2.9c1.6-.7 3.5-1.1 5.6-1.1 1.6 0 3.2.2 4.7.7 1.6.5 2.9 1.2 4.2 2.1 1.2.9 2.2 2.1 3 3.4.7 1.4 1.1 3 1.1 4.8 0 2.1-.5 3.9-1.4 5.4-.9 1.6-2.4 2.7-4.4 3.4v.1c2.4.5 4.2 1.6 5.5 3.5 1.3 1.9 2 4.1 2 6.8 0 2-.4 3.7-1.2 5.3-.8 1.6-1.8 2.9-3.2 3.9-1.3 1.1-2.9 1.9-4.7 2.5-1.8.6-3.6.9-5.6.9-2.4 0-4.5-.3-6.3-1s-3.3-1.7-4.5-2.9c-1.2-1.3-2.1-2.8-2.7-4.5-.6-1.8-1-3.7-1-5.9h6.7c-.1 2.5.5 4.6 1.9 6.3 1.3 1.7 3.3 2.5 5.9 2.5 2.2 0 4.1-.6 5.6-1.9 1.5-1.3 2.3-3.1 2.3-5.4 0-1.6-.3-2.9-.9-3.8-.6-.9-1.5-1.7-2.5-2.2-1-.5-2.2-.8-3.4-.9-1.3-.1-2.6-.2-3.9-.1v-5.2z"/></symbol><symbol id="trumbowyg-h4" viewBox="0 0 72 72"><path d="M1.5 14.9h7.4v16.7H28V14.9h7.4V57H28V38H8.9v19H1.5V14.9zm69 32.3h-5.3V57h-6.4v-9.8H41.2v-6.7l17.7-24.8h6.4v26.2h5.3v5.3zm-24.2-5.3h12.5V23.7h-.1L46.3 41.9z"/></symbol><symbol id="trumbowyg-h5" viewBox="0 0 72 72"><path d="M1.5 14.9h7.4v16.7H28V14.9h7.4V57H28V38H8.9v19H1.5V14.9zm67.543 27.468q0 5.655-3.92 10.154-3.856 4.434-9.383 4.434-6.105 0-9.768-2.892-3.599-2.891-3.728-8.033h6.62q0 2.892 1.735 4.37 1.735 1.478 4.691 1.478 3.085 0 5.142-2.57 2.056-2.57 2.056-6.748 0-8.869-6.426-8.869-4.692 0-7.327 5.463h-5.848l.9-24.292h22.75v5.398H50.02l-.643 12.21q3.02-3.599 8.355-3.599 5.205 0 8.226 3.985 3.084 3.92 3.084 9.511z"/></symbol><symbol id="trumbowyg-h6" viewBox="0 0 72 72"><path d="M1.5 14.9h7.4v16.7H28V14.9h7.4V57H28V38H8.9v19H1.5z"/><path d="M69.188 43.56q0 2.269-.63 4.475-.63 2.206-2.017 4.286t-4.097 3.403q-2.71 1.261-6.366 1.261-4.349 0-7.185-1.324-2.773-1.386-4.16-4.16-1.386-2.836-1.89-6.113t-.505-8.194q0-22.312 14.181-22.312 10.4 0 11.66 10.526h-6.177q-.378-5.61-5.483-5.61-2.521 0-4.223 1.766-1.702 1.701-2.458 4.538-.693 2.836-1.008 5.168-.252 2.269-.252 4.664 1.575-2.458 3.53-3.719 2.016-1.323 5.42-1.323 3.34 0 5.735 1.26 2.458 1.198 3.656 3.215 1.197 2.017 1.701 4.033.568 2.017.568 4.16zm-6.492.252q0-8.193-6.555-8.193-6.68 0-6.68 8.193 0 8.257 6.68 8.257 6.555 0 6.555-8.257z" aria-label="6"/></symbol><symbol id="trumbowyg-horizontal-rule" viewBox="0 0 72 72"><path d="M9.1 32h54v8h-54z"/></symbol><symbol id="trumbowyg-insert-image" viewBox="0 0 72 72"><path d="M64 17v38H8V17h56m8-8H0v54h72V9z"/><path d="M17.5 22C15 22 13 24 13 26.5s2 4.5 4.5 4.5 4.5-2 4.5-4.5-2-4.5-4.5-4.5zM16 50h27L29.5 32zm20-13.8 8.9-8.5L60.2 50H45.9S35.6 35.9 36 36.2z"/></symbol><symbol id="trumbowyg-italic" viewBox="0 0 72 72"><path d="m26 57 10.1-42h7.2L33.2 57H26z"/></symbol><symbol id="trumbowyg-justify-center" viewBox="0 0 72 72"><path d="M9 14h54v8H9zm0 36h54v8H9zm9-18h36v8H18z"/></symbol><symbol id="trumbowyg-justify-full" viewBox="0 0 72 72"><path d="M9 14h54v8H9zm0 36h54v8H9zm0-18h54v8H9z"/></symbol><symbol id="trumbowyg-justify-left" viewBox="0 0 72 72"><path d="M9 14h54v8H9zm0 36h54v8H9zm0-18h36v8H9z"/></symbol><symbol id="trumbowyg-justify-right" viewBox="0 0 72 72"><path d="M9 14h54v8H9zm0 36h54v8H9zm18-18h36v8H27z"/></symbol><symbol id="trumbowyg-link" viewBox="0 0 72 72"><path d="m30.9 49.1-6.7 6.7c-.8.8-1.6.9-2.1.9s-1.4-.1-2.1-.9l-5.2-5.2c-1.1-1.1-1.1-3.1 0-4.2l6.1-6.1.2-.2 6.5-6.5c-1.2-.6-2.5-.9-3.8-.9-2.3 0-4.6.9-6.3 2.6L10.8 42c-3.5 3.5-3.5 9.2 0 12.7l5.2 5.2c1.7 1.7 4 2.6 6.3 2.6s4.6-.9 6.3-2.6l6.7-6.7C38 50.5 38.6 46.3 37 43l-6.1 6.1zm7.6-26.4 6.7-6.7c.8-.8 1.6-.9 2.1-.9s1.4.1 2.1.9l5.2 5.2c1.1 1.1 1.1 3.1 0 4.2l-6.1 6.1-.2.2-6.5 6.5c1.2.6 2.5.9 3.8.9 2.3 0 4.6-.9 6.3-2.6l6.7-6.7c3.5-3.5 3.5-9.2 0-12.7l-5.2-5.2c-1.7-1.7-4-2.6-6.3-2.6s-4.6.9-6.3 2.6l-6.7 6.7c-2.7 2.7-3.3 6.9-1.7 10.2l6.1-6.1z"/><path d="M44.1 30.7c.2-.2.4-.6.4-.9 0-.3-.1-.6-.4-.9l-2.3-2.3c-.2-.2-.6-.4-.9-.4-.3 0-.6.1-.9.4L25.8 40.8c-.2.2-.4.6-.4.9 0 .3.1.6.4.9l2.3 2.3c.2.2.6.4.9.4.3 0 .6-.1.9-.4l14.2-14.2z"/></symbol><symbol id="trumbowyg-ordered-list" viewBox="0 0 72 72"><path d="M27 14h36v8H27zm0 36h36v8H27zm0-18h36v8H27zM11.8 15.8V22h1.8v-7.8h-1.5l-2.1 1 .3 1.3zm.3 22.7.7-.6c1.1-1 2.1-2.1 2.1-3.4 0-1.4-1-2.4-2.7-2.4-1.1 0-2 .4-2.6.8l.5 1.3c.4-.3 1-.6 1.7-.6.9 0 1.3.5 1.3 1.1 0 .9-.9 1.8-2.6 3.3l-1 .9V40H15v-1.5h-2.9zm1.2 15.4c1-.4 1.4-1 1.4-1.8 0-1.1-.9-1.9-2.6-1.9-1 0-1.9.3-2.4.6l.4 1.3c.3-.2 1-.5 1.6-.5.8 0 1.2.3 1.2.8 0 .7-.8.9-1.4.9h-.7v1.3h.7c.8 0 1.6.3 1.6 1.1 0 .6-.5 1-1.4 1-.7 0-1.5-.3-1.8-.5l-.4 1.4c.5.3 1.3.6 2.3.6 2 0 3.2-1 3.2-2.4 0-1.1-.8-1.8-1.7-1.9z"/></symbol><symbol id="trumbowyg-p" viewBox="0 0 72 72"><path d="M47.8 15.1H30.1c-4.7 0-8.5 3.7-8.5 8.4s3.7 8.4 8.4 8.4v25h7V19.8h3v37.1h4.1V19.8h3.7v-4.7z"/></symbol><symbol id="trumbowyg-redo" viewBox="0 0 72 72"><path d="M10.8 51.2c0-5.1 2.1-9.7 5.4-13.1 3.3-3.3 8-5.4 13.1-5.4H46v-12L61.3 36 45.9 51.3V39.1H29.3c-3.3 0-6.4 1.3-8.5 3.5-2.2 2.2-3.5 5.2-3.5 8.5h-6.5z"/></symbol><symbol id="trumbowyg-removeformat" viewBox="0 0 72 72"><path d="M58.2 54.6 52 48.5l3.6-3.6 6.1 6.1 6.4-6.4 3.8 3.8-6.4 6.4 6.1 6.1-3.6 3.6-6.1-6.1-6.4 6.4-3.7-3.8 6.4-6.4zm-36.5-2.5H50V57H21.7zm-2.9-36.9h34.1v6.4H39.5v24.2h-7.4V21.5H18.8v-6.3z"/></symbol><symbol id="trumbowyg-strikethrough" viewBox="0 0 72 72"><path d="M45.8 45c0 1-.3 1.9-.9 2.8-.6.9-1.6 1.6-3 2.1s-3.1.8-5 .8c-2.1 0-4-.4-5.7-1.1-1.7-.7-2.9-1.7-3.6-2.7-.8-1.1-1.3-2.6-1.5-4.5l-.1-.8-6.7.6v.9c.1 2.8.9 5.4 2.3 7.6 1.5 2.3 3.5 4 6.1 5.1 2.6 1.1 5.7 1.6 9.4 1.6 2.9 0 5.6-.5 8-1.6 2.4-1.1 4.3-2.7 5.6-4.7 1.3-2 2-4.2 2-6.5 0-1.6-.3-3.1-.9-4.5l-.2-.6H44c0 .1 1.8 2.3 1.8 5.5zM29 28.9c-.8-.8-1.2-1.7-1.2-2.9 0-.7.1-1.3.4-1.9.3-.6.7-1.1 1.4-1.6.6-.5 1.4-.9 2.5-1.1 1.1-.3 2.4-.4 3.9-.4 2.9 0 5 .6 6.3 1.7 1.3 1.1 2.1 2.7 2.4 5.1l.1.9 6.8-.5v-.9c-.1-2.5-.8-4.7-2.1-6.7s-3.2-3.5-5.6-4.5c-2.4-1-5.1-1.5-8.1-1.5-2.8 0-5.3.5-7.6 1.4-2.3 1-4.2 2.4-5.4 4.3-1.2 1.9-1.9 3.9-1.9 6.1 0 1.7.4 3.4 1.2 4.9l.3.5h11.8c-2.3-.9-3.9-1.7-5.2-2.9zm13.3-6.2zm-19.6-2.4zM13 34.1h46.1v3.4H13z"/></symbol><symbol id="trumbowyg-strong" viewBox="0 0 72 72"><path d="M51.1 37.8c-1.1-1.4-2.5-2.5-4.2-3.3 1.2-.8 2.1-1.8 2.8-3 1-1.6 1.5-3.5 1.5-5.3 0-2-.6-4-1.7-5.8-1.1-1.8-2.8-3.2-4.8-4.1-2-.9-4.6-1.3-7.8-1.3h-16v42h16.3c2.6 0 4.8-.2 6.7-.7 1.9-.5 3.4-1.2 4.7-2.1 1.3-1 2.4-2.4 3.2-4.1.9-1.7 1.3-3.6 1.3-5.7.2-2.5-.5-4.7-2-6.6zM40.8 50.2c-.6.1-1.8.2-3.4.2h-9V38.5h8.3c2.5 0 4.4.2 5.6.6 1.2.4 2 1 2.7 2 .6.9 1 2 1 3.3 0 1.1-.2 2.1-.7 2.9-.5.9-1 1.5-1.7 1.9-.8.4-1.7.8-2.8 1zm2.6-20.4c-.5.7-1.3 1.3-2.5 1.6-.8.3-2.5.4-4.8.4h-7.7V21.6h7.1c1.4 0 2.6 0 3.6.1s1.7.2 2.2.4c1 .3 1.7.8 2.2 1.7.5.9.8 1.8.8 3-.1 1.3-.4 2.2-.9 3z"/></symbol><symbol id="trumbowyg-subscript" viewBox="0 0 72 72"><path d="M32 15h7.8L56 57.1h-7.9L44.3 46H27.4l-4 11.1h-7.6L32 15zm-2.5 25.4h12.9L36 22.3h-.2l-6.3 18.1zm29.2 19.5c.6-1.4 2-2.8 4.1-4.4 1.9-1.3 3.1-2.3 3.7-2.9.8-.9 1.3-1.9 1.3-3 0-.9-.2-1.6-.7-2.2-.5-.6-1.2-.9-2.1-.9-1.2 0-2.1.5-2.5 1.4-.3.5-.4 1.4-.5 2.5h-4c.1-1.8.4-3.2 1-4.3 1.1-2.1 3-3.1 5.8-3.1 2.2 0 3.9.6 5.2 1.8 1.3 1.2 1.9 2.8 1.9 4.8 0 1.5-.5 2.9-1.4 4.1-.6.8-1.6 1.7-3 2.6L66 57.7c-1 .7-1.7 1.2-2.1 1.6-.4.3-.7.7-1 1.1H72V64H57.8c0-1.5.3-2.8.9-4.1z"/></symbol><symbol id="trumbowyg-superscript" viewBox="0 0 72 72"><path d="M32 15h7.8L56 57.1h-7.9l-4-11.1H27.4l-4 11.1h-7.6L32 15zm-2.5 25.4h12.9L36 22.3h-.2l-6.3 18.1zm20.1-11.6c.5-1.1 1.6-2.3 3.4-3.6 1.5-1.1 2.5-1.9 3-2.4.7-.7 1-1.6 1-2.4 0-.7-.2-1.3-.6-1.8-.4-.5-1-.7-1.7-.7-1 0-1.7.4-2.1 1.1-.2.4-.3 1.1-.4 2.1H49c.1-1.5.3-2.6.8-3.5.9-1.7 2.5-2.6 4.8-2.6 1.8 0 3.2.5 4.3 1.5 1.1 1 1.6 2.3 1.6 4 0 1.3-.4 2.4-1.1 3.4-.5.7-1.3 1.4-2.4 2.2l-1.3 1c-.8.6-1.4 1-1.7 1.3-.3.3-.6.6-.8.9h7.4v3H48.8c0-1.3.3-2.4.8-3.5z"/></symbol><symbol id="trumbowyg-underline" viewBox="0 0 72 72"><path d="M36 35zM15.2 55.9h41.6V59H15.2zm5.9-42h6.4v21.2c0 1.2.1 2.5.2 3.7.1 1.3.5 2.4 1 3.4.6 1 1.4 1.8 2.6 2.5 1.1.6 2.7 1 4.8 1 2.1 0 3.7-.3 4.8-1 1.1-.6 2-1.5 2.6-2.5.6-1 .9-2.1 1-3.4.1-1.3.2-2.5.2-3.7V13.9H51v23.3c0 2.3-.4 4.4-1.1 6.1-.7 1.7-1.7 3.2-3 4.4-1.3 1.2-2.9 2-4.7 2.6-1.8.6-3.9.9-6.1.9-2.2 0-4.3-.3-6.1-.9-1.8-.6-3.4-1.5-4.7-2.6-1.3-1.2-2.3-2.6-3-4.4-.7-1.7-1.1-3.8-1.1-6.1V13.9z"/></symbol><symbol id="trumbowyg-undo" viewBox="0 0 72 72"><path d="M61.2 51.2c0-5.1-2.1-9.7-5.4-13.1-3.3-3.3-8-5.4-13.1-5.4H26.1v-12L10.8 36l15.3 15.3V39.1h16.7c3.3 0 6.4 1.3 8.5 3.5 2.2 2.2 3.5 5.2 3.5 8.5h6.4z"/></symbol><symbol id="trumbowyg-unlink" viewBox="0 0 72 72"><path d="m30.9 49.1-6.7 6.7c-.8.8-1.6.9-2.1.9s-1.4-.1-2.1-.9l-5.2-5.2c-1.1-1.1-1.1-3.1 0-4.2l6.1-6.1.2-.2 6.5-6.5c-1.2-.6-2.5-.9-3.8-.9-2.3 0-4.6.9-6.3 2.6L10.8 42c-3.5 3.5-3.5 9.2 0 12.7l5.2 5.2c1.7 1.7 4 2.6 6.3 2.6s4.6-.9 6.3-2.6l6.7-6.7C38 50.5 38.6 46.3 37 43l-6.1 6.1zm7.6-26.4 6.7-6.7c.8-.8 1.6-.9 2.1-.9s1.4.1 2.1.9l5.2 5.2c1.1 1.1 1.1 3.1 0 4.2l-6.1 6.1-.2.2-6.5 6.5c1.2.6 2.5.9 3.8.9 2.3 0 4.6-.9 6.3-2.6l6.7-6.7c3.5-3.5 3.5-9.2 0-12.7l-5.2-5.2c-1.7-1.7-4-2.6-6.3-2.6s-4.6.9-6.3 2.6l-6.7 6.7c-2.7 2.7-3.3 6.9-1.7 10.2l6.1-6.1z"/><path d="M44.1 30.7c.2-.2.4-.6.4-.9 0-.3-.1-.6-.4-.9l-2.3-2.3c-.2-.2-.6-.4-.9-.4-.3 0-.6.1-.9.4L25.8 40.8c-.2.2-.4.6-.4.9 0 .3.1.6.4.9l2.3 2.3c.2.2.6.4.9.4.3 0 .6-.1.9-.4l14.2-14.2zm-2.8 25.1v-5h22.2v5H41.3z"/></symbol><symbol id="trumbowyg-unordered-list" viewBox="0 0 72 72"><path d="M27 14h36v8H27zm0 36h36v8H27zM9 50h9v8H9zm0-18h9v8H9zm0-18h9v8H9zm18 18h36v8H27z"/></symbol><symbol id="trumbowyg-view-html" viewBox="0 0 72 72"><path fill="none" stroke="currentColor" stroke-width="8" stroke-miterlimit="10" d="M26.9 17.9 9 36.2 26.9 54M45 54l17.9-18.3L45 17.9"/></symbol><symbol id="trumbowyg-base64" viewBox="0 0 72 72"><path d="M64 17v38H8V17h56m8-8H0v54h72V9z"/><path d="M29.9 28.9c-.5-.5-1.1-.8-1.8-.8s-1.4.2-1.9.7c-.5.4-.9 1-1.2 1.6-.3.6-.5 1.3-.6 2.1-.1.7-.2 1.4-.2 1.9l.1.1c.6-.8 1.2-1.4 2-1.8.8-.4 1.7-.5 2.7-.5.9 0 1.8.2 2.6.6.8.4 1.6.9 2.2 1.5.6.6 1 1.3 1.2 2.2.3.8.4 1.6.4 2.5 0 1.1-.2 2.1-.5 3-.3.9-.8 1.7-1.5 2.4-.6.7-1.4 1.2-2.3 1.6-.9.4-1.9.6-3 .6-1.6 0-2.8-.3-3.9-.9-1-.6-1.8-1.4-2.5-2.4-.6-1-1-2.1-1.3-3.4-.2-1.3-.4-2.6-.4-3.9 0-1.3.1-2.6.4-3.8.3-1.3.8-2.4 1.4-3.5.7-1 1.5-1.9 2.5-2.5 1-.6 2.3-1 3.8-1 .9 0 1.7.1 2.5.4.8.3 1.4.6 2 1.1.6.5 1.1 1.1 1.4 1.8.4.7.6 1.5.7 2.5h-4c0-1-.3-1.6-.8-2.1zm-3.5 6.8c-.4.2-.8.5-1 .8-.3.4-.5.8-.6 1.2-.1.5-.2 1-.2 1.5s.1.9.2 1.4c.1.5.4.9.6 1.2.3.4.6.7 1 .9.4.2.9.3 1.4.3.5 0 1-.1 1.3-.3.4-.2.7-.5 1-.9.3-.4.5-.8.6-1.2.1-.5.2-.9.2-1.4 0-.5-.1-1-.2-1.4-.1-.5-.3-.9-.6-1.2-.3-.4-.6-.7-1-.9-.4-.2-.9-.3-1.4-.3-.4 0-.9.1-1.3.3zm9.9 5.6v-3.8l9-12.1H49v12.4h2.7v3.5H49v4.8h-4v-4.8h-8.7zM45 30.7l-5.3 7.2h5.4l-.1-7.2z"/></symbol><symbol id="trumbowyg-back-color" viewBox="0 0 72 72"><path d="m36.5 22.3-6.3 18.1H43l-6.3-18.1z"/><path d="M9 8.9v54.2h54.1V8.9H9zm39.9 48.2L45 46H28.2l-3.9 11.1h-7.6L32.8 15h7.8l16.2 42.1h-7.9z"/></symbol><symbol id="trumbowyg-fore-color" viewBox="0 0 72 72"><path d="M32 15h7.8L56 57.1h-7.9l-4-11.1H27.4l-4 11.1h-7.6L32 15zm-2.5 25.4h12.9L36 22.3h-.2l-6.3 18.1z"/></symbol><symbol id="trumbowyg-giphy" viewBox="0 0 72 72"><path d="M15.676 40.149v-5.282h13.645v12.489c-1.326 1.283-3.248 2.413-5.764 3.39-2.516.977-5.065 1.465-7.646 1.465-3.279 0-6.137-.688-8.575-2.064-2.439-1.376-4.271-3.343-5.497-5.903C.613 41.685 0 38.901 0 35.893c0-3.265.684-6.166 2.053-8.704 1.369-2.538 3.372-4.484 6.01-5.839 2.01-1.04 4.512-1.561 7.506-1.561 3.893 0 6.933.816 9.122 2.449 2.188 1.632 3.596 3.889 4.223 6.769l-6.287 1.176c-.442-1.54-1.273-2.755-2.492-3.646-1.219-.892-2.741-1.337-4.566-1.337-2.766 0-4.965.877-6.597 2.63-1.633 1.754-2.449 4.356-2.449 7.806 0 3.722.827 6.513 2.481 8.373 1.654 1.861 3.821 2.791 6.501 2.791 1.326 0 2.656-.26 3.989-.781 1.333-.52 2.477-1.151 3.432-1.892v-3.978h-7.25zm20.892-19.825h6.33v31.352h-6.33zm13.939 31.352V20.324H72v5.304H56.837v7.421h13.089v5.303H56.837v13.324h-6.33z"/></symbol><symbol id="trumbowyg-emoji" viewBox="0 0 72 72"><path d="M36.05 9C21.09 9 8.949 21.141 8.949 36.101c0 14.96 12.141 27.101 27.101 27.101 14.96 0 27.101-12.141 27.101-27.101S51.01 9 36.05 9zm9.757 15.095c2.651 0 4.418 1.767 4.418 4.418s-1.767 4.418-4.418 4.418-4.418-1.767-4.418-4.418 1.767-4.418 4.418-4.418zm-19.479 0c2.651 0 4.418 1.767 4.418 4.418s-1.767 4.418-4.418 4.418-4.418-1.767-4.418-4.418 1.767-4.418 4.418-4.418zm9.722 30.436c-14.093 0-16.261-13.009-16.261-13.009h32.522S50.143 54.531 36.05 54.531z"/></symbol><symbol id="trumbowyg-fontsize" viewBox="0 0 24 24"><path d="M9 4v3h5v12h3V7h5V4H9zm-6 8h3v7h3v-7h3V9H3v3z"/></symbol><symbol id="trumbowyg-insert-audio" viewBox="-2 -2 12 12"><path d="M3.344 0 2 2H0v4h2l1.344 2H4V0h-.656zM5 1v1c.152 0 .313.026.469.063H5.5c.86.215 1.5.995 1.5 1.938a1.99 1.99 0 0 1-2 2.001v1a2.988 2.988 0 0 0 3-3 2.988 2.988 0 0 0-3-3zm0 2v2l.25-.031C5.683 4.851 6 4.462 6 4c0-.446-.325-.819-.75-.938v-.031h-.031L5 3z"/></symbol><symbol id="trumbowyg-mathml" viewBox="0 0 445.878 445.878"><path d="M426.024 86.447H209.705l-84.911 298.911c-2.568 7.967-9.854 13.482-18.22 13.771-.236 0-.464.006-.688.006a19.868 19.868 0 0 1-18.436-12.478l-34.714-86.782H19.851C8.884 299.876 0 290.986 0 280.022c0-10.965 8.893-19.854 19.851-19.854H66.18a19.862 19.862 0 0 1 18.436 12.483l19.237 48.09 72.472-260.218a19.855 19.855 0 0 1 18.903-13.781h230.798c10.97 0 19.854 8.89 19.854 19.851s-8.892 19.854-19.856 19.854zm10.699 266.78-78.259-87.904 74.576-82.783c1.318-1.454 1.638-3.547.857-5.341a4.977 4.977 0 0 0-4.54-2.946h-47.18a4.995 4.995 0 0 0-3.759 1.72l-50.059 58.047-49.674-58.029a4.95 4.95 0 0 0-3.771-1.738H225.58a4.947 4.947 0 0 0-4.521 2.929 4.939 4.939 0 0 0 .824 5.332l73.743 82.81-77.641 87.923a4.977 4.977 0 0 0-.813 5.325 4.978 4.978 0 0 0 4.528 2.92h48.9c1.472 0 2.867-.65 3.807-1.785l51.819-62.181 53.05 62.229a4.972 4.972 0 0 0 3.782 1.743h49.97a4.938 4.938 0 0 0 4.527-2.926 4.966 4.966 0 0 0-.832-5.345z"/></symbol><symbol id="trumbowyg-lineheight" viewBox="0 0 72 72"><path fill="currentColor" d="M31 14h36v8H31zm0 36h36v8H31zm0-18h30v8H31z"/><path fill="none" stroke="currentColor" stroke-miterlimit="10" stroke-width="3.643" d="m7.82 47.207 8.332 8.15 8.106-8.15m.018-22.572-8.333-8.15-8.105 8.15"/><path fill="currentColor" d="M14.348 53.761v-36h3.384v36z"/></symbol><symbol id="trumbowyg-mention" viewBox="0 0 128 128"><path fill-rule="evenodd" d="M73.309 62.5c-1.53 9.86-8.16 17.85-14.45 17.85-5.61 0-8.5-4.08-8.5-10.54 0-13.089 8.84-24.139 20.06-24.139 2.21 0 3.91.34 5.27.68L73.309 62.5zm14.45 44.2c-6.8 3.57-15.98 5.44-24.65 5.44-25.329 0-43.519-16.15-43.519-44.54 0-32.469 22.78-52.869 48.789-52.869 26.35 0 40.63 17.17 40.63 39.27 0 19.549-9.18 28.899-16.49 28.729-4.76-.17-5.95-4.76-4.25-14.79l5.1-31.449c-4.25-2.38-12.75-4.25-20.23-4.25-24.48 0-39.779 18.87-39.779 39.609 0 13.94 7.99 22.1 19.039 22.1 9.01 0 16.66-4.42 21.93-13.09h.34c.85 9.01 6.63 13.09 14.62 13.09 18.36 0 32.3-15.64 32.3-40.459 0-28.56-21.42-49.13-51.34-49.13C31.83 4.361 6.67 34.451 6.67 69.13c0 33.32 24.82 53.55 53.039 53.55 12.07 0 20.91-1.53 31.11-6.12l-3.06-9.86z"/></symbol><symbol id="trumbowyg-highlight" viewBox="0 0 60 60"><path d="M11 7c0-2.206-1.794-4-4-4S3 4.794 3 7s1.794 4 4 4 4-1.794 4-4zM7 9c-1.103 0-2-.897-2-2s.897-2 2-2 2 .897 2 2-.897 2-2 2zm9 2c2.206 0 4-1.794 4-4s-1.794-4-4-4-4 1.794-4 4 1.794 4 4 4zm0-6c1.103 0 2 .897 2 2s-.897 2-2 2-2-.897-2-2 .897-2 2-2zm9 6c2.206 0 4-1.794 4-4s-1.794-4-4-4-4 1.794-4 4 1.794 4 4 4zm0-6c1.103 0 2 .897 2 2s-.897 2-2 2-2-.897-2-2 .897-2 2-2z"/><path d="M0 0v60h60V0H0zm2 2h56v10H2V2zm0 56V14h5v44H2zm56 0H9V14h49v44z"/><path d="M5 17H4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2zm0 4H4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2zm0 4H4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2zm0 4H4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2zm0 4H4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2zm0 4H4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2zm0 4H4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2zm0 4H4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2zm0 4H4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2zm0 4H4a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2zm8-34h13a1 1 0 1 0 0-2H13a1 1 0 1 0 0 2zm17 0h10a1 1 0 1 0 0-2H30a1 1 0 1 0 0 2zm14 0h2a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2zm-9 3a1 1 0 0 0 1 1h15a1 1 0 1 0 0-2H36a1 1 0 0 0-1 1zm-3-1H18a1 1 0 1 0 0 2h14a1 1 0 1 0 0-2zm-19 2h1a1 1 0 1 0 0-2h-1a1 1 0 1 0 0 2zm0 4h9a1 1 0 1 0 0-2h-9a1 1 0 1 0 0 2zm13 0h2a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2zm20-2H32a1 1 0 1 0 0 2h14a1 1 0 1 0 0-2zm-33 6h13a1 1 0 1 0 0-2H13a1 1 0 1 0 0 2zm28-1a1 1 0 0 0-1-1H30a1 1 0 1 0 0 2h10a1 1 0 0 0 1-1zm-5 5h8a1 1 0 1 0 0-2h-8a1 1 0 1 0 0 2zm-19-1a1 1 0 0 0 1 1h14a1 1 0 1 0 0-2H18a1 1 0 0 0-1 1zm-4 1h1a1 1 0 1 0 0-2h-1a1 1 0 1 0 0 2zm0 4h9a1 1 0 1 0 0-2h-9a1 1 0 1 0 0 2zm13 0h2a1 1 0 1 0 0-2h-2a1 1 0 1 0 0 2zm5-1a1 1 0 0 0 1 1h15a1 1 0 1 0 0-2H32a1 1 0 0 0-1 1zm-18 5h13a1 1 0 1 0 0-2H13a1 1 0 1 0 0 2zm27-2H30a1 1 0 1 0 0 2h10a1 1 0 1 0 0-2zm11 0h-7a1 1 0 1 0 0 2h7a1 1 0 1 0 0-2zm-11 4h-4a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2zm-23 1a1 1 0 0 0 1 1h14a1 1 0 1 0 0-2H18a1 1 0 0 0-1 1zm-4 1h1a1 1 0 1 0 0-2h-1a1 1 0 1 0 0 2zm9 2h-9a1 1 0 1 0 0 2h9a1 1 0 1 0 0-2zm6 0h-2a1 1 0 1 0 0 2h2a1 1 0 1 0 0-2zm11 0h-7a1 1 0 1 0 0 2h7a1 1 0 1 0 0-2zm5 0h-1a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2z"/></symbol><symbol id="trumbowyg-indent" viewBox="0 0 467.765 467.765"><path d="M181.412 151.176h292.353v58.471H181.412zm0 120.942h292.353v58.471H181.412zM0 393.059h467.765v58.471H0zM0 30.235h467.765v58.471H0zm0 320.589V116.941l116.941 116.941z"/></symbol><symbol id="trumbowyg-outdent" viewBox="0 0 467.765 467.765"><path d="M181.412 151.176h292.353v58.471H181.412zm0 120.942h292.353v58.471H181.412zM0 393.059h467.765v58.471H0zM0 30.235h467.765v58.471H0zm0 203.647 116.941-116.941v233.882z"/></symbol><symbol id="trumbowyg-noembed" viewBox="0 0 72 72"><path d="M31.5 33.6V25l11 11-11 11v-8.8z"/><path d="M64 17v38H8V17h56m8-8H0v54h72V9z"/></symbol><symbol id="trumbowyg-ruby" viewBox="0 0 72 72"><path d="M16.499 24.477h8.018L41.08 67.5H33l-4.04-11.361H11.804L7.764 67.5H0l16.499-43.023zm-2.65 25.907h13.127l-6.438-18.497h-.177l-6.512 18.497zm51.204-33.699c-6.316 1.178-12.025 1.98-17.126 2.408a362.385 362.385 0 0 0-.965 5.833c-.25 1.57-.679 3.907-1.286 7.013 3.033-1.963 5.852-3.266 8.458-3.907 2.639-.642 4.905-.891 6.797-.75 1.891.108 3.746.661 5.566 1.661 1.82.964 3.264 2.408 4.334 4.334 1.104 1.893 1.427 4.088.965 6.584-.466 2.461-1.554 4.494-3.265 6.101-1.679 1.605-3.658 2.783-5.941 3.532-2.283.785-4.853 1.251-7.707 1.391-2.819.144-5.906.161-9.259.056 0-1.642-.287-3.212-.857-4.71l.108-.59c2.711.5 5.246.768 7.601.802 2.39 0 4.529-.195 6.421-.589 1.927-.393 3.605-1.069 5.031-2.031 1.427-.965 2.319-2.319 2.676-4.067.394-1.75.269-3.229-.373-4.443-.644-1.249-1.446-2.213-2.408-2.891-.929-.68-2.161-1.034-3.693-1.071-1.536-.072-3.265.089-5.192.482-1.927.391-3.82 1.14-5.672 2.248a24.308 24.308 0 0 0-4.978 3.907l-4.872-1.981c1.463-5.031 2.355-8.597 2.677-10.703.321-2.105.642-4.067.963-5.887-3.961.25-7.154.411-9.58.481-.215-1.927-.52-3.534-.91-4.817l.32-.32c3.604.32 7.225.446 10.865.375.214-1.355.481-3.103.804-5.245.354-2.175.407-3.621.16-4.336.034-.784.374-1.017 1.017-.695l5.085.749c.428.251.444.573.055.964l-.857.91c-.537 2.89-.981 5.352-1.338 7.385 4.279-.427 9.312-1.393 15.092-2.89l1.284 4.707"/></symbol><symbol id="trumbowyg-special-chars" viewBox="0 0 72 72"><g fill-rule="evenodd"><path d="M36 3c18.213 0 33 14.787 33 33S54.213 69 36 69 3 54.213 3 36 17.787 3 36 3zm0 6.735c14.496 0 26.265 11.769 26.265 26.265S50.496 62.265 36 62.265 9.735 50.496 9.735 36 21.504 9.735 36 9.735z"/><path d="M45.248 40.04h8.816C52.23 48.325 44.833 54.52 36 54.52c-10.222 0-18.52-8.298-18.52-18.52S25.778 17.48 36 17.48c8.712 0 16.027 6.028 17.977 14.142h-8.912A10.009 10.009 0 0 0 36 25.898c-5.575 0-10.102 4.527-10.102 10.102S30.425 46.102 36 46.102a10.08 10.08 0 0 0 9.248-6.061z"/></g></symbol><symbol id="trumbowyg-align-bottom" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M3 18.377h18V21H3v-2.623ZM13.294 13h2.689l-4 4-4-4h2.689V3h2.622v10Z" style="fill-rule:nonzero" transform="translate(-2.533 -2.533) scale(3.21111)"/></g></symbol><symbol id="trumbowyg-align-middle" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path style="fill:none" d="M0 0h24v24H0z" transform="translate(24 24)"/><path d="M3 10.689h18v2.622H3v-2.622Zm10.311 7.622V21h-2.622v-2.689H8l4-4 4 4h-2.689Zm0-12.622H16l-4 4-4-4h2.689V3h2.622v2.689Z" style="fill-rule:nonzero" transform="translate(-2.533 -2.533) scale(3.21111)"/></g></symbol><symbol id="trumbowyg-align-top" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M3 18.377h18V21H3v-2.623ZM13.294 13h2.689l-4 4-4-4h2.689V3h2.622v10Z" style="fill-rule:nonzero" transform="rotate(180 37.267 37.267) scale(3.21111)"/></g></symbol><symbol id="trumbowyg-col-delete" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M22 9h27v54H22V9Zm4 26v10h19V35H26Zm19-14H26v10h19V21ZM26 49v10h19V49H26Z"/><path d="M58.2 54.6 52 48.5l3.6-3.6 6.1 6.1 6.4-6.4 3.8 3.8-6.4 6.4 6.1 6.1-3.6 3.6-6.1-6.1-6.4 6.4-3.7-3.8 6.4-6.4Z" style="fill-rule:nonzero"/></g></symbol><symbol id="trumbowyg-col-left" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M38 9h27v54H38V9Zm4 26v10h19V35H42Zm19-14H42v10h19V21ZM42 49v10h19V49H42Z"/><path d="M49.9 55.4h-8.5v-5h8.5v-8.9h5.2v8.9h8.5v5h-8.5v8.9h-5.2v-8.9Z" style="fill-rule:nonzero" transform="translate(-33.6 -16.9)"/></g></symbol><symbol id="trumbowyg-col-right" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M34.8 9h-27v54h27V9Zm-4 26v10h-19V35h19Zm-19-14h19v10h-19V21Zm19 28v10h-19V49h19Z"/><path d="M49.9 55.4h-8.5v-5h8.5v-8.9h5.2v8.9h8.5v5h-8.5v8.9h-5.2v-8.9Z" style="fill-rule:nonzero" transform="matrix(-1 0 0 1 106.4 -16.9)"/></g></symbol><symbol id="trumbowyg-header-row" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M0 41h71.9v18H0z"/><path d="M49.9 55.4h-8.5v-5h8.5v-8.9h5.2v8.9h8.5v5h-8.5v8.9h-5.2v-8.9Z" style="fill-rule:nonzero" transform="matrix(-1 0 0 1 88.5 -30.9)"/></g></symbol><symbol id="trumbowyg-row-above" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M0 59V41h71.9v18H0Zm22-14H4v10h18V45Zm46 0H49v10h19V45Zm-23 0H26v10h19V45Z"/><path d="M49.9 55.4h-8.5v-5h8.5v-8.9h5.2v8.9h8.5v5h-8.5v8.9h-5.2v-8.9Z" style="fill-rule:nonzero" transform="matrix(-1 0 0 1 88.5 -30.9)"/></g></symbol><symbol id="trumbowyg-row-below" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M0 12.6v18h71.9v-18H0Zm22 14H4v-10h18v10Zm46 0H49v-10h19v10Zm-23 0H26v-10h19v10Z"/><path d="M49.9 55.4h-8.5v-5h8.5v-8.9h5.2v8.9h8.5v5h-8.5v8.9h-5.2v-8.9Z" style="fill-rule:nonzero" transform="rotate(180 44.25 51.25)"/></g></symbol><symbol id="trumbowyg-row-delete" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M0 36V18h71.9v18H0Zm22-14H4v10h18V22Zm46 0H49v10h19V22Zm-23 0H26v10h19V22Z"/><path d="M58.2 54.6 52 48.5l3.6-3.6 6.1 6.1 6.4-6.4 3.8 3.8-6.4 6.4 6.1 6.1-3.6 3.6-6.1-6.1-6.4 6.4-3.7-3.8 6.4-6.4Z" style="fill-rule:nonzero" transform="translate(0 -5)"/></g></symbol><symbol id="trumbowyg-table-border-color" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M37 63H0V9h72v38l-4-9V21H4v38h33v4Z"/><path d="M55.84 68C49.692 68 43.69 63 43.587 56.852c0-1.667.417-3.23 1.042-4.585l11.21-20.525L67.05 52.267c.625 1.355.938 2.918.938 4.585C67.988 62.999 61.987 68 55.84 68Z"/></g></symbol><symbol id="trumbowyg-table-cell-background-color" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M0 30.742V9h72v37.813l-4-7.324V35h-2.544l-2.185-4H68V21H49v10l-4 7.071V35H26v-4h19V21H26v9.742h-4V21H4v9.742H0ZM26 45h14.762l-2.185 4H26v-4Zm0 4.258V59h10.77a15.862 15.862 0 0 0 1.196 4H0V49.258h4V59h18v-9.742h4Z" style="fill-opacity:.3"/><path d="M0 33h24v14H0zM55.84 68C49.692 68 43.69 63 43.587 56.852c0-1.667.417-3.23 1.042-4.585l11.21-20.525L67.05 52.267c.625 1.355.938 2.918.938 4.585C67.988 62.999 61.987 68 55.84 68Z"/></g></symbol><symbol id="trumbowyg-table-delete" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M49 63H0V9h72v31h-4v-5H49v25.972l-.01.009.01.01V63Zm-4-42H26v10h19V21ZM4 49v10h18V49H4Zm22-14v10h19V35H26Zm0 14v10h19V49H26ZM4 35v10h18V35H4Zm64-14H49v10h19V21Zm-46 0H4v10h18V21Z"/><path d="M58.2 54.6 52 48.5l3.6-3.6 6.1 6.1 6.4-6.4 3.8 3.8-6.4 6.4 6.1 6.1-3.6 3.6-6.1-6.1-6.4 6.4-3.7-3.8 6.4-6.4Z" style="fill-rule:nonzero"/></g></symbol><symbol id="trumbowyg-table-merge" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M72 9v54H0V9h72Zm-40 8H8v14.789h6.733v-8.633L27.578 36 14.733 48.844v-8.633H8V55h24v-3h8v3h24V40.211h-6.733v8.633L44.422 36l12.845-12.844v8.633H64V17H40v3h-8v-3Zm8 22v8h-8v-8h8Zm0-14v8h-8v-8h8Z"/></g></symbol><symbol id="trumbowyg-table-unmerge" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M72 9v54H0V9h72Zm-40 8H8v38h24v-7h8v7h24V17H40v7h-8v-7Zm13.944 24.211H26.056v7.633L13.211 36l12.845-12.844v8.633h19.888v-8.633L58.789 36 45.944 48.844v-7.633Z"/></g></symbol><symbol id="trumbowyg-table" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M0 63V9h72v54H0Zm22-42H4v10h18V21Zm46 0H49v10h19V21Zm-23 0H26v10h19V21ZM26 49v10h19V49H26Zm0-14v10h19V35H26ZM4 49v10h18V49H4Zm0-14v10h18V35H4Zm64 10V35H49v10h19Zm0 14V49H49v10h19Z"/></g></symbol><symbol id="trumbowyg-upload" viewBox="0 0 72 72"><g style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M32 20h-8L36 6l12 14h-8v30h-8V20Zm32 7h8v36H0V27h8v28h56V27Z"/></g></symbol><symbol id="trumbowyg-preformatted" viewBox="0 0 72 72"><path d="M10.3 33.5c.4 0 .9-.1 1.5-.2s1.2-.3 1.8-.7c.6-.3 1.1-.8 1.5-1.3.4-.5.6-1.3.6-2.1V17.1c0-1.4.3-2.6.8-3.6s1.2-1.9 2-2.5c.8-.7 1.6-1.2 2.5-1.5.9-.3 1.6-.5 2.2-.5h5.3v5.3h-3.2c-.7 0-1.3.1-1.8.4-.4.3-.8.6-1 1-.2.4-.4.9-.4 1.3-.1.5-.1.9-.1 1.4v11.4c0 1.2-.2 2.1-.7 2.9-.5.8-1 1.4-1.7 1.8-.6.4-1.3.8-2 1-.7.2-1.3.3-1.7.4v.1c.5 0 1 .1 1.7.3.7.2 1.3.5 2 .9.6.5 1.2 1.1 1.7 1.9.5.8.7 2 .7 3.4v11.1c0 .4 0 .9.1 1.4.1.5.2.9.4 1.3s.6.7 1 1c.4.3 1 .4 1.8.4h3.2V63h-5.3c-.6 0-1.4-.2-2.2-.5-.9-.3-1.7-.8-2.5-1.5s-1.4-1.5-2-2.5c-.5-1-.8-2.2-.8-3.6V43.5c0-.9-.2-1.7-.6-2.3-.4-.6-.9-1.1-1.5-1.5-.6-.4-1.2-.6-1.8-.7-.6-.1-1.1-.2-1.5-.2v-5.3zm51.5 5.2c-.4 0-1 .1-1.6.2-.6.1-1.2.4-1.8.7-.6.3-1.1.7-1.5 1.3-.4.5-.6 1.3-.6 2.1v12.1c0 1.4-.3 2.6-.8 3.6s-1.2 1.9-2 2.5c-.8.7-1.6 1.2-2.5 1.5-.9.3-1.6.5-2.2.5h-5.3v-5.3h3.2c.7 0 1.3-.1 1.8-.4.4-.3.8-.6 1-1 .2-.4.4-.9.4-1.3.1-.5.1-.9.1-1.4V42.3c0-1.2.2-2.1.7-2.9.5-.8 1-1.4 1.7-1.8.6-.4 1.3-.8 2-1 .7-.2 1.3-.3 1.7-.4v-.1c-.5 0-1-.1-1.7-.3-.7-.2-1.3-.5-2-.9-.6-.4-1.2-1.1-1.7-1.9-.5-.8-.7-2-.7-3.4V18.5c0-.4 0-.9-.1-1.4-.1-.5-.2-.9-.4-1.3s-.6-.7-1-1c-.4-.3-1-.4-1.8-.4h-3.2V9.1h5.3c.6 0 1.4.2 2.2.5.9.3 1.7.8 2.5 1.5s1.4 1.5 2 2.5c.5 1 .8 2.2.8 3.6v11.6c0 .9.2 1.7.6 2.3.4.6.9 1.1 1.5 1.5.6.4 1.2.6 1.8.7.6.1 1.2.2 1.6.2v5.2z"/></symbol><symbol id="trumbowyg-gallery" viewBox="0 0 16 16"><path d="M2.5 3.5a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-11zm2-2a.5.5 0 0 1 0-1h7a.5.5 0 0 1 0 1h-7zM0 13a1.5 1.5 0 0 0 1.5 1.5h13A1.5 1.5 0 0 0 16 13V6a1.5 1.5 0 0 0-1.5-1.5h-13A1.5 1.5 0 0 0 0 6v7zm1.5.5A.5.5 0 0 1 1 13V6a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-.5.5h-13z"/></symbol></svg>

// ----- END FILE: plugins/AdminTheme/templates/element/trumbowyg-icons.php -----

FILE: plugins/AdminTheme/templates/element/pagination.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2858 bytes
CONTENT:
<?php
/**
 * Enhanced Pagination Element
 * 
 * @var \App\View\AppView $this
 * @var array $options Configuration options
 */

$defaults = [
    'showCounter' => true,
    'showPageInfo' => true,
    'class' => 'd-flex justify-content-center',
    'counterClass' => 'd-flex justify-content-center mt-2',
    'preserveParams' => true,
];
$config = array_merge($defaults, $options ?? []);

$this->Paginator->setTemplates([
    'nextActive' => '<li class="page-item"><a class="page-link" rel="next" aria-label="Next" href="{{url}}">&raquo;</a></li>',
    'nextDisabled' => '<li class="page-item disabled"><a class="page-link" aria-label="Next" href="" onclick="return false;">&raquo;</a></li>',
    'prevActive' => '<li class="page-item"><a class="page-link" rel="prev" aria-label="Previous" href="{{url}}">&laquo;</a></li>',
    'prevDisabled' => '<li class="page-item disabled"><a class="page-link" aria-label="Previous" href="" onclick="return false;">&laquo;</a></li>',
    'number' => '<li class="page-item"><a class="page-link" href="{{url}}">{{text}}</a></li>',
    'current' => '<li class="page-item active"><a class="page-link" href="">{{text}}</a></li>',
    'counterRange' => 'Page {{page}} of {{pages}}, showing {{current}} record(s) out of {{count}} total',
    'counterPages' => 'Page {{page}} of {{pages}}',
]);

// Build pagination options with query parameter preservation
$paginationOptions = [
    'url' => [
        'controller' => $this->request->getParam('controller'),
        'action' => $this->request->getParam('action'),
    ],
];

// Preserve all query parameters if requested
if ($config['preserveParams']) {
    $queryParams = $this->request->getQueryParams();
    // Remove 'page' parameter as it's handled by paginator
    unset($queryParams['page']);
    
    if (!empty($queryParams)) {
        $paginationOptions['url']['?'] = $queryParams;
    }
}
?>
<?php if ($this->Paginator->total() > 1): ?>
    <div class="<?= h($config['class']) ?>">
        <nav aria-label="<?= __('Pagination Navigation') ?>">
            <ul class="pagination">
                <?= $this->Paginator->prev('&laquo;', ['escape' => false], null, ['class' => 'page-link'], $paginationOptions) ?>
                <?= $this->Paginator->numbers([], ['class' => 'page-link'], $paginationOptions) ?>
                <?= $this->Paginator->next('&raquo;', ['escape' => false], null, ['class' => 'page-link'], $paginationOptions) ?>
            </ul>
        </nav>
    </div>
    
    <?php if ($config['showCounter'] && $this->Paginator->total() > 0): ?>
        <div class="<?= h($config['counterClass']) ?>">
            <small class="text-muted">
                <?= $this->Paginator->counter(__('Page {{page}} of {{pages}}, showing {{current}} record(s) out of {{count}} total')) ?>
            </small>
        </div>
    <?php endif; ?>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/element/pagination.php -----

FILE: plugins/AdminTheme/templates/element/view_switcher.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1287 bytes
CONTENT:
<?php
/**
 * View Switcher Element
 * 
 * @var \App\View\AppView $this
 * @var string $currentView Current view type (list|grid)
 * @var array $queryParams Current query parameters to preserve
 * @var array $options Additional options
 */

$defaults = [
    'action' => 'index',
    'class' => 'btn-group me-3',
    'showLabels' => false,
];
$config = array_merge($defaults, $options ?? []);
$queryParams = $queryParams ?? [];
?>

<div class="<?= h($config['class']) ?>" role="group">
    <?= $this->Html->link(
        '<i class="fas fa-list"></i>' . ($config['showLabels'] ? ' ' . __('List') : ''),
        ['action' => $config['action'], '?' => ['view' => 'list'] + $queryParams],
        [
            'class' => 'btn ' . ($currentView === 'list' ? 'btn-primary' : 'btn-outline-secondary'),
            'escape' => false,
            'title' => __('List View')
        ]
    ) ?>
    <?= $this->Html->link(
        '<i class="fas fa-th"></i>' . ($config['showLabels'] ? ' ' . __('Grid') : ''),
        ['action' => $config['action'], '?' => ['view' => 'grid'] + $queryParams],
        [
            'class' => 'btn ' . ($currentView === 'grid' ? 'btn-primary' : 'btn-outline-secondary'),
            'escape' => false,
            'title' => __('Grid View')
        ]
    ) ?>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/view_switcher.php -----

FILE: plugins/AdminTheme/templates/element/flash/success.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 201 bytes
CONTENT:
<div class="alert alert-success alert-dismissible fade show" role="alert">
    <?= h($message) ?>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/flash/success.php -----

FILE: plugins/AdminTheme/templates/element/flash/error.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 501 bytes
CONTENT:
<div class="alert alert-danger alert-dismissible fade show" role="alert">
    <div>
        <?= h($message) ?>
    </div>
    <?php if (!empty($params['errors'])): ?>
        <div>
            <ul>
                <?php foreach ($params['errors'] as $error): ?>
                    <li><?= h($error) ?></li>
                <?php endforeach; ?>
            </ul>
        </div>
    <?php endif; ?>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/flash/error.php -----

FILE: plugins/AdminTheme/templates/element/flash/default.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 198 bytes
CONTENT:
<div class="alert alert-info alert-dismissible fade show" role="alert">
    <?= h($message) ?>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

// ----- END FILE: plugins/AdminTheme/templates/element/flash/default.php -----

FILE: plugins/AdminTheme/templates/layout/default.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 29916 bytes
CONTENT:
<?php 
use App\Utility\SettingsManager;
use Cake\Core\Configure;

$session = $this->request->getSession();
?>
<!doctype html>
<html lang="en" data-bs-theme="auto">
  <head>
    <script>
    // Check localStorage immediately to prevent sidebar jumping
    (function() {
        if (localStorage.getItem('sidebarCollapsed') === 'true') {
            document.documentElement.classList.add('sidebar-preload-collapsed');
        }
    })();
    </script>
    <?= $this->Html->script('AdminTheme.color-modes') ?>
    <?= $this->Html->charset() ?>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title><?= SettingsManager::read('SEO.siteName', 'Willow CMS') ?>: <?= $this->fetch('title') ?></title>
    <?= $this->Html->meta('icon') ?>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css">
    
    <?= $this->Html->css([
        'AdminTheme.base',
        'AdminTheme.theme',
        'AdminTheme.admin-layout',
        'AdminTheme.semantic-ui-dropdown',
        'AdminTheme.images-grid',
        'AdminTheme.' . (SettingsManager::read('Editing.editor') == 'trumbowyg' ? 'trumbowyg' : 'markdown'),
    ], ['block' => true]) ?>

    <?= $this->Html->script('AdminTheme.image-preview') ?>
    <?= $this->Html->script('AdminTheme.universal-search') ?>
    <?= $this->Html->script('willow-modal') ?>
    <?= $this->Html->script('https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js'); ?>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.5.0/dist/components/dropdown.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.5.0/dist/components/transition.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.5.0/dist/components/label.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.5.0/dist/components/icon.min.css">
    <script src="https://cdn.jsdelivr.net/npm/semantic-ui@2.5.0/dist/semantic.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/markdown-it@14.1.0/dist/markdown-it.min.js"></script>

    <?= $this->fetch('meta') ?>
    <?= $this->fetch('css') ?>
    <?= $this->fetch('script') ?>
    <?= $this->Html->scriptBlock(sprintf(
        'var csrfToken = %s;',
        json_encode($this->request->getAttribute('csrfToken'))
    )); ?>
    <?= $this->element('libraries/highlightjs'); ?>
  </head>
  <body class="bg-body-tertiary admin-layout">

    <svg xmlns="http://www.w3.org/2000/svg" class="d-none">
      <symbol id="check2" viewBox="0 0 16 16">
        <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
      </symbol>
      <symbol id="circle-half" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 0 8 1v14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16z"/>
      </symbol>
      <symbol id="moon-stars-fill" viewBox="0 0 16 16">
        <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z"/>
        <path d="M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.734 1.734 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.734 1.734 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.734 1.734 0 0 0 1.097-1.097l.387-1.162zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.156 1.156 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.156 1.156 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732L13.863.1z"/>
      </symbol>
      <symbol id="sun-fill" viewBox="0 0 16 16">
        <path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"/>
      </symbol>
    </svg>

    <?php if (SettingsManager::read('Editing.editor') == 'trumbowyg') : ?>
    <div id="trumbowyg-icons">
        <?= $this->element('trumbowyg-icons') ?>
    </div>
    <?php endif; ?>

    <!-- Theme Toggle -->
    <div class="dropdown position-fixed bottom-0 end-0 mb-3 me-3 bd-mode-toggle" style="z-index: 1050;">
      <button class="btn btn-bd-primary py-2 dropdown-toggle d-flex align-items-center"
        id="bd-theme"
        type="button"
        aria-expanded="false"
        data-bs-toggle="dropdown"
        aria-label="Toggle theme (auto)">
        <svg class="bi my-1 theme-icon-active" width="1em" height="1em"><use href="#circle-half"></use></svg>
        <span class="visually-hidden" id="bd-theme-text">Toggle theme</span>
      </button>
      <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="bd-theme-text">
        <li>
          <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="light" aria-pressed="false">
            <svg class="bi me-2 opacity-50" width="1em" height="1em"><use href="#sun-fill"></use></svg>
            Light
            <svg class="bi ms-auto d-none" width="1em" height="1em"><use href="#check2"></use></svg>
          </button>
        </li>
        <li>
          <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="dark" aria-pressed="false">
            <svg class="bi me-2 opacity-50" width="1em" height="1em"><use href="#moon-stars-fill"></use></svg>
            Dark
            <svg class="bi ms-auto d-none" width="1em" height="1em"><use href="#check2"></use></svg>
          </button>
        </li>
        <li>
          <button type="button" class="dropdown-item d-flex align-items-center active" data-bs-theme-value="auto" aria-pressed="true">
            <svg class="bi me-2 opacity-50" width="1em" height="1em"><use href="#circle-half"></use></svg>
            Auto
            <svg class="bi ms-auto d-none" width="1em" height="1em"><use href="#check2"></use></svg>
          </button>
        </li>
      </ul>
    </div>

    <!-- Top Header -->
    <header class="navbar navbar-expand-lg navbar-dark bg-dark admin-header">
      <div class="container-fluid">
        <!-- Brand and Toggle -->
        <div class="d-flex align-items-center">
          <button class="btn btn-outline-light me-3 d-lg-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#adminSidebar" aria-controls="adminSidebar">
            <i class="fas fa-bars"></i>
          </button>
          <button class="btn btn-outline-light me-3 d-none d-lg-block" type="button" id="sidebarToggle" aria-label="Toggle sidebar">
            <i class="fas fa-bars"></i>
          </button>
          <?= $this->Html->image('willow-icon.png', [
              'alt' => __('Willow Logo'),
              'class' => 'navbar-logo me-2',
              'url' => ['prefix' => 'Admin', 'controller' => 'Articles', 'action' => 'index'],
              'width' => 30,
              'height' => 30
          ]) ?>
          <a class="navbar-brand" href="<?= $this->Url->build(['prefix' => 'Admin', 'controller' => 'Articles', 'action' => 'index']) ?>">
            <?= SettingsManager::read('SEO.siteName', __('Willow CMS')) ?>
          </a>
        </div>

        <!-- Header Actions -->
        <div class="d-flex align-items-center ms-auto">

          <!-- User Actions -->
          <?= $this->element('user_actions') ?>
        </div>
      </div>
    </header>

    <!-- Main Layout Container -->
    <div class="admin-container">
      <!-- Sidebar Navigation (Desktop) -->
      <nav class="admin-sidebar bg-light border-end d-none d-lg-block" id="adminSidebarDesktop">
        <div class="sidebar-content">
          <div class="list-group list-group-flush">
            <!-- Dashboard -->
            <div class="list-group-item list-group-item-action border-0 sidebar-header">
              <h6 class="mb-1 text-muted sidebar-text"><?= __('Dashboard') ?></h6>
            </div>
            
            <?= $this->Html->link(
                '<i class="fas fa-tachometer-alt sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Analytics') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'PageViews', 'action' => 'dashboard'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . (($activeCtl == 'PageViews') ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Analytics'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <!-- Content Management -->
            <div class="list-group-item list-group-item-action border-0 sidebar-header">
              <h6 class="mb-1 text-muted sidebar-text"><?= __('Content') ?></h6>
            </div>

            <?= $this->Html->link(
                '<i class="fas fa-newspaper sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Posts') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Articles', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . (($activeCtl == 'Articles' && $activeAct != 'treeIndex' && empty($this->request->getQuery('kind'))) ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Posts'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-file-alt sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Pages') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Articles', 'action' => 'treeIndex'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . (($activeCtl == 'Articles' && $activeAct == 'treeIndex') || (!empty($this->request->getQuery('kind'))) ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Pages'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-tags sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Tags') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Tags', 'action' => $session->read('Tags.indexAction', 'treeIndex')],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'Tags' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Tags'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-images sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Images') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Images', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . (($this->request->getParam('controller') == 'Images') ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Images'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-layer-group sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Image Galleries') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'ImageGalleries', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . (($this->request->getParam('controller') == 'ImageGalleries') ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Image Galleries'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?php if(SettingsManager::read('Comments.pagesEnabled', false) || SettingsManager::read('Comments.articlesEnabled', false)) : ?>
            <?= $this->Html->link(
                '<i class="fas fa-comments sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Comments') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Comments', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'Comments' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Comments'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>
            <?php endif; ?>

            <!-- User Management -->
            <div class="list-group-item list-group-item-action border-0 sidebar-header">
              <h6 class="mb-1 text-muted sidebar-text"><?= __('Users') ?></h6>
            </div>

            <?= $this->Html->link(
                '<i class="fas fa-users sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Manage Users') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Users', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'Users' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Manage Users'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <!-- Administration -->
            <div class="list-group-item list-group-item-action border-0 sidebar-header">
              <h6 class="mb-1 text-muted sidebar-text"><?= __('Administration') ?></h6>
            </div>

            <?= $this->Html->link(
                '<i class="fas fa-cog sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Settings') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Settings', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'Settings' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Settings'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-envelope sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Email Templates') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'EmailTemplates', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'EmailTemplates' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Email Templates'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-link sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Slugs') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Slugs', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'Slugs' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Slugs'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?php if (Configure::read('debug')) : ?>
            <?= $this->Html->link(
                '<i class="fas fa-robot sidebar-icon"></i><span class="sidebar-text ms-2">' . __('AI Prompts') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Aiprompts', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'Aiprompts' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('AI Prompts'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-globe sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Internationalisation') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Internationalisations', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'Internationalisations' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Internationalisation'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>
            <?php endif; ?>

            <!-- System -->
            <div class="list-group-item list-group-item-action border-0 sidebar-header">
              <h6 class="mb-1 text-muted sidebar-text"><?= __('System') ?></h6>
            </div>

            <?= $this->Html->link(
                '<i class="fas fa-trash sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Clear Cache') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'Cache', 'action' => 'clearAll'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'Cache' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Clear Cache'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-ban sidebar-icon"></i><span class="sidebar-text ms-2">' . __('Blocked IPs') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'BlockedIps', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'BlockedIps' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('Blocked IPs'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-file-text sidebar-icon"></i><span class="sidebar-text ms-2">' . __('System Logs') . '</span>',
                ['prefix' => 'Admin', 'controller' => 'SystemLogs', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0 sidebar-link' . ($activeCtl == 'SystemLogs' ? ' active' : ''),
                    'escape' => false,
                    'title' => __('System Logs'),
                    'data-bs-toggle' => 'tooltip',
                    'data-bs-placement' => 'right'
                ]
            ) ?>
          </div>
        </div>
      </nav>

      <!-- Mobile Sidebar (Offcanvas) -->
      <div class="offcanvas offcanvas-start" tabindex="-1" id="adminSidebar" aria-labelledby="adminSidebarLabel">
        <div class="offcanvas-header">
          <h5 class="offcanvas-title" id="adminSidebarLabel"><?= __('Navigation') ?></h5>
          <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body p-0">
          <!-- Copy of sidebar content for mobile -->
          <div class="list-group list-group-flush">
            <!-- Dashboard -->
            <div class="list-group-item list-group-item-action border-0 sidebar-header">
              <h6 class="mb-1 text-muted"><?= __('Dashboard') ?></h6>
            </div>
            
            <?= $this->Html->link(
                '<i class="fas fa-tachometer-alt me-2"></i>' . __('Analytics'),
                ['prefix' => 'Admin', 'controller' => 'PageViews', 'action' => 'dashboard'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . (($activeCtl == 'PageViews') ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <!-- Content Management -->
            <div class="list-group-item list-group-item-action border-0 sidebar-header">
              <h6 class="mb-1 text-muted"><?= __('Content') ?></h6>
            </div>

            <?= $this->Html->link(
                '<i class="fas fa-newspaper me-2"></i>' . __('Posts'),
                ['prefix' => 'Admin', 'controller' => 'Articles', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . (($activeCtl == 'Articles' && $activeAct != 'treeIndex' && empty($this->request->getQuery('kind'))) ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-file-alt me-2"></i>' . __('Pages'),
                ['prefix' => 'Admin', 'controller' => 'Articles', 'action' => 'treeIndex'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . (($activeCtl == 'Articles' && $activeAct == 'treeIndex') || (!empty($this->request->getQuery('kind'))) ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-tags me-2"></i>' . __('Tags'),
                ['prefix' => 'Admin', 'controller' => 'Tags', 'action' => $session->read('Tags.indexAction', 'treeIndex')],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'Tags' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-images me-2"></i>' . __('Images'),
                ['prefix' => 'Admin', 'controller' => 'Images', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . (($this->request->getParam('controller') == 'Images') ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-layer-group me-2"></i>' . __('Image Galleries'),
                ['prefix' => 'Admin', 'controller' => 'ImageGalleries', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . (($this->request->getParam('controller') == 'ImageGalleries') ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?php if(SettingsManager::read('Comments.pagesEnabled', false) || SettingsManager::read('Comments.articlesEnabled', false)) : ?>
            <?= $this->Html->link(
                '<i class="fas fa-comments me-2"></i>' . __('Comments'),
                ['prefix' => 'Admin', 'controller' => 'Comments', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'Comments' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>
            <?php endif; ?>

            <!-- User Management -->
            <div class="list-group-item list-group-item-action border-0 sidebar-header">
              <h6 class="mb-1 text-muted"><?= __('Users') ?></h6>
            </div>

            <?= $this->Html->link(
                '<i class="fas fa-users me-2"></i>' . __('Manage Users'),
                ['prefix' => 'Admin', 'controller' => 'Users', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'Users' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <!-- Administration -->
            <div class="list-group-item list-group-item-action border-0 sidebar-header">
              <h6 class="mb-1 text-muted"><?= __('Administration') ?></h6>
            </div>

            <?= $this->Html->link(
                '<i class="fas fa-cog me-2"></i>' . __('Settings'),
                ['prefix' => 'Admin', 'controller' => 'Settings', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'Settings' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-envelope me-2"></i>' . __('Email Templates'),
                ['prefix' => 'Admin', 'controller' => 'EmailTemplates', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'EmailTemplates' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-link me-2"></i>' . __('Slugs'),
                ['prefix' => 'Admin', 'controller' => 'Slugs', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'Slugs' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?php if (Configure::read('debug')) : ?>
            <?= $this->Html->link(
                '<i class="fas fa-robot me-2"></i>' . __('AI Prompts'),
                ['prefix' => 'Admin', 'controller' => 'Aiprompts', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'Aiprompts' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-globe me-2"></i>' . __('Internationalisation'),
                ['prefix' => 'Admin', 'controller' => 'Internationalisations', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'Internationalisations' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>
            <?php endif; ?>

            <!-- System -->
            <div class="list-group-item list-group-item-action border-0 sidebar-header">
              <h6 class="mb-1 text-muted"><?= __('System') ?></h6>
            </div>

            <?= $this->Html->link(
                '<i class="fas fa-trash me-2"></i>' . __('Clear Cache'),
                ['prefix' => 'Admin', 'controller' => 'Cache', 'action' => 'clearAll'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'Cache' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-ban me-2"></i>' . __('Blocked IPs'),
                ['prefix' => 'Admin', 'controller' => 'BlockedIps', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'BlockedIps' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>

            <?= $this->Html->link(
                '<i class="fas fa-file-text me-2"></i>' . __('System Logs'),
                ['prefix' => 'Admin', 'controller' => 'SystemLogs', 'action' => 'index'],
                [
                    'class' => 'list-group-item list-group-item-action border-0' . ($activeCtl == 'SystemLogs' ? ' active' : ''),
                    'escape' => false
                ]
            ) ?>
          </div>
        </div>
      </div>

      <!-- Main Content Area -->
      <main class="admin-main">
        <div class="admin-content p-3">
          <?= $this->Flash->render() ?>
          <?= $this->fetch('content') ?>
        </div>
      </main>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <?= $this->Html->script('AdminTheme.admin-layout') ?>
    <?= $this->fetch('scriptBottom') ?>

  </body>
</html>

// ----- END FILE: plugins/AdminTheme/templates/layout/default.php -----

FILE: plugins/AdminTheme/templates/layout/minimal.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 30 bytes
CONTENT:
<?= $this->fetch('content') ?>

// ----- END FILE: plugins/AdminTheme/templates/layout/minimal.php -----

FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/manage_images.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 5528 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\ImageGallery $imageGallery
 */

// Load CSS and JavaScript assets
$this->Html->css('images-grid', ['block' => true]); // Now includes gallery styles
$this->Html->script('https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js', ['block' => true]);
$this->Html->script('gallery-manage-images', ['block' => true]);
?>
<div class="row">
    <div class="col-12">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-3">
            <div class="mb-2 mb-md-0">
                <h3><?= h($imageGallery->name) ?> - <?= __('Manage Images') ?></h3>
            </div>
            <div class="btn-group btn-group-sm" role="group">
                <?= $this->Html->link(
                    '<i class="fas fa-edit me-1"></i>' . __('Edit Gallery'), 
                    ['action' => 'edit', $imageGallery->id], 
                    ['class' => 'btn btn-outline-primary', 'escape' => false]
                ) ?>
                <?= $this->Html->link(
                    '<i class="fas fa-list me-1"></i>' . __('List Galleries'), 
                    ['action' => 'index'], 
                    ['class' => 'btn btn-outline-secondary', 'escape' => false]
                ) ?>
                <?= $this->Html->link(
                    '<i class="fas fa-plus me-1"></i>' . __('New Gallery'), 
                    ['action' => 'add'], 
                    ['class' => 'btn btn-outline-success', 'escape' => false]
                ) ?>
                <?= $this->Html->link(
                    '<i class="fas fa-trash me-1"></i>' . __('Delete'), 
                    ['action' => 'delete', $imageGallery->id], 
                    [
                        'confirm' => __('Are you sure you want to delete "{0}"?', $imageGallery->name),
                        'class' => 'btn btn-outline-danger',
                        'escape' => false
                    ]
                ) ?>
            </div>
        </div>
        <div class="imageGalleries manage images">
            <div class="table-responsive">
                <p><?= __('Drag and drop images to reorder them in the gallery.') ?></p>
                
                <?php if (!empty($imageGallery->image_galleries_images)): ?>
                    <div id="sortable-images" class="gallery-manage-grid">
                        <?php foreach ($imageGallery->image_galleries_images as $galleryImage): ?>
                            <div class="gallery-image-item" data-image-id="<?= h($galleryImage->image_id) ?>">
                                <?php if ($galleryImage->image && $galleryImage->image->image): ?>
                                    <?= $this->element('image/icon', [
                                        'model' => $galleryImage->image, 
                                        'icon' => $galleryImage->image->mediumImageUrl ?? null, 
                                        'preview' => $galleryImage->image->largeImageUrl ?? null
                                    ]) ?>
                                    <div class="gallery-image-actions">
                                        <button type="button" class="btn btn-danger btn-sm remove-image" 
                                                data-image-id="<?= h($galleryImage->image_id) ?>">
                                            <?= __('Remove') ?>
                                        </button>
                                    </div>
                                <?php else: ?>
                                    <div class="text-muted text-center p-3">
                                        <i class="fas fa-image"></i><br>
                                        <?= __('Image not available') ?>
                                        <div class="gallery-image-actions">
                                            <button type="button" class="btn btn-danger btn-sm remove-image" 
                                                    data-image-id="<?= h($galleryImage->image_id) ?>">
                                                <?= __('Remove') ?>
                                            </button>
                                        </div>
                                    </div>
                                <?php endif; ?>
                            </div>
                        <?php endforeach; ?>
                    </div>
                <?php else: ?>
                    <p><?= __('No images in this gallery yet.') ?></p>
                <?php endif; ?>
                
                <div class="actions">
                    <?= $this->Html->link(__('Add Images'), ['controller' => 'Images', 'action' => 'picker', '?' => ['gallery_id' => $imageGallery->id]], ['class' => 'btn btn-primary']) ?>
                </div>
            </div>
        </div>
    </div>
</div>

<?php
// Configure gallery management via data attributes
$this->Html->scriptBlock(
    'window.GalleryManageConfig = ' . json_encode([
        'galleryId' => $imageGallery->id,
        'csrfToken' => $this->request->getAttribute('csrfToken'),
        'updateOrderUrl' => $this->Url->build(['action' => 'updateImageOrder']),
        'removeImageUrl' => $this->Url->build(['action' => 'removeImage', $imageGallery->id]) . '/:imageId',
        'confirmMessage' => __('Are you sure you want to remove this image from the gallery?')
    ], JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP) . ';',
    ['block' => true]
);
?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/manage_images.php -----

FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/picker.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 10681 bytes
CONTENT:
<?php
/**
 * Gallery Picker - For selecting galleries to insert into content
 * Modern layout with separated search form and results for smooth AJAX updates
 * 
 * @var \App\View\AppView $this
 * @var iterable $results Gallery results
 * @var string|null $search Current search term
 * @var string $viewType Current view type (grid/list)
 */

$results = $results ?? [];
$search = $search ?? '';
$viewType = $viewType ?? 'grid';
?>

<div class="willow-gallery-picker">
    <!-- Static Search Form (Never gets replaced via AJAX) -->
    <div class="willow-search-form p-3">
        <div class="row align-items-center">
            <div class="col-md-8">
                <div class="input-group">
                    <span class="input-group-text bg-white border-end-0">
                        <i class="fas fa-search text-muted"></i>
                    </span>
                    <input type="text" 
                           class="form-control border-start-0" 
                           id="gallerySearch" 
                           placeholder="<?= __('Search galleries by name, description...') ?>"
                           value="<?= h($search) ?>"
                           autocomplete="off">
                    <?php if ($search): ?>
                        <button class="btn btn-outline-secondary" type="button" id="clearGallerySearch">
                            <i class="fas fa-times"></i>
                        </button>
                    <?php endif; ?>
                </div>
            </div>
            <div class="col-md-4 text-end">
                <div class="btn-group" role="group" aria-label="View toggle">
                    <input type="radio" class="btn-check" name="galleryViewType" id="gridView" value="grid" <?= $viewType === 'grid' ? 'checked' : '' ?>>
                    <label class="btn btn-outline-primary" for="gridView" title="<?= __('Grid View') ?>">
                        <i class="fas fa-th"></i>
                    </label>
                    <input type="radio" class="btn-check" name="galleryViewType" id="listView" value="list" <?= $viewType === 'list' ? 'checked' : '' ?>>
                    <label class="btn btn-outline-primary" for="listView" title="<?= __('List View') ?>">
                        <i class="fas fa-list"></i>
                    </label>
                </div>
            </div>
        </div>
        
        <!-- Search Stats -->
        <div class="row mt-2">
            <div class="col">
                <small class="text-muted">
                    <i class="fas fa-info-circle me-1"></i>
                    <?= __('Select a gallery to insert into your content') ?>
                </small>
            </div>
        </div>
    </div>

    <!-- Dynamic Results Container (Gets replaced via AJAX) -->
    <div id="gallery-results" class="willow-results-container">
        <?php if (!empty($results)): ?>
            <div class="row g-3 p-3">
                <?php foreach ($results as $gallery): ?>
                    <div class="col-md-6 col-lg-4">
                        <div class="card willow-picker-card h-100 shadow-sm">
                            <!-- Gallery Preview -->
                            <div class="position-relative overflow-hidden" style="height: 180px;">
                                <?php if (!empty($gallery->images)): ?>
                                    <?php if ($gallery->hasPreviewImage()): ?>
                                        <img src="<?= h($gallery->getPreviewImageUrl()) ?>" 
                                             alt="<?= h($gallery->name) ?>"
                                             class="img-fluid w-100 h-100"
                                             style="object-fit: cover;">
                                    <?php else: ?>
                                        <img src="<?= h($gallery->images[0]->getImageUrl('medium')) ?>" 
                                             alt="<?= h($gallery->name) ?>"
                                             class="img-fluid w-100 h-100"
                                             style="object-fit: cover;">
                                    <?php endif; ?>
                                    
                                    <!-- Image count overlay -->
                                    <div class="position-absolute top-0 end-0 m-2">
                                        <span class="badge bg-dark bg-opacity-75">
                                            <i class="fas fa-images me-1"></i><?= count($gallery->images) ?>
                                        </span>
                                    </div>
                                    
                                    <!-- Status overlay -->
                                    <div class="position-absolute top-0 start-0 m-2">
                                        <span class="badge <?= $gallery->is_published ? 'bg-success' : 'bg-warning text-dark' ?>">
                                            <?= $gallery->is_published ? __('Published') : __('Draft') ?>
                                        </span>
                                    </div>
                                <?php else: ?>
                                    <div class="d-flex align-items-center justify-content-center h-100 bg-light">
                                        <div class="text-center text-muted">
                                            <i class="fas fa-images fa-3x mb-2"></i>
                                            <div class="small"><?= __('Empty Gallery') ?></div>
                                        </div>
                                    </div>
                                <?php endif; ?>
                            </div>

                            <!-- Gallery Info -->
                            <div class="card-body">
                                <h6 class="card-title mb-2"><?= h($gallery->name) ?></h6>
                                
                                <?php if ($gallery->description): ?>
                                    <p class="card-text text-muted small mb-2">
                                        <?= h($this->Text->truncate($gallery->description, 80)) ?>
                                    </p>
                                <?php endif; ?>
                                
                                <div class="d-flex justify-content-between align-items-center text-muted small">
                                    <span>
                                        <i class="fas fa-calendar me-1"></i>
                                        <?= $gallery->created->format('M j, Y') ?>
                                    </span>
                                    <span>
                                        <i class="fas fa-tag me-1"></i>
                                        <?= h($gallery->slug) ?>
                                    </span>
                                </div>
                            </div>

                            <!-- Selection Button -->
                            <div class="card-footer bg-transparent p-3 pt-0">
                                <button type="button" 
                                        class="btn btn-primary w-100 select-gallery"
                                        data-gallery-id="<?= h($gallery->id) ?>"
                                        data-gallery-name="<?= h($gallery->name) ?>"
                                        data-gallery-slug="<?= h($gallery->slug) ?>"
                                        data-theme="default"
                                        data-image-count="<?= count($gallery->images) ?>">
                                    <i class="fas fa-plus me-2"></i>
                                    <?= __('Insert Gallery') ?>
                                </button>
                            </div>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
        <?php else: ?>
            <!-- Beautiful Empty State -->
            <div class="willow-empty-state p-5">
                <div class="text-center">
                    <?php if ($search): ?>
                        <i class="fas fa-search fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted mb-2"><?= __('No galleries found') ?></h5>
                        <p class="text-muted mb-3">
                            <?= __('No galleries match "{0}"', h($search)) ?>
                        </p>
                        <button type="button" class="btn btn-outline-primary" id="clearSearchBtn">
                            <i class="fas fa-times me-2"></i>
                            <?= __('Clear Search') ?>
                        </button>
                    <?php else: ?>
                        <i class="fas fa-images fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted mb-2"><?= __('No galleries available') ?></h5>
                        <p class="text-muted">
                            <?= __('Create image galleries first to insert them into your content.') ?>
                        </p>
                    <?php endif; ?>
                </div>
            </div>
        <?php endif; ?>

        <!-- Pagination -->
        <?php if ($this->Paginator->total() > $this->Paginator->param('perPage')): ?>
            <div class="d-flex justify-content-center p-3 border-top">
                <?= $this->element('pagination') ?>
            </div>
        <?php endif; ?>
    </div>
</div>

<script>
// Enhanced gallery picker interactions
document.addEventListener('DOMContentLoaded', function() {
    // Clear search functionality
    const clearSearchBtn = document.getElementById('clearSearchBtn');
    if (clearSearchBtn) {
        clearSearchBtn.addEventListener('click', function() {
            const searchInput = document.getElementById('gallerySearch');
            if (searchInput) {
                searchInput.value = '';
                searchInput.dispatchEvent(new Event('input', { bubbles: true }));
                searchInput.focus();
            }
        });
    }
    
    // Clear search button in search form
    const clearGallerySearch = document.getElementById('clearGallerySearch');
    if (clearGallerySearch) {
        clearGallerySearch.addEventListener('click', function() {
            const searchInput = document.getElementById('gallerySearch');
            if (searchInput) {
                searchInput.value = '';
                searchInput.dispatchEvent(new Event('input', { bubbles: true }));
                searchInput.focus();
            }
        });
    }
});

// ----- END FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/picker.php -----

FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/add.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 5479 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\ImageGallery $imageGallery
 * @var \Cake\Collection\CollectionInterface|string[] $images
 */
?>
<?php
// Only show actions if we have an entity (edit mode)
if (!$imageGallery->isNew()) {
    echo $this->element('actions_card', [
        'modelName' => 'Image Gallery',
        'controllerName' => 'Image Galleries',
        'entity' => $imageGallery,
        'entityDisplayName' => $imageGallery->name
    ]);
}
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Add Image Gallery') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($imageGallery,
                    [
                        'type' => 'file',
                        'enctype' => 'multipart/form-data',
                        'class' => 'needs-validation', 'novalidate' => true
                    ]) ?>
                    <fieldset>
                        <div class="mb-3">
                            <?php echo $this->Form->control('name', ['class' => 'form-control' . ($this->Form->isFieldError('name') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('name')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('name') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        
                        <div class="mb-3">
                            <?php echo $this->Form->control('description', ['type' => 'textarea', 'rows' => 3, 'class' => 'form-control' . ($this->Form->isFieldError('description') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('description')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('description') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        
                        <div class="mb-3">
                            <div class="form-check">
                                <?php echo $this->Form->checkbox('is_published', [
                                    'class' => 'form-check-input' . ($this->Form->isFieldError('is_published') ? ' is-invalid' : '')
                                ]); ?>
                                <label class="form-check-label" for="is-published">
                                    <?= __('Is Published') ?>
                                </label>
                            </div>
                            <?php if ($this->Form->isFieldError('is_published')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('is_published') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <label class="form-label"><?= __('Upload Images') ?></label>
                            <div class="alert alert-info">
                                <h6 class="alert-heading"><i class="fas fa-info-circle me-2"></i><?= __('Upload Options') ?></h6>
                                <p class="mb-2"><?= __('You can upload:') ?></p>
                                <ul class="mb-0">
                                    <li><strong><?= __('Individual Images') ?>:</strong> <?= __('JPG, PNG, GIF files') ?></li>
                                    <li><strong><?= __('Archive Files') ?>:</strong> <?= __('ZIP, TAR, TAR.GZ files containing multiple images') ?></li>
                                </ul>
                            </div>
                            <?php echo $this->Form->control('image_files[]', [
                                'type' => 'file',
                                'multiple' => true,
                                'accept' => 'image/*,.zip,.tar,.tar.gz,.tgz',
                                'class' => 'form-control' . ($this->Form->isFieldError('image_files') ? ' is-invalid' : ''),
                                'label' => false
                            ]); ?>
                            <?php if ($this->Form->isFieldError('image_files')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('image_files') ?>
                                </div>
                            <?php endif; ?>
                            <div class="form-text">
                                <?= __('Select multiple image files or archive files. Images will be automatically processed and added to this gallery.') ?>
                            </div>
                        </div>
                    </fieldset>
                    
                    <?= $this->element('form/seo', ['hideWordCount' => true]) ?>
                    
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/add.php -----

FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 7472 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\ImageGallery> $imageGalleries
 * @var string $viewType
 */

// Load gallery search JavaScript
$this->Html->script('AdminTheme.gallery-search', ['block' => 'scriptBottom']);
?>

<!-- Header with view switcher and search -->
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center">
        <div class="d-flex align-items-center me-auto">
            <!-- View Switcher -->
            <?= $this->element('view_switcher', [
                'currentView' => $viewType,
                'queryParams' => $this->request->getQueryParams()
            ]) ?>
            
            <!-- Search Form -->
            <?= $this->element('search_form', [
                'searchValue' => $this->request->getQuery('search'),
                'options' => [
                    'id' => 'gallery-search-form',
                    'inputId' => 'gallery-search',
                    'placeholder' => __('Search galleries...')
                ]
            ]) ?>
            
            <!-- Status Filter -->
            <?= $this->element('status_filter') ?>
        </div>
        
        <div class="flex-shrink-0">
            <?= $this->Html->link(
                '<i class="fas fa-plus"></i> ' . __('New Gallery'),
                ['action' => 'add'],
                ['class' => 'btn btn-success', 'escape' => false]
            ) ?>
        </div>
    </div>
</header>

<!-- Content Target for AJAX updates -->
<div id="ajax-target">
    <?php if (empty($imageGalleries)): ?>
        <?= $this->element('empty_state', [
            'icon' => 'fas fa-images',
            'title' => __('No Image Galleries Found'),
            'message' => __('Create your first gallery to get started.'),
            'actionText' => __('Create Gallery'),
            'actionUrl' => ['action' => 'add']
        ]) ?>
    <?php else: ?>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th><?= __('Preview') ?></th>
                        <th><?= $this->Paginator->sort('name') ?></th>
                        <th><?= $this->Paginator->sort('slug') ?></th>
                        <th><?= __('Status') ?></th>
                        <th><?= __('Images') ?></th>
                        <th><?= $this->Paginator->sort('created') ?></th>
                        <th class="actions"><?= __('Actions') ?></th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($imageGalleries as $gallery): ?>
                    <tr>
                        <td>
                            <?php if ($gallery->hasPreviewImage()): ?>
                                <img src="<?= h($gallery->getPreviewImageUrl()) ?>"
                                     alt="<?= h($gallery->name) ?>"
                                     class="img-thumbnail gallery-preview-thumb"
                                     data-bs-toggle="popover"
                                     data-bs-trigger="hover"
                                     data-bs-content="<img src='<?= h($gallery->getPreviewImageUrl()) ?>' style='max-width: 300px; max-height: 200px;' alt='<?= h($gallery->name) ?>'>"
                                     data-bs-html="true"
                                     data-bs-placement="right">
                            <?php elseif (!empty($gallery->images)): ?>
                                <?= $this->element('image/icon', [
                                    'model' => $gallery->images[0],
                                    'icon' => $gallery->images[0]->tinyImageUrl,
                                    'preview' => $gallery->images[0]->mediumImageUrl,
                                    'class' => 'img-thumbnail gallery-preview-thumb'
                                ]) ?>
                            <?php else: ?>
                                <div class="text-center text-muted d-flex align-items-center justify-content-center img-thumbnail gallery-preview-thumb"
                                     style="border: 1px solid #ddd; border-radius: 4px;">
                                    <i class="fas fa-images"></i>
                                </div>
                            <?php endif; ?>
                        </td>
                        <td>
                            <strong><?= h($gallery->name) ?></strong>
                            <?php if ($gallery->description): ?>
                                <br><small class="text-muted"><?= $this->Text->truncate(h($gallery->description), 50) ?></small>
                            <?php endif; ?>
                        </td>
                        <td><code><?= h($gallery->slug) ?></code></td>
                        <td>
                            <?php if ($gallery->is_published): ?>
                                <span class="badge bg-success">
                                    <i class="fas fa-eye"></i> <?= __('Published') ?>
                                </span>
                            <?php else: ?>
                                <span class="badge bg-secondary">
                                    <i class="fas fa-eye-slash"></i> <?= __('Draft') ?>
                                </span>
                            <?php endif; ?>
                        </td>
                        <td>
                            <span class="badge bg-info">
                                <?= $gallery->getImageCount() ?> <?= __('images') ?>
                            </span>
                        </td>
                        <td><?= $gallery->created->format('M j, Y') ?></td>
                        <td>
                            <?= $this->element('evd_dropdown', [
                                'model' => $gallery,
                                'display' => 'name',
                                'controller' => 'ImageGalleries'
                            ]) ?>
                        </td>
                    </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
        
        <?= $this->element('pagination') ?>
    <?php endif; ?>
</div>

<script>
// Initialize gallery search with popover reinitialization callback
document.addEventListener('DOMContentLoaded', function() {
    if (window.GallerySearch) {
        window.GallerySearch.init({
            onSearchComplete: function() {
                // Re-initialize popovers after AJAX search
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    // Dispose existing popover to avoid duplicates
                    const existingPopover = bootstrap.Popover.getInstance(popoverTriggerEl);
                    if (existingPopover) {
                        existingPopover.dispose();
                    }
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            }
        });
    }
    
    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
</script>

// ----- END FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/index.php -----

FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/picker_search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 5577 bytes
CONTENT:
<?php
/**
 * Gallery Picker Search Results - AJAX response for gallery picker
 * 
 * @var \App\View\AppView $this
 * @var iterable $results Gallery results
 * @var string|null $search Current search term
 * @var string $viewType Current view type
 */

$results = $results ?? [];
$search = $search ?? '';
$viewType = $viewType ?? 'grid';
?>

<!-- Gallery Grid (same as picker.php but without the search form) -->
<div class="row" id="gallery-grid">
    <?php if (!empty($results)): ?>
        <?php foreach ($results as $gallery): ?>
            <div class="col-md-6 col-lg-4 mb-4">
                <div class="card gallery-picker-card h-100">
                    <!-- Gallery Preview -->
                    <div class="gallery-preview">
                        <?php if (!empty($gallery->images)): ?>
                            <div class="preview-grid">
                                <?php foreach (array_slice($gallery->images, 0, 4) as $index => $image): ?>
                                    <div class="preview-item preview-<?= $index + 1 ?>">
                                        <img src="<?= h($image->thumbnailImageUrl ?: $image->getImageUrlBySize('thumbnail')) ?>" 
                                             alt="<?= h($image->alt_text ?: $image->name) ?>"
                                             class="img-fluid">
                                    </div>
                                <?php endforeach; ?>
                                
                                <?php if (count($gallery->images) > 4): ?>
                                    <div class="preview-overlay">
                                        <span class="badge bg-dark">
                                            +<?= count($gallery->images) - 4 ?> <?= __('more') ?>
                                        </span>
                                    </div>
                                <?php endif; ?>
                            </div>
                        <?php else: ?>
                            <div class="empty-preview">
                                <i class="fas fa-images fa-3x text-muted"></i>
                                <p class="text-muted mt-2"><?= __('Empty Gallery') ?></p>
                            </div>
                        <?php endif; ?>
                    </div>

                    <!-- Gallery Info -->
                    <div class="card-body">
                        <h6 class="card-title"><?= h($gallery->name) ?></h6>
                        <?php if ($gallery->description): ?>
                            <p class="card-text text-muted small">
                                <?= h(mb_substr($gallery->description, 0, 100)) ?>
                                <?= mb_strlen($gallery->description) > 100 ? '...' : '' ?>
                            </p>
                        <?php endif; ?>
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">
                                <i class="fas fa-images me-1"></i>
                                <?= count($gallery->images) ?> <?= __('images') ?>
                            </small>
                            <small class="text-muted">
                                <?= $gallery->created->format('M j, Y') ?>
                            </small>
                        </div>
                    </div>

                    <!-- Selection Button -->
                    <div class="card-footer bg-transparent border-top-0 pt-0">
                        <button type="button" 
                                class="btn btn-primary btn-sm w-100 select-gallery"
                                data-gallery-id="<?= h($gallery->id) ?>"
                                data-gallery-name="<?= h($gallery->name) ?>"
                                data-gallery-slug="<?= h($gallery->slug) ?>"
                                data-theme="default"
                                data-image-count="<?= count($gallery->images) ?>">
                            <i class="fas fa-plus me-2"></i>
                            <?= __('Insert Gallery') ?>
                        </button>
                    </div>
                </div>
            </div>
        <?php endforeach; ?>
    <?php else: ?>
        <!-- Empty State -->
        <div class="col-12">
            <div class="text-center py-5">
                <i class="fas fa-images fa-4x text-muted mb-3"></i>
                <h5 class="text-muted"><?= __('No galleries found') ?></h5>
                <?php if ($search): ?>
                    <p class="text-muted">
                        <?= __('No galleries match your search for "{0}"', h($search)) ?>
                    </p>
                    <button type="button" class="btn btn-outline-secondary" onclick="document.getElementById('gallerySearch').value = ''; document.getElementById('gallerySearch').dispatchEvent(new Event('input'));">
                        <?= __('Clear Search') ?>
                    </button>
                <?php else: ?>
                    <p class="text-muted">
                        <?= __('Create some galleries first to insert them into your content.') ?>
                    </p>
                <?php endif; ?>
            </div>
        </div>
    <?php endif; ?>
</div>

<!-- Pagination -->
<?php if ($this->Paginator->total() > $this->Paginator->param('perPage')): ?>
    <div class="d-flex justify-content-center mt-4">
        <?= $this->element('pagination') ?>
    </div>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/picker_search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 7156 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\ImageGallery $imageGallery
 */
?>
<style>
/* Fix dropdown z-index issue in tables */
.table-responsive {
    overflow: visible !important;
}

.table .dropdown-menu {
    z-index: 1050 !important;
    position: absolute !important;
}

.table .dropdown {
    position: static;
}

.table .btn-group {
    position: relative;
}
</style>
<?php
echo $this->element('actions_card', [
    'modelName' => 'Image Gallery',
    'controllerName' => 'Image Galleries',
    'entity' => $imageGallery,
    'entityDisplayName' => $imageGallery->name
]);
?>
<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title"><?= h($imageGallery->name) ?></h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Name') ?></th>
                            <td><?= h($imageGallery->name) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Slug') ?></th>
                            <td><?= h($imageGallery->slug) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Created') ?></th>
                            <td><?= h($imageGallery->created) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Modified') ?></th>
                            <td><?= h($imageGallery->modified) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Is Published') ?></th>
                            <td><?= $imageGallery->is_published ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-danger">' . __('No') . '</span>'; ?></td>
                        </tr>
                    </table>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Description') ?></h5>
                            <p class="card-text"><?= html_entity_decode($imageGallery->description); ?></p>
                        </div>
                    </div>
                    
                    <?= $this->element('seo_display_fields', ['model' => $imageGallery, 'hideWordCount' => true]); ?>
                    
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Gallery Images') ?></h5>
                            <?php
                            // Use GalleryCell for consistent rendering
                            echo $this->cell('Gallery::display', [
                                $imageGallery->id,
                                'admin',
                                ''
                            ]);
                            ?>
                            
                            <?php if (!empty($imageGallery->images)): ?>
                                <!-- Admin actions for gallery management -->
                                <div class="mt-4 pt-4 border-top">
                                    <div class="row align-items-center">
                                        <div class="col-md-8">
                                            <div class="btn-group gap-2" role="group">
                                                <?= $this->Html->link(
                                                    '<i class="fas fa-edit me-2"></i>' . __('Manage Images'),
                                                    ['action' => 'manageImages', $imageGallery->id],
                                                    ['class' => 'btn btn-primary btn-lg', 'escape' => false]
                                                ) ?>
                                                
                                                <?= $this->Html->link(
                                                    '<i class="fas fa-plus me-2"></i>' . __('Add More Images'),
                                                    ['action' => 'edit', $imageGallery->id],
                                                    ['class' => 'btn btn-outline-secondary btn-lg ms-2', 'escape' => false]
                                                ) ?>
                                            </div>
                                        </div>
                                        
                                        <div class="col-md-4">
                                            <div class="text-muted small text-end">
                                                <i class="fas fa-info-circle me-1"></i>
                                                <?= __('Click any image to view slideshow') ?><br>
                                                <small class="text-muted"><?= __('Press spacebar or use controls to play automatically') ?></small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <?php endif; ?>
                        </div>
                    </div>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h4 class="card-title"><?= __('Related Slugs') ?></h4>
                            <?php if (!empty($imageGallery->slugs)) : ?>
                            <div class="table-responsive" style="overflow: visible;">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th><?= __('Slug') ?></th>
                                            <th><?= __('Created') ?></th>
                                            <th class="actions"><?= __('Actions') ?></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <?php foreach ($imageGallery->slugs as $slug) : ?>
                                        <tr>
                                            <td><?= h($slug->slug) ?></td>
                                            <td><?= h($slug->created) ?></td>
                                            <td class="actions">
                                                <?= $this->element('evd_dropdown', ['controller' => 'Slugs', 'model' => $slug, 'display' => 'slug']); ?>
                                            </td>
                                        </tr>
                                        <?php endforeach; ?>
                                    </tbody>
                                </table>
                            </div>
                            <?php endif; ?>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>




// ----- END FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/view.php -----

FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/picker_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6158 bytes
CONTENT:
<?php
/**
 * Gallery Picker Results - Only the results portion for AJAX updates
 * This template is used when gallery_only=1 parameter is present to avoid modal flicker
 * 
 * @var \App\View\AppView $this
 * @var iterable $results Gallery results
 * @var string|null $search Current search term
 */

$results = $results ?? [];
$search = $search ?? '';
?>

<?php if (!empty($results)): ?>
    <div class="row g-3 p-3">
        <?php foreach ($results as $gallery): ?>
            <div class="col-md-6 col-lg-4">
                <div class="card willow-picker-card h-100 shadow-sm">
                    <!-- Gallery Preview -->
                    <div class="position-relative overflow-hidden" style="height: 180px;">
                        <?php if (!empty($gallery->images)): ?>
                            <?php if ($gallery->hasPreviewImage()): ?>
                                <img src="<?= h($gallery->getPreviewImageUrl()) ?>" 
                                     alt="<?= h($gallery->name) ?>"
                                     class="img-fluid w-100 h-100"
                                     style="object-fit: cover;">
                            <?php else: ?>
                                <img src="<?= h($gallery->images[0]->getImageUrl('medium')) ?>" 
                                     alt="<?= h($gallery->name) ?>"
                                     class="img-fluid w-100 h-100"
                                     style="object-fit: cover;">
                            <?php endif; ?>
                            
                            <!-- Image count overlay -->
                            <div class="position-absolute top-0 end-0 m-2">
                                <span class="badge bg-dark bg-opacity-75">
                                    <i class="fas fa-images me-1"></i><?= count($gallery->images) ?>
                                </span>
                            </div>
                            
                            <!-- Status overlay -->
                            <div class="position-absolute top-0 start-0 m-2">
                                <span class="badge <?= $gallery->is_published ? 'bg-success' : 'bg-warning text-dark' ?>">
                                    <?= $gallery->is_published ? __('Published') : __('Draft') ?>
                                </span>
                            </div>
                        <?php else: ?>
                            <div class="d-flex align-items-center justify-content-center h-100 bg-light">
                                <div class="text-center text-muted">
                                    <i class="fas fa-images fa-3x mb-2"></i>
                                    <div class="small"><?= __('Empty Gallery') ?></div>
                                </div>
                            </div>
                        <?php endif; ?>
                    </div>

                    <!-- Gallery Info -->
                    <div class="card-body">
                        <h6 class="card-title mb-2"><?= h($gallery->name) ?></h6>
                        
                        <?php if ($gallery->description): ?>
                            <p class="card-text text-muted small mb-2">
                                <?= h($this->Text->truncate($gallery->description, 80)) ?>
                            </p>
                        <?php endif; ?>
                        
                        <div class="d-flex justify-content-between align-items-center text-muted small">
                            <span>
                                <i class="fas fa-calendar me-1"></i>
                                <?= $gallery->created->format('M j, Y') ?>
                            </span>
                            <span>
                                <i class="fas fa-tag me-1"></i>
                                <?= h($gallery->slug) ?>
                            </span>
                        </div>
                    </div>

                    <!-- Selection Button -->
                    <div class="card-footer bg-transparent p-3 pt-0">
                        <button type="button" 
                                class="btn btn-primary w-100 select-gallery"
                                data-gallery-id="<?= h($gallery->id) ?>"
                                data-gallery-name="<?= h($gallery->name) ?>"
                                data-gallery-slug="<?= h($gallery->slug) ?>"
                                data-theme="default"
                                data-image-count="<?= count($gallery->images) ?>">
                            <i class="fas fa-plus me-2"></i>
                            <?= __('Insert Gallery') ?>
                        </button>
                    </div>
                </div>
            </div>
        <?php endforeach; ?>
    </div>
<?php else: ?>
    <!-- Beautiful Empty State -->
    <div class="willow-empty-state p-5">
        <div class="text-center">
            <?php if ($search): ?>
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h5 class="text-muted mb-2"><?= __('No galleries found') ?></h5>
                <p class="text-muted mb-3">
                    <?= __('No galleries match "{0}"', h($search)) ?>
                </p>
                <button type="button" class="btn btn-outline-primary" id="clearSearchBtn">
                    <i class="fas fa-times me-2"></i>
                    <?= __('Clear Search') ?>
                </button>
            <?php else: ?>
                <i class="fas fa-images fa-3x text-muted mb-3"></i>
                <h5 class="text-muted mb-2"><?= __('No galleries available') ?></h5>
                <p class="text-muted">
                    <?= __('Create image galleries first to insert them into your content.') ?>
                </p>
            <?php endif; ?>
        </div>
    </div>
<?php endif; ?>

<!-- Pagination -->
<?php if ($this->Paginator->total() > $this->Paginator->param('perPage')): ?>
    <div class="d-flex justify-content-center p-3 border-top">
        <?= $this->element('pagination') ?>
    </div>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/picker_results.php -----

FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/edit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6458 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\ImageGallery $imageGallery
 * @var string[]|\Cake\Collection\CollectionInterface $images
 */
?>
<?php
// Only show actions if we have an entity (edit mode)
if (!$imageGallery->isNew()) {
    echo $this->element('actions_card', [
        'modelName' => 'Image Gallery',
        'controllerName' => 'Image Galleries',
        'entity' => $imageGallery,
        'entityDisplayName' => $imageGallery->name
    ]);
}
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Edit Image Gallery') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($imageGallery,
                    [
                        'type' => 'file',
                        'enctype' => 'multipart/form-data',
                        'class' => 'needs-validation', 'novalidate' => true
                    ]) ?>
                    <fieldset>
                        <div class="mb-3">
                            <?php echo $this->Form->control('name', ['class' => 'form-control' . ($this->Form->isFieldError('name') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('name')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('name') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        
                        <div class="mb-3">
                            <?php echo $this->Form->control('slug', ['class' => 'form-control' . ($this->Form->isFieldError('slug') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('slug')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('slug') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        
                        <div class="mb-3">
                            <?php echo $this->Form->control('description', ['type' => 'textarea', 'rows' => 3, 'class' => 'form-control' . ($this->Form->isFieldError('description') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('description')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('description') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        
                        <div class="mb-3">
                            <div class="form-check">
                                <?php echo $this->Form->checkbox('is_published', [
                                    'class' => 'form-check-input' . ($this->Form->isFieldError('is_published') ? ' is-invalid' : '')
                                ]); ?>
                                <label class="form-check-label" for="is-published">
                                    <?= __('Is Published') ?>
                                </label>
                            </div>
                            <?php if ($this->Form->isFieldError('is_published')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('is_published') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <label class="form-label"><?= __('Add More Images') ?></label>
                            <div class="alert alert-info">
                                <h6 class="alert-heading"><i class="fas fa-plus-circle me-2"></i><?= __('Add Images to Gallery') ?></h6>
                                <p class="mb-2"><?= __('Upload additional images to add to this gallery:') ?></p>
                                <ul class="mb-0">
                                    <li><strong><?= __('Individual Images') ?>:</strong> <?= __('JPG, PNG, GIF files') ?></li>
                                    <li><strong><?= __('Archive Files') ?>:</strong> <?= __('ZIP, TAR, TAR.GZ files containing multiple images') ?></li>
                                </ul>
                                <hr class="my-2">
                                <p class="mb-0 small text-muted">
                                    <i class="fas fa-info-circle me-1"></i><?= __('New images will be added to the existing gallery. Existing images will not be affected.') ?>
                                </p>
                            </div>
                            <?php echo $this->Form->control('image_files[]', [
                                'type' => 'file',
                                'multiple' => true,
                                'accept' => 'image/*,.zip,.tar,.tar.gz,.tgz',
                                'class' => 'form-control' . ($this->Form->isFieldError('image_files') ? ' is-invalid' : ''),
                                'label' => false,
                                'required' => false
                            ]); ?>
                            <?php if ($this->Form->isFieldError('image_files')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('image_files') ?>
                                </div>
                            <?php endif; ?>
                            <div class="form-text">
                                <?= __('Optional: Select image files or archive files to add to this gallery. Leave empty to update gallery details only.') ?>
                            </div>
                        </div>
                    </fieldset>
                    
                    <?= $this->element('form/seo', ['hideWordCount' => true]) ?>
                    
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/index_grid.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3192 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\ImageGallery> $imageGalleries
 * @var string $viewType
 */

// Load gallery search and grid interaction JavaScript
$this->Html->script('gallery-search', ['block' => true]);
$this->Html->script('gallery-grid-interactions', ['block' => true]);

// Load consolidated images-grid CSS (includes gallery styles)
$this->Html->css('images-grid', ['block' => true]);
?>

<!-- Header with view switcher and search -->
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center">
        <div class="d-flex align-items-center me-auto">
            <!-- View Switcher -->
            <?= $this->element('view_switcher', [
                'currentView' => $viewType,
                'queryParams' => $this->request->getQueryParams()
            ]) ?>
            
            <!-- Search Form -->
            <?= $this->element('search_form', [
                'searchValue' => $this->request->getQuery('search'),
                'options' => [
                    'id' => 'gallery-search-form',
                    'inputId' => 'gallery-search',
                    'placeholder' => __('Search galleries...')
                ]
            ]) ?>
            
            <!-- Status Filter -->
            <?= $this->element('status_filter') ?>
        </div>
        
        <div class="flex-shrink-0">
            <?= $this->Html->link(
                '<i class="fas fa-plus"></i> ' . __('New Gallery'),
                ['action' => 'add'],
                ['class' => 'btn btn-success', 'escape' => false]
            ) ?>
        </div>
    </div>
</header>

<!-- Content Target for AJAX updates -->
<div id="ajax-target">
    <?php if (empty($imageGalleries)): ?>
        <?= $this->element('empty_state', [
            'icon' => 'fas fa-images',
            'title' => __('No Image Galleries Found'),
            'message' => __('Create your first gallery to get started.'),
            'actionText' => __('Create Gallery'),
            'actionUrl' => ['action' => 'add']
        ]) ?>
    <?php else: ?>
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4">
            <?php foreach ($imageGalleries as $gallery): ?>
            <div class="col">
                <?= $this->element('ImageGalleries/gallery_card', ['gallery' => $gallery]) ?>
            </div>
            <?php endforeach; ?>
        </div>
        
        <?= $this->element('pagination') ?>
    <?php endif; ?>
</div>

<script>
// Initialize gallery search and grid interactions
document.addEventListener('DOMContentLoaded', function() {
    // Initialize search with grid interaction refresh callback
    if (window.GallerySearch) {
        window.GallerySearch.init({
            onSearchComplete: function() {
                // Refresh grid interactions after AJAX search
                if (window.GalleryGridInteractions) {
                    window.GalleryGridInteractions.refresh();
                }
            }
        });
    }
    
    // Initialize grid interactions
    if (window.GalleryGridInteractions) {
        window.GalleryGridInteractions.init();
    }
});
</script>



// ----- END FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/index_grid.php -----

FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 5723 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\ImageGallery> $imageGalleries
 * @var string $viewType
 * @var string|null $search
 * @var string|null $statusFilter
 */

if ($viewType === 'grid'): ?>
    <!-- Grid View Results -->
    <?php if (empty($imageGalleries)): ?>
        <?= $this->element('empty_state', [
            'type' => 'search',
            'title' => __('No galleries found'),
            'message' => __('Try adjusting your search terms or filters.')
        ]) ?>
    <?php else: ?>
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4">
            <?php foreach ($imageGalleries as $gallery): ?>
            <div class="col">
                <?= $this->element('ImageGalleries/gallery_card', ['gallery' => $gallery]) ?>
            </div>
            <?php endforeach; ?>
        </div>
        
        <?= $this->element('pagination') ?>
    <?php endif; ?>

<?php else: ?>
    <!-- List View Results -->
    <?php if (empty($imageGalleries)): ?>
        <?= $this->element('empty_state', [
            'type' => 'search',
            'title' => __('No galleries found'),
            'message' => __('Try adjusting your search terms or filters.')
        ]) ?>
    <?php else: ?>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th><?= __('Preview') ?></th>
                        <th><?= $this->Paginator->sort('name') ?></th>
                        <th><?= $this->Paginator->sort('slug') ?></th>
                        <th><?= __('Status') ?></th>
                        <th><?= __('Images') ?></th>
                        <th><?= $this->Paginator->sort('created') ?></th>
                        <th class="actions"><?= __('Actions') ?></th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($imageGalleries as $gallery): ?>
                    <tr>
                        <td>
                            <?php if ($gallery->hasPreviewImage()): ?>
                                <img src="<?= h($gallery->getPreviewImageUrl()) ?>"
                                     alt="<?= h($gallery->name) ?>"
                                     class="img-thumbnail gallery-preview-thumb"
                                     style="width: 60px; height: 45px; object-fit: cover;"
                                     data-bs-toggle="popover"
                                     data-bs-trigger="hover"
                                     data-bs-content="<img src='<?= h($gallery->getPreviewImageUrl()) ?>' style='max-width: 300px; max-height: 200px;' alt='<?= h($gallery->name) ?>'>"
                                     data-bs-html="true"
                                     data-bs-placement="right">
                            <?php elseif (!empty($gallery->images)): ?>
                                <?= $this->element('image/icon', [
                                    'model' => $gallery->images[0],
                                    'icon' => $gallery->images[0]->tinyImageUrl,
                                    'preview' => $gallery->images[0]->mediumImageUrl,
                                    'class' => 'img-thumbnail gallery-preview-thumb'
                                ]) ?>
                            <?php else: ?>
                                <div class="text-center text-muted d-flex align-items-center justify-content-center img-thumbnail"
                                     style="width: 60px; height: 45px; border: 1px solid #ddd; border-radius: 4px;">
                                    <i class="fas fa-images"></i>
                                </div>
                            <?php endif; ?>
                        </td>
                        <td>
                            <strong><?= h($gallery->name) ?></strong>
                            <?php if ($gallery->description): ?>
                                <br><small class="text-muted"><?= $this->Text->truncate(h($gallery->description), 50) ?></small>
                            <?php endif; ?>
                        </td>
                        <td><code><?= h($gallery->slug) ?></code></td>
                        <td>
                            <?php if ($gallery->is_published): ?>
                                <span class="badge bg-success">
                                    <i class="fas fa-eye"></i> <?= __('Published') ?>
                                </span>
                            <?php else: ?>
                                <span class="badge bg-secondary">
                                    <i class="fas fa-eye-slash"></i> <?= __('Draft') ?>
                                </span>
                            <?php endif; ?>
                        </td>
                        <td>
                            <span class="badge bg-info">
                                <?= $gallery->getImageCount() ?> <?= __('images') ?>
                            </span>
                        </td>
                        <td><?= $gallery->created->format('M j, Y') ?></td>
                        <td>
                            <?= $this->element('evd_dropdown', [
                                'model' => $gallery,
                                'display' => 'name',
                                'controller' => 'ImageGalleries'
                            ]) ?>
                        </td>
                    </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
        
        <?= $this->element('pagination') ?>
    <?php endif; ?>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/ImageGalleries/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Videos/video_select.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 9630 bytes
CONTENT:
<?php
/**
 * Video Picker - For selecting YouTube videos to insert into content
 * Modern layout with separated search form and results for smooth AJAX updates
 * 
 * @var \App\View\AppView $this
 * @var iterable $videos
 * @var string|null $searchTerm
 * @var bool|null $filterByChannel
 * @var string|null $channelId
 */

$videos = $videos ?? [];
$searchTerm = $searchTerm ?? '';
$filterByChannel = $filterByChannel ?? false;
$channelId = $channelId ?? 'your-api-key-here';
?>

<div class="willow-video-picker">
    <!-- Static Search Form (Never gets replaced via AJAX) -->
    <div class="willow-search-form p-3">
        <div class="row align-items-center">
            <div class="col-md-8">
                <div class="input-group">
                    <span class="input-group-text bg-white border-end-0">
                        <i class="fab fa-youtube text-muted"></i>
                    </span>
                    <input type="text" 
                           class="form-control border-start-0" 
                           id="videoSearch" 
                           placeholder="<?= __('Search YouTube videos by title, description...') ?>"
                           value="<?= h($searchTerm) ?>"
                           autocomplete="off">
                    <?php if ($searchTerm): ?>
                        <button class="btn btn-outline-secondary" type="button" id="clearVideoSearch">
                            <i class="fas fa-times"></i>
                        </button>
                    <?php endif; ?>
                </div>
            </div>
            <?php if ($channelId !== 'your-api-key-here'): ?>
            <div class="col-md-4">
                <div class="form-check form-switch">
                    <input class="form-check-input" 
                           type="checkbox" 
                           id="channelFilter" 
                           <?= $filterByChannel ? 'checked' : '' ?>>
                    <label class="form-check-label" for="channelFilter">
                        <?= __('Channel videos only') ?>
                    </label>
                </div>
            </div>
            <?php endif; ?>
        </div>
        
        <!-- Search Stats -->
        <div class="row mt-2">
            <div class="col">
                <small class="text-muted">
                    <i class="fas fa-info-circle me-1"></i>
                    <?= __('Search for YouTube videos to embed in your content') ?>
                </small>
            </div>
        </div>
    </div>

    <!-- Dynamic Results Container (Gets replaced via AJAX) -->
    <div id="video-results" class="willow-results-container">
        <?php if (!empty($videos)): ?>
            <div class="row g-3 p-3">
                <?php foreach ($videos as $video): ?>
                    <div class="col-md-6 col-lg-4">
                        <div class="card willow-picker-card h-100 shadow-sm">
                            <!-- Video Thumbnail -->
                            <div class="position-relative overflow-hidden" style="height: 200px; background: #000;">
                                <img src="<?= h($video['thumbnail']) ?>" 
                                     alt="<?= h($video['title']) ?>"
                                     class="img-fluid w-100 h-100"
                                     style="object-fit: cover;">
                                
                                <!-- Play button overlay -->
                                <div class="position-absolute top-50 start-50 translate-middle">
                                    <div class="bg-danger bg-opacity-90 rounded-circle d-flex align-items-center justify-content-center" 
                                         style="width: 60px; height: 60px;">
                                        <i class="fab fa-youtube fa-2x text-white"></i>
                                    </div>
                                </div>
                                
                                <!-- Duration overlay (if available) -->
                                <?php if (!empty($video['duration'])): ?>
                                <div class="position-absolute bottom-0 end-0 m-2">
                                    <span class="badge bg-dark bg-opacity-75 small">
                                        <?= h($video['duration']) ?>
                                    </span>
                                </div>
                                <?php endif; ?>
                            </div>

                            <!-- Video Info -->
                            <div class="card-body p-3">
                                <h6 class="card-title mb-2" title="<?= h($video['title']) ?>">
                                    <?= h($this->Text->truncate($video['title'], 50)) ?>
                                </h6>
                                
                                <?php if (!empty($video['description'])): ?>
                                    <p class="card-text text-muted small mb-2">
                                        <?= h($this->Text->truncate($video['description'], 80, ['exact' => false])) ?>
                                    </p>
                                <?php endif; ?>
                                
                                <div class="d-flex justify-content-between align-items-center text-muted small">
                                    <span>
                                        <i class="fab fa-youtube me-1"></i>
                                        YouTube
                                    </span>
                                    <?php if (!empty($video['publishedAt'])): ?>
                                        <span>
                                            <?= date('M j, Y', strtotime($video['publishedAt'])) ?>
                                        </span>
                                    <?php endif; ?>
                                </div>
                            </div>
                            
                            <!-- Selection Button -->
                            <div class="card-footer bg-transparent p-3">
                                <button type="button" 
                                        class="btn btn-primary w-100 select-video" 
                                        data-video-id="<?= h($video['id']) ?>"
                                        data-title="<?= h($video['title']) ?>">
                                    <i class="fas fa-plus me-2"></i>
                                    <?= __('Insert Video') ?>
                                </button>
                            </div>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
        <?php else: ?>
            <!-- Beautiful Empty State -->
            <div class="willow-empty-state p-5">
                <div class="text-center">
                    <?php if ($searchTerm): ?>
                        <i class="fab fa-youtube fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted mb-2"><?= __('No videos found') ?></h5>
                        <p class="text-muted mb-3">
                            <?= __('No videos match "{0}"', h($searchTerm)) ?>
                        </p>
                        <button type="button" class="btn btn-outline-primary" id="clearVideoSearchBtn">
                            <i class="fas fa-times me-2"></i>
                            <?= __('Clear Search') ?>
                        </button>
                    <?php else: ?>
                        <i class="fab fa-youtube fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted mb-2"><?= __('Search for videos') ?></h5>
                        <p class="text-muted">
                            <?= __('Enter a search term to find YouTube videos to embed in your content.') ?>
                        </p>
                    <?php endif; ?>
                </div>
            </div>
        <?php endif; ?>
    </div>
</div>

<script>
// Enhanced video picker interactions
document.addEventListener('DOMContentLoaded', function() {
    // Clear search functionality
    const clearVideoSearchBtn = document.getElementById('clearVideoSearchBtn');
    if (clearVideoSearchBtn) {
        clearVideoSearchBtn.addEventListener('click', function() {
            const searchInput = document.getElementById('videoSearch');
            if (searchInput) {
                searchInput.value = '';
                searchInput.dispatchEvent(new Event('input', { bubbles: true }));
                searchInput.focus();
            }
        });
    }
    
    // Clear search button in search form
    const clearVideoSearch = document.getElementById('clearVideoSearch');
    if (clearVideoSearch) {
        clearVideoSearch.addEventListener('click', function() {
            const searchInput = document.getElementById('videoSearch');
            if (searchInput) {
                searchInput.value = '';
                searchInput.dispatchEvent(new Event('input', { bubbles: true }));
                searchInput.focus();
            }
        });
    }
    
    // Channel filter functionality
    const channelFilter = document.getElementById('channelFilter');
    if (channelFilter) {
        channelFilter.addEventListener('change', function() {
            const searchInput = document.getElementById('videoSearch');
            if (searchInput) {
                searchInput.dispatchEvent(new Event('input', { bubbles: true }));
            }
        });
    }
});
</script>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Videos/video_select.php -----

FILE: plugins/AdminTheme/templates/Admin/Videos/video_select_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4984 bytes
CONTENT:
<?php
/**
 * Video Picker Results - Only the results portion for AJAX updates
 * This template is used when gallery_only=1 parameter is present to avoid modal flicker
 * 
 * @var \App\View\AppView $this
 * @var iterable $videos
 * @var string|null $searchTerm
 */

$videos = $videos ?? [];
$searchTerm = $searchTerm ?? '';
?>

<?php if (!empty($videos)): ?>
    <div class="row g-3 p-3">
        <?php foreach ($videos as $video): ?>
            <div class="col-md-6 col-lg-4">
                <div class="card willow-picker-card h-100 shadow-sm">
                    <!-- Video Thumbnail -->
                    <div class="position-relative overflow-hidden" style="height: 200px; background: #000;">
                        <img src="<?= h($video['thumbnail']) ?>" 
                             alt="<?= h($video['title']) ?>"
                             class="img-fluid w-100 h-100"
                             style="object-fit: cover;">
                        
                        <!-- Play button overlay -->
                        <div class="position-absolute top-50 start-50 translate-middle">
                            <div class="bg-danger bg-opacity-90 rounded-circle d-flex align-items-center justify-content-center" 
                                 style="width: 60px; height: 60px;">
                                <i class="fab fa-youtube fa-2x text-white"></i>
                            </div>
                        </div>
                        
                        <!-- Duration overlay (if available) -->
                        <?php if (!empty($video['duration'])): ?>
                        <div class="position-absolute bottom-0 end-0 m-2">
                            <span class="badge bg-dark bg-opacity-75 small">
                                <?= h($video['duration']) ?>
                            </span>
                        </div>
                        <?php endif; ?>
                    </div>

                    <!-- Video Info -->
                    <div class="card-body p-3">
                        <h6 class="card-title mb-2" title="<?= h($video['title']) ?>">
                            <?= h($this->Text->truncate($video['title'], 50)) ?>
                        </h6>
                        
                        <?php if (!empty($video['description'])): ?>
                            <p class="card-text text-muted small mb-2">
                                <?= h($this->Text->truncate($video['description'], 80, ['exact' => false])) ?>
                            </p>
                        <?php endif; ?>
                        
                        <div class="d-flex justify-content-between align-items-center text-muted small">
                            <span>
                                <i class="fab fa-youtube me-1"></i>
                                YouTube
                            </span>
                            <?php if (!empty($video['publishedAt'])): ?>
                                <span>
                                    <?= date('M j, Y', strtotime($video['publishedAt'])) ?>
                                </span>
                            <?php endif; ?>
                        </div>
                    </div>
                    
                    <!-- Selection Button -->
                    <div class="card-footer bg-transparent p-3">
                        <button type="button" 
                                class="btn btn-primary w-100 select-video" 
                                data-video-id="<?= h($video['id']) ?>"
                                data-title="<?= h($video['title']) ?>">
                            <i class="fas fa-plus me-2"></i>
                            <?= __('Insert Video') ?>
                        </button>
                    </div>
                </div>
            </div>
        <?php endforeach; ?>
    </div>
<?php else: ?>
    <!-- Beautiful Empty State -->
    <div class="willow-empty-state p-5">
        <div class="text-center">
            <?php if ($searchTerm): ?>
                <i class="fab fa-youtube fa-3x text-muted mb-3"></i>
                <h5 class="text-muted mb-2"><?= __('No videos found') ?></h5>
                <p class="text-muted mb-3">
                    <?= __('No videos match "{0}"', h($searchTerm)) ?>
                </p>
                <button type="button" class="btn btn-outline-primary" id="clearVideoSearchBtn">
                    <i class="fas fa-times me-2"></i>
                    <?= __('Clear Search') ?>
                </button>
            <?php else: ?>
                <i class="fab fa-youtube fa-3x text-muted mb-3"></i>
                <h5 class="text-muted mb-2"><?= __('Search for videos') ?></h5>
                <p class="text-muted">
                    <?= __('Enter a search term to find YouTube videos to embed in your content.') ?>
                </p>
            <?php endif; ?>
        </div>
    </div>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Videos/video_select_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Settings/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 10183 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var array $groupedSettings
 */
?>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Settings') ?></h5>
                </div>

                <div class="card-body">
                    <?= $this->Form->create(null, ['url' => ['action' => 'saveSettings'], 'class' => 'needs-validation', 'novalidate' => true]) ?>
                    <?php foreach ($groupedSettings as $category => $settings): ?>
                        <h4 class="mb-3 mt-4 text-secondary"><?= h($this->makeHumanReadable($category)) ?></h4>
                        <div class="row">
                        <?php foreach ($settings as $key => $setting): ?>
                            <div class="col-md-<?= isset($setting['column_width']) ? $setting['column_width'] : 2; ?> mb-1">
                                <?php
                                $value = $setting['value'];
                                $value_type = $setting['value_type'];
                                $obscure = isset($setting['value_obscure']) && $setting['value_obscure'] == 1;
                                $description = $setting['description'];
                                $tooltipAttrs = !empty($description) ? [
                                    'data-bs-toggle' => 'tooltip',
                                    'data-bs-placement' => 'top',
                                    'title' => html_entity_decode($description)
                                ] : [];
                                ?>
                                <?php if ($value_type === 'bool'): ?>
                                    <div class="form-check form-switch" <?= $this->Html->templater()->formatAttributes($tooltipAttrs) ?>>
                                        <?= $this->Form->checkbox("{$category}.{$key}", [
                                            'label' => false,
                                            'value' => 1,
                                            'class' => 'form-check-input',
                                            'checked' => (bool)$value,
                                            'type' => 'checkbox'
                                        ]) ?>
                                        <label class="form-check-label" for="<?= "{$category}-{$key}" ?>">
                                            <?= $this->makeHumanReadable($key) ?>
                                        </label>
                                    </div>
                                <?php elseif ($value_type === 'select-page'): ?>
                                    <label class="form-check-label" for="<?= "{$category}-{$key}" ?>" 
                                        <?= $this->Html->templater()->formatAttributes($tooltipAttrs) ?>>
                                        <?= $this->makeHumanReadable($key) ?>
                                    </label>
                                    <?= $this->Form->select("{$category}.{$key}", $sitePages, [
                                        'label' => $this->makeHumanReadable($key),
                                        'value' => $value,
                                        'class' => 'form-control',
                                    ]) ?>
                                <?php elseif ($value_type === 'textarea'): ?>
                                    <?= $this->Form->control("{$category}.{$key}", array_merge([
                                        'label' => $this->makeHumanReadable($key),
                                        'value' => $value,
                                        'class' => 'form-control',
                                        'type' => 'textarea',
                                        'rows' => 8,
                                        'placeholder' => __('Enter text')
                                    ], $tooltipAttrs)) ?>
                                <?php elseif ($value_type === 'select'): ?>
                                    <?php $options = json_decode($setting['data'], true); ?>
                                    <label class="form-check-label" for="<?= "{$category}-{$key}" ?>" 
                                           <?= $this->Html->templater()->formatAttributes($tooltipAttrs) ?>>
                                        <?= $this->makeHumanReadable($key) ?>
                                    </label>
                                    <?= $this->Form->select("{$category}.{$key}", $options, [
                                        'label' => $this->makeHumanReadable($key),
                                        'value' => $value,
                                        'class' => 'form-control'
                                    ]) ?>
                                <?php elseif ($obscure): ?>
                                    <label for="<?= "{$category}-{$key}" ?>" 
                                           <?= $this->Html->templater()->formatAttributes($tooltipAttrs) ?>>
                                        <?= $this->makeHumanReadable($key) ?>
                                    </label>
                                    <div class="input-group">
                                        <?= $this->Form->text("{$category}.{$key}", [
                                            'value' => str_repeat('•', strlen($value)),
                                            'class' => 'form-control obscured-field obscured',
                                            'id' => "{$category}-{$key}",
                                            'autocomplete' => 'off',
                                            'data-real-value' => $value
                                        ]) ?>
                                        <button class="btn btn-outline-secondary toggle-obscured" type="button" 
                                                data-target="<?= "{$category}-{$key}" ?>">
                                            <?= __('Show') ?>
                                        </button>
                                    </div>
                                <?php else: ?>
                                    <?= $this->Form->control("{$category}.{$key}", array_merge([
                                        'label' => $this->makeHumanReadable($key),
                                        'value' => $value,
                                        'class' => 'form-control' . ($value_type === 'numeric' ? ' is-numeric' : ''),
                                        'type' => $value_type === 'numeric' ? 'number' : 'text',
                                        'min' => $value_type === 'numeric' ? 0 : null,
                                        'step' => $value_type === 'numeric' ? 1 : null,
                                        'placeholder' => $value_type === 'numeric' ? __('Enter a number') : __('Enter text')
                                    ], $tooltipAttrs)) ?>
                                <?php endif; ?>
                            </div>
                        <?php endforeach; ?>
                        </div>
                    <?php endforeach; ?>
                    <div class="text-center">
                        <?= $this->Form->button(__('Save All Settings'), ['class' => 'btn btn-primary mt-3']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>


            </div>
        </div>
    </div>
</div>

<?php $this->Html->scriptStart(['block' => true]); ?>
(function() {
    function ready(fn) {
        if (document.readyState !== 'loading') {
            fn();
        } else {
            document.addEventListener('DOMContentLoaded', fn);
        }
    }

    ready(function() {
        // Initialize Bootstrap tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Initialize all obscured fields
        document.querySelectorAll('.obscured-field').forEach(function(input) {
            input.type = 'password';
            
            input.addEventListener('input', function(e) {
                input.setAttribute('data-real-value', e.target.value);
            });

            input.addEventListener('paste', function(e) {
                setTimeout(() => {
                    input.setAttribute('data-real-value', input.value);
                }, 0);
            });
        });

        // Handle obscured field toggling
        document.body.addEventListener('click', function(event) {
            if (event.target.classList.contains('toggle-obscured')) {
                const targetId = event.target.getAttribute('data-target');
                const input = document.getElementById(targetId);

                if (input.classList.contains('obscured')) {
                    input.type = 'text';
                    input.value = input.getAttribute('data-real-value');
                    input.classList.remove('obscured');
                    event.target.textContent = '<?= __('Hide') ?>';
                } else {
                    input.type = 'password';
                    input.value = input.getAttribute('data-real-value');
                    input.classList.add('obscured');
                    event.target.textContent = '<?= __('Show') ?>';
                }
            }
        });

        // Handle form submission
        const form = document.querySelector('form');
        if (form) {
            form.addEventListener('submit', function() {
                document.querySelectorAll('.obscured-field').forEach(function(input) {
                    if (!input.classList.contains('obscured')) {
                        input.setAttribute('data-real-value', input.value);
                    }
                    input.value = input.getAttribute('data-real-value');
                });
            });
        }
    });
})();
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Settings/index.php -----

FILE: plugins/AdminTheme/templates/Admin/Users/add.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6222 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\User $user
 */
?>
<?php if (!$user->isNew()): ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'User',
        'controllerName' => 'Users',
        'entity' => $user,
        'entityDisplayName' => $user->username
    ]);
?>
<?php endif; ?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Add User') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($user,
                    [
                        'type' => 'file',
                        'enctype' => 'multipart/form-data',
                        'class' => 'needs-validation', 'novalidate' => true
                    ]) ?>
                    <fieldset>

                        <div class="mb-3">
                            <?php echo $this->Form->control('email', ['class' => 'form-control' . ($this->Form->isFieldError('email') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('email')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('email') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php echo $this->Form->control('username', ['class' => 'form-control' . ($this->Form->isFieldError('username') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('username')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('username') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php echo $this->Form->control('password', ['class' => 'form-control' . ($this->Form->isFieldError('password') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('password')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('password') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php echo $this->Form->control('confirm_password', ['type' => 'password', 'class' => 'form-control' . ($this->Form->isFieldError('confirm_password') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('confirm_password')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('confirm_password') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?= $this->Form->control('image', [
                                'type' => 'file',
                                'label' => [
                                    'text' => __('Image'),
                                    'class' => 'form-label'
                                ],
                                'class' => 'form-control' . ($this->Form->isFieldError('image') ? ' is-invalid' : ''),
                                'id' => 'customFile'
                            ]) ?>
                            <?php if ($this->Form->isFieldError('image')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('image') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <?php echo $this->Form->checkbox('is_admin', [
                                    'class' => 'form-check-input' . ($this->Form->isFieldError('is_admin') ? ' is-invalid' : '')
                                ]); ?>
                                <label class="form-check-label" for="is-admin">
                                    <?= __('Admin') ?>
                                </label>
                                <?php if ($this->Form->isFieldError('is_admin')): ?>
                                    <div class="invalid-feedback">
                                        <?= $this->Form->error('is_admin') ?>
                                    </div>
                                <?php endif; ?>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <?php echo $this->Form->checkbox('active', [
                                    'checked' => true,
                                    'class' => 'form-check-input' . ($this->Form->isFieldError('active') ? ' is-invalid' : '')
                                ]); ?>
                                <label class="form-check-label" for="active">
                                    <?= __('Active') ?>
                                </label>
                                <?php if ($this->Form->isFieldError('active')): ?>
                                    <div class="invalid-feedback">
                                        <?= $this->Form->error('active') ?>
                                    </div>
                                <?php endif; ?>
                            </div>
                        </div>

                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Users/add.php -----

FILE: plugins/AdminTheme/templates/Admin/Users/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6606 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\User> $users
 */
?>
<?php use App\Utility\SettingsManager; ?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center users">
      <div class="d-flex align-items-center me-auto">
        <ul class="navbar-nav me-3">
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false"><?= __('Filter') ?></a>
            <ul class="dropdown-menu">
              <?php $activeFilter = $this->request->getQuery('status');  ?>
              <li>
                <?= $this->Html->link(
                    __('All'), 
                    ['action' => 'index'], 
                    [
                      'class' => 'dropdown-item' . (null === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Active'), 
                    ['action' => 'index', '?' => ['status' => 1]],
                    [
                      'class' => 'dropdown-item' . ('1' === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Inactive'), 
                    ['action' => 'index', '?' => ['status' => 0]],
                    [
                      'class' => 'dropdown-item' . ('0' === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
            </ul>
          </li>
        </ul>
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="userSearch" type="search" class="form-control" placeholder="<?= __('Search Users...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
        </form>
      </div>
      <div class="flex-shrink-0">
        <?= $this->Html->link(__('New User'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
      </div>
    </div>
</header>
<div id="ajax-target">
  <table class="table table-striped">
    <thead>
      <tr>
            <th><?= __('Image') ?></th>
            <th scope="col"><?= $this->Paginator->sort('email') ?></th>
            <th scope="col"><?= $this->Paginator->sort('is_admin', __('Admin')) ?></th>
            <th scope="col"><?= $this->Paginator->sort('active', __('Active')) ?></th>
            <th scope="col"><?= __('Actions') ?></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($users as $user): ?>
      <tr>
          <td>
            <?php if (!empty($user->image)) : ?>
            <div class="position-relative">
              <?= $this->element('image/icon', ['model' => $user, 'icon' => $user->teenyImageUrl, 'preview' => $user->largeImageUrl]); ?>
            </div>
            <?php endif; ?>
          </td>
          <td><?= $this->Html->link(h($user->email), 'mailto:' . h($user->email)) ?></td>
          <td>
            <?= $user->is_admin ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-warning">' . __('No') . '</span>'; ?>
          </td>
          <td>
            <?= $user->active ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-warning">' . __('No') . '</span>'; ?>
          </td>
          <td>
              <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                  <div class="dropdown">
                  <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <?= __('Actions') ?>
                  </button>
                  <ul class="dropdown-menu">
                      <li>
                          <?= $this->Html->link(__('View'), ['action' => 'view', $user->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li>
                          <?= $this->Html->link(__('Edit'), ['action' => 'edit', $user->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li><hr class="dropdown-divider"></li>
                      <li>
                          <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $user->id], ['confirm' => __('Are you sure you want to delete {0}?', $user->email), 'class' => 'dropdown-item text-danger']) ?>
                      </li>
                  </ul>
                  </div>
              </div>
          </td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
  <?= $this->element('pagination', ['recordCount' => count($users), 'search' => $search ?? '']) ?>
</div>
<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('userSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            <?php if (null !== $activeFilter): ?>
            url += `?status=<?= urlencode($activeFilter) ?>`;
            <?php endif; ?>

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                // Re-initialize popovers after updating the content
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            })
            .catch(error => console.error('Error:', error));
        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Users/index.php -----

FILE: plugins/AdminTheme/templates/Admin/Users/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2850 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\User $user
 */
?>
<?php use App\Utility\SettingsManager; ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'User',
        'controllerName' => 'Users',
        'entity' => $user,
        'entityDisplayName' => $user->username
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title"><?= h($user->username) ?></h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Email') ?></th>
                            <td><?= h($user->email) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Username') ?></th>
                            <td><?= h($user->username) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Image') ?></th>
                            <td>
                                <?php if (!empty($user->image)): ?>
                                    <div class="mb-3">
                                        <?= $this->element('image/icon', ['model' => $user, 'icon' => $user->teenyImageUrl, 'preview' => $user->extraLargeImageUrl]); ?>
                                    </div>
                                <?php endif; ?>
                            </td>
                        </tr>
                        <tr>
                            <th><?= __('Created') ?></th>
                            <td><?= h($user->created) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Modified') ?></th>
                            <td><?= h($user->modified) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Is Admin') ?></th>
                            <td><?= $user->is_admin ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-warning">' . __('No') . '</span>'; ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Active') ?></th>
                            <td><?= $user->active ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-danger">' . __('No') . '</span>'; ?></td>
                        </tr>
                    </table>

                    <?= $this->element('related/articles', ['articles' => $user->articles, 'hideColumns' => ['User']]) ?>

                    <?= $this->element('related/comments', ['comments' => $user->comments, 'model' => $user, 'hideColumns' => ['User']]) ?>

                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Users/view.php -----

FILE: plugins/AdminTheme/templates/Admin/Users/edit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6824 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\User $user
 */
?>
<?php use App\Utility\SettingsManager; ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'User',
        'controllerName' => 'Users',
        'entity' => $user,
        'entityDisplayName' => $user->username
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Edit User') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($user,
                    [
                        'type' => 'file',
                        'enctype' => 'multipart/form-data',
                        'class' => 'needs-validation', 'novalidate' => true
                    ]) ?>
                    <fieldset>

                        <div class="mb-3">
                            <?php echo $this->Form->control('email', ['class' => 'form-control' . ($this->Form->isFieldError('email') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('email')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('email') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php echo $this->Form->control('username', ['class' => 'form-control' . ($this->Form->isFieldError('username') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('username')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('username') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php echo $this->Form->control('password', [
                                'value' => '',
                                'class' => 'form-control' . ($this->Form->isFieldError('password') ? ' is-invalid' : '')
                                ]); ?>
                            <?php if ($this->Form->isFieldError('password')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('password') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php echo $this->Form->control('confirm_password', [
                                'value' => '',
                                'type' => 'password',
                                'class' => 'form-control' . ($this->Form->isFieldError('confirm_password') ? ' is-invalid' : '')
                                ]); ?>
                            <?php if ($this->Form->isFieldError('confirm_password')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('confirm_password') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <?php if (!empty($user->image)): ?>
                            <div class="mb-3">
                                <?= $this->element('image/icon', ['model' => $user, 'icon' => $user->teenyImageUrl, 'preview' => $user->extraLargeImageUrl]); ?>
                            </div>
                        <?php endif; ?>

                        <div class="mb-3">
                            <?= $this->Form->control('image', [
                                'type' => 'file',
                                'label' => [
                                    'text' => __('Image'),
                                    'class' => 'form-label'
                                ],
                                'class' => 'form-control' . ($this->Form->isFieldError('image') ? ' is-invalid' : ''),
                                'id' => 'customFile'
                            ]) ?>
                            <?php if ($this->Form->isFieldError('image')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('image') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <?php echo $this->Form->checkbox('is_admin', [
                                    'class' => 'form-check-input' . ($this->Form->isFieldError('is_admin') ? ' is-invalid' : '')
                                ]); ?>
                                <label class="form-check-label" for="is-admin">
                                    <?= __('Admin') ?>
                                </label>
                                <?php if ($this->Form->isFieldError('is_admin')): ?>
                                    <div class="invalid-feedback">
                                        <?= $this->Form->error('is_admin') ?>
                                    </div>
                                <?php endif; ?>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <?php echo $this->Form->checkbox('active', [
                                    'checked' => true,
                                    'class' => 'form-check-input' . ($this->Form->isFieldError('active') ? ' is-invalid' : '')
                                ]); ?>
                                <label class="form-check-label" for="active">
                                    <?= __('Active') ?>
                                </label>
                                <?php if ($this->Form->isFieldError('active')): ?>
                                    <div class="invalid-feedback">
                                        <?= $this->Form->error('active') ?>
                                    </div>
                                <?php endif; ?>
                            </div>
                        </div>

                        </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Users/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/Users/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2804 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\User> $users
 */
?>
<?php use App\Utility\SettingsManager; ?>
<?php $activeFilter = $this->request->getQuery('status'); ?>
<table class="table table-striped">
    <thead>
      <tr>
            <th><?= __('Image') ?></th>
            <th scope="col"><?= $this->Paginator->sort('email') ?></th>
            <th scope="col"><?= $this->Paginator->sort('is_admin', __('Admin')) ?></th>
            <th scope="col"><?= $this->Paginator->sort('active', __('Active')) ?></th>
            <th scope="col"><?= __('Actions') ?></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($users as $user): ?>
      <tr>
          <td>
            <?php if (!empty($user->image)) : ?>
            <div class="position-relative">
                <?= $this->element('image/icon', ['model' => $user, 'icon' => $user->tennyImageUrl, 'preview' => $user->largeImageUrl]); ?>
            </div>
            <?php endif; ?>
          </td>
          <td><?= $this->Html->link(h($user->email), 'mailto:' . h($user->email)) ?></td>
          <td>
            <?= $user->is_admin ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-warning">' . __('No') . '</span>'; ?>
          </td>
          <td>
            <?= $user->active ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-warning">' . __('No') . '</span>'; ?>
          </td>
          <td>
              <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                  <div class="dropdown">
                  <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <?= __('Actions') ?>
                  </button>
                  <ul class="dropdown-menu">
                      <li>
                          <?= $this->Html->link(__('View'), ['action' => 'view', $user->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li>
                          <?= $this->Html->link(__('Edit'), ['action' => 'edit', $user->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li><hr class="dropdown-divider"></li>
                      <li>
                          <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $user->id], ['confirm' => __('Are you sure you want to delete {0}?', $user->email), 'class' => 'dropdown-item text-danger']) ?>
                      </li>
                  </ul>
                  </div>
              </div>
          </td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
<?= $this->element('pagination', ['recordCount' => count($users), 'search' => $search ?? '']) ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Users/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Cache/clear_all.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4814 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var array $cacheInfo
 */

function sanitizeId($name) {
    return preg_replace('/[^a-z0-9]/i', '_', $name);
}

function formatDateTime(?DateTime $dateTime): string {
    if ($dateTime === null) {
        return __('Never');
    }
    return $dateTime->format('Y-m-d H:i:s');
}
?>
<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Cache') ?></h5>
                </div>

                <div class="card-body">
                    <p><?= __('Below is information about the configured caches. Click the button to clear all caches or individual cache buttons to clear specific caches.') ?></p>

                    <?= $this->Form->create(null, ['url' => ['action' => 'clearAll'], 'class' => 'mb-4']) ?>
                        <?= $this->Form->button(__('Clear All Cache'), ['class' => 'btn btn-danger']) ?>
                    <?= $this->Form->end() ?>

                    <h4 class="mb-3"><?= __('Configured Caches') ?></h4>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th><?= __('Cache Name') ?></th>
                                <th><?= __('Last Cleared') ?></th>
                                <th><?= __('Actions') ?></th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($cacheInfo as $name => $info): ?>
                                <tr>
                                    <td><?= h($name) ?></td>
                                    <td><?= formatDateTime($info['last_cleared']) ?></td>
                                    <td>
                                        <button class="btn btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#details-<?= sanitizeId($name) ?>" aria-expanded="false" aria-controls="details-<?= sanitizeId($name) ?>">
                                            <?= __('Info') ?>
                                        </button>

                                        <?= $this->Form->postLink(
                                            __('Clear'),
                                            ['action' => 'clear', urlencode($name)],
                                            ['class' => 'btn btn-sm btn-warning', 'confirm' => __('Are you sure you want to clear {0}?', $name)]
                                        ) ?>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="5" class="p-0">
                                        <div class="collapse" id="details-<?= sanitizeId($name) ?>">
                                            <div class="card card-body">
                                                <h6><?= __('Settings') ?></h6>
                                                <ul class="list-unstyled">
                                                    <?php foreach ($info['settings'] as $key => $value): ?>
                                                        <li>
                                                            <strong><?= h($key) ?>:</strong> 
                                                            <?php
                                                            if (is_array($value)) {
                                                                echo empty($value) ? '[]' : h(json_encode($value, JSON_PRETTY_PRINT));
                                                            } elseif (is_null($value)) {
                                                                echo 'null';
                                                            } elseif (is_bool($value)) {
                                                                echo $value ? 'true' : 'false';
                                                            } else {
                                                                echo h($value);
                                                            }
                                                            ?>
                                                        </li>
                                                    <?php endforeach; ?>
                                                </ul>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Cache/clear_all.php -----

FILE: plugins/AdminTheme/templates/Admin/Internationalisations/add.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3054 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Internationalisation $internationalisation
 */
?>
<?php if (!$internationalisation->isNew()): ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Internationalisation',
        'controllerName' => 'Internationalisations',
        'entity' => $internationalisation,
        'entityDisplayName' => $internationalisation->message_id
    ]);
?>
<?php endif; ?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Add Internationalisation') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($internationalisation, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>
                        <div class="mb-3">
                            <?php echo $this->Form->control('locale', ['class' => 'form-control' . ($this->Form->isFieldError('locale') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('locale')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('locale') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?php echo $this->Form->control('message_id', ['class' => 'form-control' . ($this->Form->isFieldError('message_id') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('message_id')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('message_id') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?php echo $this->Form->control('message_str', ['class' => 'form-control' . ($this->Form->isFieldError('message_str') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('message_str')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('message_str') ?>
                                </div>
                            <?php endif; ?>
                        </div>                                                             
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Internationalisations/add.php -----

FILE: plugins/AdminTheme/templates/Admin/Internationalisations/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6007 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Internationalisation> $internationalisations
 */
?>
<?php use App\Utility\I18nManager; ?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center internationalisations">
      <div class="d-flex align-items-center me-auto">
        <ul class="navbar-nav me-3">
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false"><?= __('Filter') ?></a>
            <ul class="dropdown-menu">
              <?php $activeFilter = $this->request->getQuery('locale');  ?>
              <li>
                <?= $this->Html->link(
                    __('All'), 
                    ['action' => 'index'], 
                    [
                      'class' => 'dropdown-item' . (null === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <?php foreach ($locales as $locale) : ?>
                <li>
                  <?= $this->Html->link(
                      $locale, 
                      ['action' => 'index', '?' => ['locale' => $locale]],
                      [
                        'class' => 'dropdown-item' . ($locale === $activeFilter ? ' active' : '')
                      ]
                  ) ?>
                </li>
              <?php endforeach; ?>
            </ul>
          </li>
        </ul>
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="internationalisationSearch" type="search" class="form-control" placeholder="<?= __('Search Internationalisations...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
        </form>
      </div>
      <div class="flex-shrink-0">
        <?= $this->Html->link(__('New Internationalisation'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
      </div>
    </div>
</header>
<div id="ajax-target">
  <table class="table table-striped">
    <thead>
      <tr>
            <th scope="col"><?= $this->Paginator->sort('locale') ?></th>
            <th scope="col"><?= $this->Paginator->sort('message_id') ?></th>
            <th scope="col"><?= $this->Paginator->sort('message_str') ?></th>
            <th scope="col"><?= __('Actions') ?></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($internationalisations as $internationalisation): ?>
      <tr>
                      <td><?= h($internationalisation->locale) ?></td>
                      <td><?= h($internationalisation->message_id) ?></td>
                      <td><?= h($internationalisation->message_str) ?></td>
                  <td>
              <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                  <div class="dropdown">
                  <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <?= __('Actions') ?>
                  </button>
                  <ul class="dropdown-menu">
                      <li>
                          <?= $this->Html->link(__('View'), ['action' => 'view', $internationalisation->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li>
                          <?= $this->Html->link(__('Edit'), ['action' => 'edit', $internationalisation->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li><hr class="dropdown-divider"></li>
                      <li>
                          <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $internationalisation->id], ['confirm' => __('Are you sure you want to delete {0}?', $internationalisation->message_id), 'class' => 'dropdown-item text-danger']) ?>
                      </li>
                  </ul>
                  </div>
              </div>
          </td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
  <?= $this->element('pagination', ['recordCount' => count($internationalisations), 'search' => $search ?? '']) ?>
</div>
<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('internationalisationSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            <?php if (null !== $activeFilter): ?>
            url += `?locale=<?= urlencode($activeFilter) ?>`;
            <?php endif; ?>

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                // Re-initialize popovers after updating the content
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            })
            .catch(error => console.error('Error:', error));
        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Internationalisations/index.php -----

FILE: plugins/AdminTheme/templates/Admin/Internationalisations/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2091 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Internationalisation $internationalisation
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Internationalisation',
        'controllerName' => 'Internationalisations',
        'entity' => $internationalisation,
        'entityDisplayName' => $internationalisation->message_id
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title"><?= h($internationalisation->message_id) ?></h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Locale') ?></th>
                            <td><?= h($internationalisation->locale) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Created At') ?></th>
                            <td><?= h($internationalisation->created) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Updated At') ?></th>
                            <td><?= h($internationalisation->modified) ?></td>
                        </tr>
                    </table>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Message Id') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($internationalisation->message_id)); ?></p>
                        </div>
                    </div>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Message Str') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($internationalisation->message_str)); ?></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Internationalisations/view.php -----

FILE: plugins/AdminTheme/templates/Admin/Internationalisations/edit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2939 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Internationalisation $internationalisation
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Internationalisation',
        'controllerName' => 'Internationalisations',
        'entity' => $internationalisation,
        'entityDisplayName' => $internationalisation->message_id
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Edit Internationalisation') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($internationalisation, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>
                        <div class="mb-3">
                            <?php echo $this->Form->control('locale', ['class' => 'form-control' . ($this->Form->isFieldError('locale') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('locale')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('locale') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?php echo $this->Form->control('message_id', ['class' => 'form-control' . ($this->Form->isFieldError('message_id') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('message_id')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('message_id') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?php echo $this->Form->control('message_str', ['class' => 'form-control' . ($this->Form->isFieldError('message_str') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('message_str')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('message_str') ?>
                                </div>
                            <?php endif; ?>
                        </div>                                                                    
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Internationalisations/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/Internationalisations/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2313 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Internationalisation> $internationalisations
 */
?>
<?php $activeFilter = $this->request->getQuery('status'); ?>
<table class="table table-striped">
    <thead>
      <tr>
            <th scope="col"><?= $this->Paginator->sort('locale') ?></th>
            <th scope="col"><?= $this->Paginator->sort('message_id') ?></th>
            <th scope="col"><?= $this->Paginator->sort('message_str') ?></th>
            <th scope="col"><?= __('Actions') ?></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($internationalisations as $internationalisation): ?>
      <tr>
                      <td><?= h($internationalisation->locale) ?></td>
                      <td><?= h($internationalisation->message_id) ?></td>
                      <td><?= h($internationalisation->message_str) ?></td>
                  <td>
              <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                  <div class="dropdown">
                  <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <?= __('Actions') ?>
                  </button>
                  <ul class="dropdown-menu">
                      <li>
                          <?= $this->Html->link(__('View'), ['action' => 'view', $internationalisation->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li>
                          <?= $this->Html->link(__('Edit'), ['action' => 'edit', $internationalisation->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li><hr class="dropdown-divider"></li>
                      <li>
                          <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $internationalisation->id], ['confirm' => __('Are you sure you want to delete {0}?', $internationalisation->message_id), 'class' => 'dropdown-item text-danger']) ?>
                      </li>
                  </ul>
                  </div>
              </div>
          </td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
  <?= $this->element('pagination', ['recordCount' => count($internationalisations), 'search' => $search ?? '']) ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Internationalisations/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Slugs/add.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3393 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Slug $slug
 */
?>
<?php if (!$slug->isNew()): ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Slug',
        'controllerName' => 'Slugs',
        'entity' => $slug,
        'entityDisplayName' => $slug->slug
    ]);
?>
<?php endif; ?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Add Slug') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($slug, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>
                    <div class="mb-3">
                            <?php echo $this->Form->control('model', ['class' => 'form-control' . ($this->Form->isFieldError('model') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('model')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('model') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('foreign_key', ['class' => 'form-control' . ($this->Form->isFieldError('foreign_key') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('foreign_key')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('foreign_key') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('slug', ['class' => 'form-control' . ($this->Form->isFieldError('slug') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('slug')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('slug') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php if ($this->Form->isFieldError('created')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('created') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                                                                                    
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Slugs/add.php -----

FILE: plugins/AdminTheme/templates/Admin/Slugs/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 8357 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Slug> $slugs
 * @var array $relatedData
 * @var array $modelTypes
 */
?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center slugs">
      <div class="d-flex align-items-center me-auto">
        <ul class="navbar-nav me-3">
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false"><?= __('Filter') ?></a>
            <ul class="dropdown-menu">
              <?php $activeFilter = $this->request->getQuery('status');  ?>
              <li>
                <?= $this->Html->link(
                    __('All'), 
                    ['action' => 'index'], 
                    [
                      'class' => 'dropdown-item' . (null === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <?php foreach($modelTypes as $count => $modelType) : ?>
              <li>
                <?= $this->Html->link(
                    $modelType, 
                    ['action' => 'index', '?' => ['status' => $modelType]],
                    [
                      'class' => 'dropdown-item' . ($modelType === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <?php endforeach; ?>
            </ul>
          </li>
        </ul>
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="slugSearch" type="search" class="form-control" placeholder="<?= __('Search Slugs...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
        </form>
      </div>
      <div class="flex-shrink-0">
        <?= $this->Html->link(__('New Slug'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
      </div>
    </div>
</header>
<div id="ajax-target">
  <table class="table table-striped">
    <thead>
      <tr>
              <th scope="col"><?= $this->Paginator->sort('model') ?></th>
              <th scope="col"><?= $this->Paginator->sort('foreign_key', __('Title')) ?></th>
              <th scope="col"><?= $this->Paginator->sort('slug') ?></th>
              <th scope="col"><?= $this->Paginator->sort('created') ?></th>
              <th scope="col"><?= __('Actions') ?></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($slugs as $slug): ?>
      <tr>
        <td>
            <?php
            if (isset($relatedData[$slug->id]['kind'])) {
                echo h(ucfirst($relatedData[$slug->id]['kind']));
            } else {
                echo h(str_replace('s', '', $slug->model));
            }
            ?>
        </td>
          <td>
              <?php if (isset($relatedData[$slug->id])): ?>
                  <?= $this->Html->link(
                      h($relatedData[$slug->id]['title']),
                      [
                          'controller' => $relatedData[$slug->id]['controller'],
                          'action' => 'view',
                          $relatedData[$slug->id]['id']
                      ],
                      [
                          'class' => 'text-decoration-none',
                          'escape' => false
                      ]
                  ) ?>
                  <?php if ($slug->model === 'Articles' && isset($relatedData[$slug->id]['is_published']) && !$relatedData[$slug->id]['is_published']): ?>
                      <span class="badge bg-warning ms-2"><?= __('Not Published') ?></span>
                  <?php endif; ?>
              <?php else: ?>
                  <?= h($slug->foreign_key) ?>
              <?php endif; ?>
          </td>
          <td>
              <?php
              if (isset($relatedData[$slug->id])) {
                  $routeName = match ($slug->model) {
                      'Articles' => (isset($relatedData[$slug->id]['kind']) && $relatedData[$slug->id]['kind'] === 'page') ? 'page-by-slug' : 'article-by-slug',
                      'Tags' => 'tag-by-slug',
                      default => null,
                  };

                  // Only create link if it's a Tag or a published Article
                  $showLink = $slug->model === 'Tags' || 
                      ($slug->model === 'Articles' && isset($relatedData[$slug->id]['is_published']) && $relatedData[$slug->id]['is_published']);

                  if ($routeName && $showLink) {
                      echo $this->Html->link(
                          h($slug->slug),
                          [
                              '_name' => $routeName,
                              'slug' => $slug->slug,
                          ],
                          [
                              'class' => 'text-decoration-none',
                              'target' => '_blank'
                          ]
                      );
                  } else {
                      echo h($slug->slug);
                  }
              } else {
                  echo h($slug->slug);
              }
              ?>
          </td>
          <td><?= h($slug->created) ?></td>
          <td>
              <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                  <div class="dropdown">
                  <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <?= __('Actions') ?>
                  </button>
                  <ul class="dropdown-menu">
                      <li>
                          <?= $this->Html->link(__('View'), ['action' => 'view', $slug->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li>
                          <?= $this->Html->link(__('Edit'), ['action' => 'edit', $slug->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li><hr class="dropdown-divider"></li>
                      <li>
                          <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $slug->id], ['confirm' => __('Are you sure you want to delete # {0}?', $slug->id), 'class' => 'dropdown-item text-danger']) ?>
                      </li>
                  </ul>
                  </div>
              </div>
          </td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
  <?= $this->element('pagination', ['recordCount' => count($slugs), 'search' => $search ?? '']) ?>
</div>

<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('slugSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            <?php if (null !== $activeFilter): ?>
            url += `?status=<?= urlencode($activeFilter) ?>`;
            <?php endif; ?>

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                // Re-initialize popovers after updating the content
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            })
            .catch(error => console.error('Error:', error));

        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Slugs/index.php -----

FILE: plugins/AdminTheme/templates/Admin/Slugs/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 7153 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Slug $slug
 * @var array|null $relatedRecord
 * @var array|null $relatedSlugs
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Slug',
        'controllerName' => 'Slugs',
        'entity' => $slug,
        'entityDisplayName' => $slug->slug
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title">
                        <?php
                        if ($relatedRecord) {
                            $routeName = match ($slug->model) {
                                'Articles' => $relatedRecord->kind === 'page' ? 'page-by-slug' : 'article-by-slug',
                                'Tags' => 'tag-by-slug',
                                default => null,
                            };

                            // Only create link if it's a Tag or a published Article
                            $showLink = $slug->model === 'Tags' || 
                                ($slug->model === 'Articles' && $relatedRecord->is_published);

                            if ($routeName && $showLink) {
                                echo $this->Html->link(
                                    h($slug->slug),
                                    [
                                        '_name' => $routeName,
                                        'slug' => $slug->slug,
                                    ],
                                    [
                                        'class' => 'text-decoration-none',
                                        'target' => '_blank'
                                    ]
                                );
                            } else {
                                echo h($slug->slug);
                            }
                        } else {
                            echo h($slug->slug);
                        }
                        ?>
                    </h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Model') ?></th>
                            <td>
                                <?php
                                if ($relatedRecord && $slug->model === 'Articles') {
                                    echo h(ucfirst($relatedRecord->kind));
                                } else {
                                    echo h(str_replace('s', '', $slug->model));
                                }
                                ?>
                            </td>
                        </tr>
                        <tr>
                            <th><?= __('Related Content') ?></th>
                            <td>
                                <?php if ($relatedRecord): ?>
                                    <?= $this->Html->link(
                                        h($relatedRecord->title),
                                        [
                                            'controller' => $slug->model,
                                            'action' => 'view',
                                            $relatedRecord->id
                                        ],
                                        [
                                            'class' => 'text-decoration-none',
                                            'escape' => false
                                        ]
                                    ) ?>
                                    <?php if ($slug->model === 'Articles' && !$relatedRecord->is_published): ?>
                                        <span class="badge bg-warning ms-2"><?= __('Not Published') ?></span>
                                    <?php endif; ?>
                                <?php else: ?>
                                    <?= h($slug->foreign_key) ?>
                                <?php endif; ?>
                            </td>
                        </tr>
                        <tr>
                            <th><?= __('Created') ?></th>
                            <td><?= h($slug->created) ?></td>
                        </tr>
                        <?php if ($relatedRecord): ?>
                        <tr>
                            <th><?= __('Preview') ?></th>
                            <td>
                                <?php
                                $routeName = match ($slug->model) {
                                    'Articles' => $relatedRecord->kind === 'page' ? 'page-by-slug' : 'article-by-slug',
                                    'Tags' => 'tag-by-slug',
                                    default => null,
                                };

                                // Only show preview button if it's a Tag or a published Article
                                $showPreview = $slug->model === 'Tags' || 
                                    ($slug->model === 'Articles' && $relatedRecord->is_published);

                                if ($routeName && $showPreview) {
                                    echo $this->Html->link(
                                        __('View on site'),
                                        [
                                            '_name' => $routeName,
                                            'slug' => $slug->slug,
                                        ],
                                        [
                                            'class' => 'btn btn-sm btn-outline-primary',
                                            'target' => '_blank'
                                        ]
                                    );
                                } elseif ($slug->model === 'Articles') {
                                    echo '<span class="text-muted">' . __('Not available until published') . '</span>';
                                }
                                ?>
                            </td>
                        </tr>
                        <?php endif; ?>
                        <?php if (!empty($relatedSlugs)): ?>
                        <tr>
                            <th><?= __('Other Slugs') ?></th>
                            <td>
                                <ul class="list-unstyled mb-0">
                                    <?php foreach ($relatedSlugs as $relatedSlug): ?>
                                        <li>
                                            <?= h($relatedSlug->slug) ?>
                                            <small class="text-muted">
                                                (<?= $relatedSlug->created->format('Y-m-d H:i:s') ?>)
                                            </small>
                                        </li>
                                    <?php endforeach; ?>
                                </ul>
                            </td>
                        </tr>
                        <?php endif; ?>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Slugs/view.php -----

FILE: plugins/AdminTheme/templates/Admin/Slugs/edit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2955 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Slug $slug
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Slug',
        'controllerName' => 'Slugs',
        'entity' => $slug,
        'entityDisplayName' => $slug->slug
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Edit Slug') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($slug, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>
                        <div class="mb-3">
                            <?php 
                            echo $this->Form->control('foreign_key', [
                                'class' => 'form-control' . ($this->Form->isFieldError('foreign_key') ? ' is-invalid' : ''),
                                'type' => 'select',
                                'options' => $relatedRecords,
                                'label' => __('Related {0}', $slug->model),
                                'empty' => __('-- Select {0} --', $slug->model),
                            ]); ?>
                            <?php if ($this->Form->isFieldError('foreign_key')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('foreign_key') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?php echo $this->Form->control('slug', ['class' => 'form-control' . ($this->Form->isFieldError('slug') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('slug')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('slug') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?php if ($this->Form->isFieldError('created')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('created') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                                                                                    
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Slugs/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/Slugs/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2855 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Slug> $slugs
 */
?>
<?php $activeFilter = $this->request->getQuery('status'); ?>
  <table class="table table-striped">
    <thead>
      <tr>
              <th scope="col"><?= $this->Paginator->sort('model') ?></th>
              <th scope="col"><?= $this->Paginator->sort('foreign_key', __('Title')) ?></th>
              <th scope="col"><?= $this->Paginator->sort('slug') ?></th>
              <th scope="col"><?= $this->Paginator->sort('created') ?></th>
              <th scope="col"><?= __('Actions') ?></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($slugs as $slug): ?>
      <tr>
          <td><?= h($slug->model) ?></td>
          <td>
              <?php if (isset($relatedData[$slug->id])): ?>
                  <?= $this->Html->link(
                      h($relatedData[$slug->id]['title']),
                      [
                          'controller' => $relatedData[$slug->id]['controller'],
                          'action' => 'view',
                          $relatedData[$slug->id]['id']
                      ],
                      [
                          'class' => 'text-decoration-none',
                          'escape' => false
                      ]
                  ) ?>
              <?php else: ?>
                  <?= h($slug->foreign_key) ?>
              <?php endif; ?>
          </td>
          <td><?= h($slug->slug) ?></td>
          <td><?= h($slug->created) ?></td>
          <td>
              <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                  <div class="dropdown">
                  <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <?= __('Actions') ?>
                  </button>
                  <ul class="dropdown-menu">
                      <li>
                          <?= $this->Html->link(__('View'), ['action' => 'view', $slug->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li>
                          <?= $this->Html->link(__('Edit'), ['action' => 'edit', $slug->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li><hr class="dropdown-divider"></li>
                      <li>
                          <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $slug->id], ['confirm' => __('Are you sure you want to delete # {0}?', $slug->id), 'class' => 'dropdown-item text-danger']) ?>
                      </li>
                  </ul>
                  </div>
              </div>
          </td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
<?= $this->element('pagination', ['recordCount' => count($slugs), 'search' => $search ?? '']) ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Slugs/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/SystemLogs/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6968 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\SystemLog> $systemLogs
 * @var array $levels
 * @var array $groupNames
 * @var string|null $selectedLevel
 * @var string|null $selectedGroup
 */
?>
<div class="systemLogs index content">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="mb-0"><?= __('System Logs') ?></h3>
    </div>
    <div class="mb-3">
        <input type="text" id="logSearch" class="form-control" placeholder="<?= __('Search logs...') ?>">
    </div>
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="btn-group" role="group" aria-label="Level filters">
                <?= $this->Html->link(__('All Levels'), ['action' => 'index'], ['class' => 'btn btn-outline-secondary' . (!$selectedLevel ? ' active' : '')]) ?>
                <?php foreach ($levels as $level): ?>
                    <?= $this->Html->link(
                        h($level),
                        ['action' => 'index', '?' => ['level' => $level] + ($selectedGroup ? ['group' => $selectedGroup] : [])],
                        ['class' => 'btn btn-outline-secondary' . ($selectedLevel === $level ? ' active' : '')]
                    ) ?>
                <?php endforeach; ?>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <?php if (count($systemLogs) > 0): ?>
                <?= $this->Form->postLink(__('Delete All Logs'), ['action' => 'delete', 'all'], ['confirm' => __('Are you sure you want to delete all logs?'), 'class' => 'btn btn-danger']) ?>
                <?php if ($selectedLevel): ?>
                    <?= $this->Form->postLink(__('Delete {0}', h($selectedLevel)), ['action' => 'delete', 'level', $selectedLevel], ['confirm' => __('Are you sure you want to delete all {0} logs?', $selectedLevel), 'class' => 'btn btn-outline-danger']) ?>
                <?php endif; ?>
            <?php endif; ?>
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-6">
            <div class="d-flex flex-wrap gap-2" role="group" aria-label="Group filters">
                <?= $this->Html->link(__('All Groups'), ['action' => 'index'], ['class' => 'btn btn-outline-secondary' . (!$selectedGroup ? ' active' : '')]) ?>
                <?php foreach ($groupNames as $group): ?>
                    <?= $this->Html->link(
                        h($group),
                        ['action' => 'index', '?' => ['group' => $group] + ($selectedLevel ? ['level' => $selectedLevel] : [])],
                        ['class' => 'btn btn-outline-secondary' . ($selectedGroup === $group ? ' active' : '')]
                    ) ?>
                <?php endforeach; ?>
            </div>
        </div>
        <div class="col-md-6 text-end">
            <?php if (count($systemLogs) > 0 && $selectedGroup): ?>
                <?= $this->Form->postLink(__('Delete {0}', h($selectedGroup)), ['action' => 'delete', 'group', $selectedGroup], ['confirm' => __('Are you sure you want to delete all logs in group {0}?', $selectedGroup), 'class' => 'btn btn-outline-danger']) ?>
            <?php endif; ?>
        </div>
    </div>
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th><?= __('Level') ?></th>
                    <th><?= __('Group Name') ?></th>
                    <th><?= __('Message') ?></th>
                    <th><?= __('Created') ?></th>
                    <th class="actions"><?= __('Actions') ?></th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($systemLogs as $systemLog): ?>
                <tr>
                    <td><?= h($systemLog->level) ?></td>
                    <td><?= h($systemLog->group_name) ?></td>
                    <td>
                        <?php
                        $truncatedMessage = substr($systemLog->message, 0, 50) . '...';
                        $fullMessage = h($systemLog->message);
                        $prettyMessage = $this->element('pretty_message', ['message' => $fullMessage]);
                        ?>
                        <span tabindex="0" class="d-inline-block" data-bs-toggle="popover" data-bs-trigger="focus" title="Full Message" data-bs-content="<?= $prettyMessage ?>" data-bs-html="true">
                            <?= h($truncatedMessage) ?>
                        </span>
                    </td>
                    <td><?= h($systemLog->created->format('Y-m-d H:i')) ?></td>
                    <td class="actions">
                        <?= $this->Html->link(__('View'), ['action' => 'view', $systemLog->id], ['class' => 'btn btn-sm btn-outline-primary']) ?>
                        <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $systemLog->id], ['confirm' => __('Are you sure you want to delete # {0}?', $systemLog->id), 'class' => 'btn btn-sm btn-outline-danger']) ?>
                    </td>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
    <?= $this->element('pagination') ?>
</div>

<script>
   document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('logSearch');
    const resultsContainer = document.querySelector('tbody');
    const currentUrl = new URL(window.location.href);

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            // Update the URL with the search term
            if (searchTerm) {
                currentUrl.searchParams.set('search', searchTerm);
            } else {
                currentUrl.searchParams.delete('search');
            }

            // Preserve existing level and group filters
            const level = currentUrl.searchParams.get('level');
            const group = currentUrl.searchParams.get('group');
            if (level) currentUrl.searchParams.set('level', level);
            if (group) currentUrl.searchParams.set('group', group);

            fetch(currentUrl.toString(), {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                initPopovers();
            })
            .catch(error => console.error('Error:', error));
        }, 300);
    });

    initPopovers();
});

function initPopovers() {
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl, {
            container: 'body'
        })
    })
}
</script>

// ----- END FILE: plugins/AdminTheme/templates/Admin/SystemLogs/index.php -----

FILE: plugins/AdminTheme/templates/Admin/SystemLogs/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2841 bytes
CONTENT:
<?php
    echo $this->element('actions_card', [
        'modelName' => 'SystemLog',
        'controllerName' => 'SystemLogs',
        'entity' => $systemLog,
        'entityDisplayName' => $systemLog->group_name . ':' . $systemLog->level . ':' . $systemLog->created->format('Y-m-d H:i:s'),
        'hideNew' => true,
        'hideEdit' => true,
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-<?= strtolower($systemLog->level) ?>">
                    <h3 class="card-title text-white mb-0"><?= h($systemLog->level) ?></h3>
                </div>
                <div class="card-body">
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Level') ?></th>
                            <td><span class="badge bg-<?= strtolower($systemLog->level) ?>"><?= h($systemLog->level) ?></span></td>
                        </tr>
                        <tr>
                            <th><?= __('Group Name') ?></th>
                            <td><?= h($systemLog->group_name) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Created') ?></th>
                            <td><?= $systemLog->created->format('Y-m-d H:i:s') ?></td>
                        </tr>
                    </table>
                    <div class="mt-4">
                        <h5><?= __('Message') ?></h5>
                        <div class="p-3 rounded">
                            <?php
                            $lines = explode("\n", h($systemLog->message));
                            foreach ($lines as $line) {
                                if (strpos($line, 'Stack Trace') !== false) {
                                    echo "<strong class='text-danger'>$line</strong><br>";
                                } elseif (preg_match('/^#\d+/', $line)) {
                                    echo "<code class='text-muted'>$line</code><br>";
                                } else {
                                    echo "$line<br>";
                                }
                            }
                            ?>
                        </div>
                    </div>
                    <?php if (!empty($systemLog->context)): ?>
                    <div class="mt-4">
                    <div class="p-3 rounded">
                        <h5><?= __('Context') ?></h5>
                        <pre class="bg-light text-dark"><?= json_encode(json_decode($systemLog->context), JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) ?></pre>
                    </div>
                    </div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/SystemLogs/view.php -----

FILE: plugins/AdminTheme/templates/Admin/SystemLogs/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1200 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\SystemLog> $systemLogs
 */
?>
<?php foreach ($systemLogs as $systemLog): ?>
<tr>
    <td><?= h($systemLog->level) ?></td>
    <td><?= h($systemLog->group_name) ?></td>
    <td>
        <?php
        $truncatedMessage = substr($systemLog->message, 0, 50) . '...';
        $fullMessage = h($systemLog->message);
        $prettyMessage = $this->element('pretty_message', ['message' => $fullMessage]);
        ?>
        <span tabindex="0" class="d-inline-block" data-bs-toggle="popover" data-bs-trigger="focus" title="Full Message" data-bs-content="<?= $prettyMessage ?>" data-bs-html="true">
            <?= h($truncatedMessage) ?>
        </span>
    </td>
    <td><?= h($systemLog->created->format('Y-m-d H:i')) ?></td>
    <td class="actions">
        <?= $this->Html->link(__('View'), ['action' => 'view', $systemLog->id], ['class' => 'btn btn-sm btn-outline-primary']) ?>
        <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $systemLog->id], ['confirm' => __('Are you sure you want to delete # {0}?', $systemLog->id), 'class' => 'btn btn-sm btn-outline-danger']) ?>
    </td>
</tr>
<?php endforeach; ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/SystemLogs/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/add.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 5158 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\EmailTemplate $emailTemplate
 */
?>
<?php if (!$emailTemplate->isNew()): ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Email Template',
        'controllerName' => 'Email Templates',
        'entity' => $emailTemplate,
        'entityDisplayName' => $emailTemplate->name
    ]);
?>
<?php endif; ?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Add Email Template') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($emailTemplate, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>
                    <div class="mb-3">
                            <?php echo $this->Form->control('template_identifier', ['class' => 'form-control' . ($this->Form->isFieldError('template_identifier') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('template_identifier')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('template_identifier') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('name', ['class' => 'form-control' . ($this->Form->isFieldError('name') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('name')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('name') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('subject', ['class' => 'form-control' . ($this->Form->isFieldError('subject') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('subject')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('subject') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('body_html', ['class' => 'form-control' . ($this->Form->isFieldError('body_html') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('body_html')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('body_html') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('body_plain', ['class' => 'form-control' . ($this->Form->isFieldError('body_plain') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('body_plain')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('body_plain') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php if ($this->Form->isFieldError('created')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('created') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php if ($this->Form->isFieldError('modified')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('modified') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                                                                                    
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/add.php -----

FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4902 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\EmailTemplate> $emailTemplates
 */
?>
<?php use Cake\Core\Configure; ?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center emailTemplates">
      <div class="d-flex align-items-center me-auto">
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="emailTemplateSearch" type="search" class="form-control" placeholder="<?= __('Search Email Templates...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
        </form>
      </div>
      <div class="flex-shrink-0">
        <?php if (Configure::read('debug')) : ?>
        <?= $this->Html->link(__('New Email Template'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
        <?php endif ?>
        <?= $this->Html->link(__('Send Email'), ['action' => 'sendEmail'], ['class' => 'btn btn-primary']) ?>
      </div>
    </div>
</header>
<div id="ajax-target">
    <table class="table table-striped">
    <thead>
        <tr>
            <th scope="col"><?= $this->Paginator->sort('name') ?></th>
            <th scope="col"><?= $this->Paginator->sort('created') ?></th>
            <th scope="col"><?= $this->Paginator->sort('modified') ?></th>
            <th scope="col"><?= __('Actions') ?></th>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($emailTemplates as $emailTemplate): ?>
        <tr>
            <td><?= h($emailTemplate->name) ?></td>
            <td><?= h($emailTemplate->created) ?></td>
            <td><?= h($emailTemplate->modified) ?></td>
            <td>
                <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                    <div class="dropdown">
                    <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <?= __('Actions') ?>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <?= $this->Html->link(__('View'), ['action' => 'view', $emailTemplate->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li>
                            <?= $this->Html->link(__('Edit'), ['action' => 'edit', $emailTemplate->id], ['class' => 'dropdown-item']) ?>
                        </li>

                        <?php if (Configure::read('debug')) : ?>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $emailTemplate->id], ['confirm' => __('Are you sure you want to delete {0}?', $emailTemplate->name), 'class' => 'dropdown-item text-danger']) ?>
                        </li>
                        <?php endif; ?>
                    </ul>
                    </div>
                </div>
            </td>
        </tr>
        <?php endforeach; ?>
    </tbody>
    </table>
    <?= $this->element('pagination', ['recordCount' => count($emailTemplates), 'search' => $search ?? '']) ?>
</div>
<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('emailTemplateSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                // Re-initialize popovers after updating the content
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            })
            .catch(error => console.error('Error:', error));

        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/index.php -----

FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2434 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\EmailTemplate $emailTemplate
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Email Template',
        'controllerName' => 'Email Templates',
        'entity' => $emailTemplate,
        'entityDisplayName' => $emailTemplate->name,
        'debugOnlyOptions' => ['delete', 'add'],
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title"><?= h($emailTemplate->name) ?></h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Template Identifier') ?></th>
                            <td><?= h($emailTemplate->template_identifier) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Name') ?></th>
                            <td><?= h($emailTemplate->name) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Subject') ?></th>
                            <td><?= h($emailTemplate->subject) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Created') ?></th>
                            <td><?= h($emailTemplate->created) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Modified') ?></th>
                            <td><?= h($emailTemplate->modified) ?></td>
                        </tr>
                    </table>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Body Html') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($emailTemplate->body_html)); ?></p>
                        </div>
                    </div>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Body Plain') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($emailTemplate->body_plain)); ?></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/view.php -----

FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/edit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4792 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\EmailTemplate $emailTemplate
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Email Template',
        'controllerName' => 'Email Templates',
        'entity' => $emailTemplate,
        'entityDisplayName' => $emailTemplate->name,
        'debugOnlyOptions' => ['delete', 'add'],
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Edit Email Template') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($emailTemplate, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>

                        <div class="mb-3">
                            <?php echo $this->Form->control('template_identifier', ['class' => 'form-control' . ($this->Form->isFieldError('template_identifier') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('template_identifier')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('template_identifier') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php echo $this->Form->control('name', ['class' => 'form-control' . ($this->Form->isFieldError('name') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('name')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('name') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php echo $this->Form->control('subject', ['class' => 'form-control' . ($this->Form->isFieldError('subject') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('subject')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('subject') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php echo $this->Form->control('body_html', ['class' => 'form-control' . ($this->Form->isFieldError('body_html') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('body_html')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('body_html') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php echo $this->Form->control('body_plain', ['class' => 'form-control' . ($this->Form->isFieldError('body_plain') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('body_plain')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('body_plain') ?>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div class="mb-3">
                            <?php if ($this->Form->isFieldError('created')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('created') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        
                        <div class="mb-3">
                            <?php if ($this->Form->isFieldError('modified')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('modified') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                                                                                    
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/send_email.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1887 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\EmailTemplate $emailTemplate
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Email Template',
        'controllerName' => 'EmailTemplates',
        'debugOnlyOptions' => ['add']
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Send Email') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create(null, ['url' => ['action' => 'sendEmail']]) ?>
                    <fieldset>

                    <div class="mb-3">
                    <?= $this->Form->control('email_template_id', [
                        'options' => $emailTemplates,
                        'empty' => 'Select an email template',
                        'class' => 'form-control',
                        'label' => ['class' => 'mb-2', 'text' => 'Email Template']
                    ]) ?>
                    </div>

                    <div class="mb-3">
                    <?= $this->Form->control('user_id', [
                        'options' => $users,
                        'empty' => 'Select a user',
                        'class' => 'form-control',
                        'label' => ['class' => 'mb-2', 'text' => 'Recipient']
                    ]) ?>
                    </div>
                                                                         
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/send_email.php -----

FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2158 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\EmailTemplate> $emailTemplates
 */
?>
<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col"><?= $this->Paginator->sort('name') ?></th>
            <th scope="col"><?= $this->Paginator->sort('created') ?></th>
            <th scope="col"><?= $this->Paginator->sort('modified') ?></th>
            <th scope="col"><?= __('Actions') ?></th>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($emailTemplates as $emailTemplate): ?>
        <tr>
            <td><?= h($emailTemplate->name) ?></td>
            <td><?= h($emailTemplate->created) ?></td>
            <td><?= h($emailTemplate->modified) ?></td>
            <td>
                <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                    <div class="dropdown">
                    <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <?= __('Actions') ?>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <?= $this->Html->link(__('View'), ['action' => 'view', $emailTemplate->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li>
                            <?= $this->Html->link(__('Edit'), ['action' => 'edit', $emailTemplate->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $emailTemplate->id], ['confirm' => __('Are you sure you want to delete {0}?', $emailTemplate->name), 'class' => 'dropdown-item text-danger']) ?>
                        </li>
                    </ul>
                    </div>
                </div>
            </td>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>
<?= $this->element('pagination', ['recordCount' => count($emailTemplates), 'search' => $search ?? '']) ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/EmailTemplates/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Comments/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 7165 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Comment> $comments
 */
?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center comments">
      <div class="d-flex align-items-center me-auto">
        <ul class="navbar-nav me-3">
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false"><?= __('Filter') ?></a>
            <ul class="dropdown-menu">
              <?php $activeFilter = $this->request->getQuery('status');  ?>
              <li>
                <?= $this->Html->link(
                    __('All'), 
                    ['action' => 'index', 'id' => ''], 
                    [
                      'class' => 'dropdown-item' . (null === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Displayed'), 
                    ['action' => 'index', 'id' => '', '?' => ['status' => 1]], 
                    [
                      'class' => 'dropdown-item' . ('1' === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Not Displayed'), 
                    ['action' => 'index', 'id' => '', '?' => ['status' => 0]], 
                    [
                      'class' => 'dropdown-item' . ('0' === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
            </ul>
          </li>
        </ul>
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="commentSearch" type="search" class="form-control" placeholder="<?= __('Search Comments...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
        </form>
      </div>
    </div>
</header>
<div id="ajax-target">
  <table class="table table-striped">
    <thead>
      <tr>
            <th scope="col"><?= $this->Paginator->sort('model', __('On')) ?></th>
            <th scope="col"><?= $this->Paginator->sort('user_id') ?></th>
            <th scope="col"><?= $this->Paginator->sort('content') ?></th>
            <?php if (null === $activeFilter) :?>
            <th scope="col"><?= $this->Paginator->sort('display', __('Display')) ?></th>
            <?php endif; ?>
            <?php if ('0' === $activeFilter || '1' === $activeFilter) :?>
            <th scope="col"><?= $this->Paginator->sort('is_inappropriate', __('Flagged')) ?></th>
            <?php endif; ?>
            <th scope="col"><?= $this->Paginator->sort('created') ?></th>
            <th scope="col"><?= __('Actions') ?></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($comments as $comment): ?>
      <tr>
          <td><?= $comment->hasValue('article') ? $this->Html->link($comment->article->title, ['controller' => 'Articles', 'action' => 'view', $comment->article->id]) : '' ?></td>
          <td><?= $comment->hasValue('user') ? $this->Html->link($comment->user->username, ['controller' => 'Users', 'action' => 'view', $comment->user->id]) : '' ?></td>
          <td><?= substr(h($comment->content), 0, 30) . '...' ?></td>
          
          <?php if (null === $activeFilter) :?>
            <td>
              <?= $comment->display ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-warning">' . __('No') . '</span>'; ?>
            </td>
          <?php endif; ?>

          <?php if ('0' === $activeFilter || '1' === $activeFilter) :?>
            <td>
              <?= $comment->is_inappropriate ? '<span class="badge bg-warning">' . __('Yes') . '</span>' : '<span class="badge bg-success">' . __('No') . '</span>'; ?>
            </td>
          <?php endif; ?>

          <td><?= h($comment->created) ?></td>
          <td>
              <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                  <div class="dropdown">
                  <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <?= __('Actions') ?>
                  </button>
                  <ul class="dropdown-menu">
                      <li>
                          <?= $this->Html->link(__('View'), ['action' => 'view', $comment->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li>
                          <?= $this->Html->link(__('Edit'), ['action' => 'edit', $comment->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li><hr class="dropdown-divider"></li>
                      <li>
                          <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $comment->id], ['confirm' => __('Are you sure you want to delete # {0}?', $comment->id), 'class' => 'dropdown-item text-danger']) ?>
                      </li>
                  </ul>
                  </div>
              </div>
          </td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
  <?= $this->element('pagination', ['recordCount' => count($comments), 'search' => $search ?? '']) ?>
</div>
<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('commentSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            <?php if (null !== $activeFilter): ?>
            url += `?status=<?= urlencode($activeFilter) ?>`;
            <?php endif; ?>

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                // Re-initialize popovers after updating the content
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            })
            .catch(error => console.error('Error:', error));

        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Comments/index.php -----

FILE: plugins/AdminTheme/templates/Admin/Comments/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2698 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Comment $comment
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Comment',
        'controllerName' => 'Comments',
        'entity' => $comment,
        'entityDisplayName' => $comment->model
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title"><?= __('Comment') ?></h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Article') ?></th>
                            <td><?= $comment->hasValue('article') ? $this->Html->link($comment->article->title, ['controller' => 'Articles', 'action' => 'view', $comment->article->id], ['class' => 'btn btn-link']) : '' ?></td>
                        </tr>
                        <tr>
                            <th><?= __('User') ?></th>
                            <td><?= $comment->hasValue('user') ? $this->Html->link($comment->user->username, ['controller' => 'Users', 'action' => 'view', $comment->user->id], ['class' => 'btn btn-link']) : '' ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Inappropriate Reason') ?></th>
                            <td><?= h($comment->inappropriate_reason) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Created') ?></th>
                            <td><?= h($comment->created) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Display') ?></th>
                            <td><?= $comment->display ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-danger">' . __('No') . '</span>'; ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Is Inappropriate') ?></th>
                            <td><?= $comment->is_inappropriate ? '<span class="badge bg-danger">' . __('Yes') . '</span>' : '<span class="badge bg-success">' . __('No') . '</span>'; ?></td>
                        </tr>
                    </table>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Content') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($comment->content)); ?></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Comments/view.php -----

FILE: plugins/AdminTheme/templates/Admin/Comments/edit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3615 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Comment $comment
 * @var string[]|\Cake\Collection\CollectionInterface $users
 * @var string[]|\Cake\Collection\CollectionInterface $articles
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Comment',
        'controllerName' => 'Comments',
        'entity' => $comment,
        'entityDisplayName' => $comment->model
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Edit Comment') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($comment, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>

                        <div class="mb-3">
                            <?php echo $this->Form->control('content', ['class' => 'form-control' . ($this->Form->isFieldError('content') ? ' is-invalid' : '')]); ?>
                                <?php if ($this->Form->isFieldError('content')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('content') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        
                        <div class="mb-3">
                            <div class="form-check">
                                <?php echo $this->Form->checkbox('display', [
                                    'class' => 'form-check-input' . ($this->Form->isFieldError('display') ? ' is-invalid' : '')
                                ]); ?>
                                <label class="form-check-label" for="is-published">
                                    <?= __('Display') ?>
                                </label>
                                <?php if ($this->Form->isFieldError('display')): ?>
                                    <div class="invalid-feedback">
                                        <?= $this->Form->error('display') ?>
                                    </div>
                                <?php endif; ?>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <?php echo $this->Form->checkbox('is_inappropriate', [
                                    'class' => 'form-check-input' . ($this->Form->isFieldError('is_inappropriate') ? ' is-invalid' : '')
                                ]); ?>
                                <label class="form-check-label" for="is-published">
                                    <?= __('Inappropriate') ?>
                                </label>
                                <?php if ($this->Form->isFieldError('is_inappropriate')): ?>
                                    <div class="invalid-feedback">
                                        <?= $this->Form->error('is_inappropriate') ?>
                                    </div>
                                <?php endif; ?>
                            </div>
                        </div>

                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Comments/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/Comments/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3453 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Comment> $comments
 */
?>
<?php $activeFilter = $this->request->getQuery('status'); ?>
  <table class="table table-striped">
    <thead>
      <tr>
            <th scope="col"><?= $this->Paginator->sort('model', __('On')) ?></th>
            <th scope="col"><?= $this->Paginator->sort('user_id') ?></th>
            <th scope="col"><?= $this->Paginator->sort('content') ?></th>
            <?php if (null === $activeFilter) :?>
            <th scope="col"><?= $this->Paginator->sort('display', __('Display')) ?></th>
            <?php endif; ?>
            <?php if ('0' === $activeFilter || '1' === $activeFilter) :?>
            <th scope="col"><?= $this->Paginator->sort('is_inappropriate', __('Flagged')) ?></th>
            <?php endif; ?>
            <th scope="col"><?= $this->Paginator->sort('created') ?></th>
            <th scope="col"><?= __('Actions') ?></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($comments as $comment): ?>
      <tr>
          <td><?= $comment->hasValue('article') ? $this->Html->link($comment->article->title, ['controller' => 'Articles', 'action' => 'view', $comment->article->id]) : '' ?></td>
          <td><?= $comment->hasValue('user') ? $this->Html->link($comment->user->username, ['controller' => 'Users', 'action' => 'view', $comment->user->id]) : '' ?></td>
          <td><?= substr(h($comment->content), 0, 30) . '...' ?></td>
          
          <?php if (null === $activeFilter) :?>
            <td>
              <?= $comment->display ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-warning">' . __('No') . '</span>'; ?>
            </td>
          <?php endif; ?>

          <?php if ('0' === $activeFilter || '1' === $activeFilter) :?>
            <td>
              <?= $comment->is_inappropriate ? '<span class="badge bg-warning">' . __('Yes') . '</span>' : '<span class="badge bg-success">' . __('No') . '</span>'; ?>
            </td>
          <?php endif; ?>

          <td><?= h($comment->created) ?></td>
          <td>
              <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                  <div class="dropdown">
                  <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <?= __('Actions') ?>
                  </button>
                  <ul class="dropdown-menu">
                      <li>
                          <?= $this->Html->link(__('View'), ['action' => 'view', $comment->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li>
                          <?= $this->Html->link(__('Edit'), ['action' => 'edit', $comment->id], ['class' => 'dropdown-item']) ?>
                      </li>
                      <li><hr class="dropdown-divider"></li>
                      <li>
                          <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $comment->id], ['confirm' => __('Are you sure you want to delete # {0}?', $comment->id), 'class' => 'dropdown-item text-danger']) ?>
                      </li>
                  </ul>
                  </div>
              </div>
          </td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
<?= $this->element('pagination', ['recordCount' => count($comments), 'search' => $search ?? '']) ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Comments/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Articles/tree_index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4489 bytes
CONTENT:
<?php
$activeFilter = $this->request->getQuery('status');
if ($activeFilter === null) {
    $this->Html->script('https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js', ['block' => true]);
    $this->Html->script('articles_tree', ['block' => true]);
}
?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center pages">
      <div class="d-flex align-items-center me-auto">
        <ul class="navbar-nav me-3">
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false"><?= __('Status') ?></a>
            <ul class="dropdown-menu">
              <li>
                <?= $this->Html->link(
                    __('All'), 
                    ['action' => 'treeIndex', 'id' => ''], 
                    [
                      'class' => 'dropdown-item' . ($activeFilter === null ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Un-Published'), 
                    ['action' => 'treeIndex', 'id' => '', '?' => ['status' => 0]], 
                    [
                      'class' => 'dropdown-item' . ($activeFilter === '0' ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Published'), 
                    ['action' => 'treeIndex', 'id' => '', '?' => ['status' => 1]], 
                    [
                      'class' => 'dropdown-item' . ($activeFilter === '1' ? ' active' : '')
                    ]
                ) ?>
              </li>
            </ul>
          </li>
        </ul>
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="pageSearch" type="search" class="form-control" placeholder="<?= __('Search Pages...') ?>" aria-label="Search">
        </form>
      </div>
      <div class="flex-shrink-0">
        <?= $this->Html->link(__('New Page'), ['action' => 'add', '?' => ['kind' => 'page']], ['class' => 'btn btn-primary']) ?>
      </div>
    </div>
</header>
<span id="ajax-target">
<?php
    if (!empty($articles)) {
        echo $this->element('tree/page_tree', ['articles' => $articles, 'level' => 0]);
    } else {
        echo $this->Html->tag('p', __('No pages found.'));
    }
?>
</span>

<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('pageSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            let url = `<?= $this->Url->build(['action' => 'treeIndex']) ?>`;
            <?php if (null !== $activeFilter): ?>
            url += `?status=<?= urlencode($activeFilter) ?>`;
            <?php endif; ?>
            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
                fetch(url, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.text())
                .then(html => {
                    resultsContainer.innerHTML = html;
                    // Re-initialize popovers after updating the content
                    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                    popoverTriggerList.map(function (popoverTriggerEl) {
                        return new bootstrap.Popover(popoverTriggerEl);
                    });
                })
                .catch(error => console.error('Error:', error));
            } else {
                // If search is empty, you might want to reload all results or clear the table
                location.reload();
            }
        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Articles/tree_index.php -----

FILE: plugins/AdminTheme/templates/Admin/Articles/add.php
LAST MODIFIED: 2025-07-16 05:38:48
SIZE: 3416 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Article $article
 * @var \Cake\Collection\CollectionInterface|string[] $users
 * @var \Cake\Collection\CollectionInterface|string[] $images
 * @var \Cake\Collection\CollectionInterface|string[] $tags
 */
?>
<?php use App\Utility\SettingsManager; ?>

<?php if(SettingsManager::read('Editing.editor') == 'trumbowyg') : ?>
<?= $this->Html->css('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/ui/trumbowyg.min.css'); ?>
<?= $this->Html->css('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/table/ui/trumbowyg.table.min.css'); ?>
<?= $this->Html->css('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/table/ui/trumbowyg.table.min.css'); ?>
<?= $this->Html->css('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/colors/ui/trumbowyg.colors.min.css'); ?>

<?= $this->Html->script('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/trumbowyg.min.js'); ?>
<?= $this->Html->script('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/colors/trumbowyg.colors.min.js'); ?>
<?= $this->Html->script('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/upload/trumbowyg.upload.min.js'); ?>
<?= $this->Html->script('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/table/trumbowyg.table.min.js'); ?>
<?= $this->Html->script('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/preformatted/trumbowyg.preformatted.min.js'); ?>

<?= $this->Html->script('AdminTheme.trumbowyg-edit') ?>
<?php endif; ?>

<?php if(SettingsManager::read('Editing.editor') == 'markdownit') : ?>
<?= $this->Html->script('AdminTheme.markdown-it-edit') ?>
<?php endif; ?>

<meta name="csrfToken" content="<?= $this->request->getAttribute('csrfToken') ?>">

<?php $kind = $this->request->getQuery('kind'); ?>
<?php if (!$article->isNew()): ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => ($kind == 'page') ? 'Page' : 'Article',
        'controllerName' => 'Articles',
        'controllerIndexAction' => ($kind == 'page') ? 'tree-index' : 'index',
        'entity' => $article,
        'urlParams' => ($kind == 'page') ? ['kind' => 'page'] : [],
    ]);
?>
<?php endif; ?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= ($kind == 'page') ? __('Add Page') : __('Add Post') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($article,
                    [
                        'type' => 'file',
                        'enctype' => 'multipart/form-data',
                        'class' => 'needs-validation', 'novalidate' => true
                    ]) ?>
                    <fieldset>
                        <?= $this->element('form/article', ['kind' => $kind]) ?>
                        <?= $this->element('form/seo') ?>                                                
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>
<?= $this->element('js/semanticui/dropdown', ['selector' => '#tags-select']); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Articles/add.php -----

FILE: plugins/AdminTheme/templates/Admin/Articles/index.php
LAST MODIFIED: 2025-07-16 05:56:30
SIZE: 7176 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Article> $articles
 */
?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center articles">
      <div class="d-flex align-items-center me-auto">
        <ul class="navbar-nav me-3">
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false"><?= __('Status') ?></a>
            <ul class="dropdown-menu">
              <?php $activeFilter = $this->request->getQuery('status'); ?>
              <li>
                <?= $this->Html->link(
                    __('All'), 
                    ['action' => 'index'],
                    [
                      'class' => 'dropdown-item' . (null === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Un-Published'), 
                    ['action' => 'index', '?' => ['status' => 0]],
                    [
                      'class' => 'dropdown-item' . ('0' === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Published'), 
                    ['action' => 'index', '?' => ['status' => 1]],
                    [
                      'class' => 'dropdown-item' . ('1' === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
            </ul>
          </li>
        </ul>
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="articleSearch" type="search" class="form-control" placeholder="<?= __('Search Posts...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
        </form>
      </div>
      <div class="flex-shrink-0">
        <?= $this->Html->link(__('New Post'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
      </div>
    </div>
</header>
<div id="ajax-target">
  <table class="table table-striped">
    <thead>
      <tr>
        <th scope="col"><?= __('Picture') ?></th>
        <th scope="col"><?= $this->Paginator->sort('user_id', 'Author') ?></th>
        <th scope="col"><?= $this->Paginator->sort('title') ?></th>

        <?php if (null === $activeFilter) :?>
        <th scope="col"><?= $this->Paginator->sort('is_published', 'Status') ?></th>
        <?php elseif ('1' === $activeFilter) :?>
        <th scope="col"><?= $this->Paginator->sort('published') ?></th>
        <?php elseif ('0' === $activeFilter) :?>
        <th scope="col"><?= $this->Paginator->sort('modified') ?></th>
        <?php endif; ?>

        <th scope="col"><?= __('Actions') ?></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($articles as $article): ?>
      <tr>
        <td>
          <?php if (!empty($article->image)) : ?>
          <div class="position-relative">
            <?= $this->element('image/icon',  ['model' => $article, 'icon' => $article->teenyImageUrl, 'preview' => $article->largeImageUrl ]); ?>
          </div>
          <?php endif; ?>
        </td>
        <td>
          <?php if (isset($article->_matchingData['Users']) && $article->_matchingData['Users']->username): ?>
              <?= $this->Html->link(
                  h($article->_matchingData['Users']->username),
                  ['controller' => 'Users', 'action' => 'view', $article->_matchingData['Users']->id]
              ) ?>
          <?php else: ?>
              <?= h(__('Unknown Author')) ?>
          <?php endif; ?>
        </td>
        <td>
          <?php if ($article->is_published == true): ?>
              <?= $this->Html->link(
                  html_entity_decode($article->title),
                  [
                      'controller' => 'Articles',
                      'action' => 'view-by-slug',
                      'slug' => $article->slug,
                      '_name' => 'article-by-slug'
                  ],
                  ['escape' => false]
              );
              ?>
          <?php else: ?>
              <?= $this->Html->link(
                  html_entity_decode($article->title),
                  [
                      'prefix' => 'Admin',
                      'controller' => 'Articles',
                      'action' => 'view',
                      $article->id
                  ],
                  ['escape' => false]
              ) ?>
          <?php endif; ?>
        </td>
        <?php if (null === $activeFilter) :?>
        <td><?= $article->is_published ? '<span class="badge bg-success">' . __('Published') . '</span>' : '<span class="badge bg-warning">' . __('Un-Published') . '</span>'; ?></td>
        <?php elseif ('1' === $activeFilter) :?>
        <td><?= h($article->published) ?></td>
        <?php elseif ('0' === $activeFilter) :?>
        <td><?= h($article->modified) ?></td>
        <?php endif; ?>
        <td>
          <?= $this->element('evd_dropdown', ['model' => $article, 'display' => 'title']); ?>
        </td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
  <?= $this->element('pagination', ['recordCount' => count($articles), 'search' => $search ?? '']) ?>
</div>
<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('articleSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            <?php if (null !== $activeFilter): ?>
            url += `?status=<?= urlencode($activeFilter) ?>`;
            <?php endif; ?>

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }

            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                // Re-initialize popovers after updating the content
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            })
            .catch(error => console.error('Error:', error));

        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Articles/index.php -----

FILE: plugins/AdminTheme/templates/Admin/Articles/view.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 11053 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Article $article
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => ($article->kind == 'page') ? 'Page' : 'Post',
        'controllerName' => 'Articles',
        'controllerIndexAction' => ($article->kind == 'page') ? 'tree-index' : 'index',
        'entity' => $article,
        'entityDisplayName' => $article->title,
        'urlParams' => ($article->kind == 'page') ? ['kind' => 'page'] : [],
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title"><?= h($article->title) ?></h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('User') ?></th>
                            <td>
                                <?= $article->hasValue('user') ? $this->Html->link($article->user->username, ['controller' => 'Users', 'action' => 'view', $article->user->id], ['class' => 'btn btn-link']) : '' ?>
                            </td>
                        </tr>
                        <tr>
                            <th><?= __('Kind') ?></th>
                            <td><?= h($article->kind) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Title') ?></th>
                            <td><?= h($article->title) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Slug') ?></th>
                            <td>
                                <?php $ruleName = ($article->kind == 'article') ? 'article-by-slug' : 'page-by-slug';?>
                                <?php if ($article->is_published == true): ?>
                                    
                                    <?= $this->Html->link(
                                        $article->slug,
                                        [
                                            'controller' => 'Articles',
                                            'action' => 'view-by-slug',
                                            'slug' => $article->slug,
                                            '_name' => $ruleName,
                                        ],
                                        ['escape' => false]
                                    );
                                    ?>
                                <?php else: ?>
                                    <?= $this->Html->link(
                                        $article->slug,
                                        [
                                            'prefix' => 'Admin',
                                            'controller' => 'Articles',
                                            'action' => 'view',
                                            $article->id
                                        ],
                                        ['escape' => false]
                                    ) ?>
                                <?php endif; ?>
                            </td>
                        </tr>
                        <tr>
                            <th><?= __('Image') ?></th>
                            <td>
                                <?php if (!empty($article->image)) : ?>
                                <div class="position-relative">
                                    <?= $this->element('image/icon', ['model' => $article, 'icon' => $article->smallImageUrl, 'preview' => $article->largeImageUrl]); ?>
                                </div>
                                <?php endif; ?>
                            </td>
                        </tr>
                        <tr>
                            <th><?= __('Created') ?></th>
                            <td><?= h($article->created) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Modified') ?></th>
                            <td><?= h($article->modified) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Published') ?></th>
                            <td><?= h($article->published) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Is Published') ?></th>
                            <td>
                                <?= $article->is_published ? '<span class="badge bg-success">' . __('Yes') . '</span>' : '<span class="badge bg-danger">' . __('No') . '</span>'; ?>
                            </td>
                        </tr>
                        <tr>
                        <th><?= __('Page Views') ?></th>
                            <td>
                            <?= $this->Html->link(
                                '<span class="badge bg-info me-3">' . __('{0} Views', $article->view_count) . '</span>',
                                [
                                    'prefix' => 'Admin',
                                    'controller' => 'PageViews',
                                    'action' => 'pageViewStats',
                                    $article['id']
                                ],
                                [
                                    'escape' => false,
                                    'class' => 'ms-2'
                                ]
                            ) ?>
                            </td>
                        </tr>
                    </table>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Body') ?></h5>
                            <p class="card-text"><?= html_entity_decode($article->body); ?>
                        </div>
                    </div>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Lede') ?></h5>
                            <p class="card-text"><?= html_entity_decode($article->lede); ?></p>
                        </div>
                    </div>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Summary') ?></h5>
                            <p class="card-text"><?= html_entity_decode($article->summary); ?></p>
                        </div>
                    </div>
                    <div class="mt-4">
                    <?= $this->element('seo_display_fields', ['model' => $article]); ?>
                    </div>

                    <div class="card mt-4">
                        <div class="card-body">
                            <h4 class="card-title"><?= __('Related Tags') ?></h4>
                            <?php if (!empty($article->tags)) : ?>
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th><?= __('Title') ?></th>
                                            <th><?= __('Slug') ?></th>
                                            <th class="actions"><?= __('Actions') ?></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <?php foreach ($article->tags as $tag) : ?>
                                        <tr>
                                            <td><?= html_entity_decode($tag->title) ?></td>
                                            <td><?= h($tag->slug) ?></td>
                                            <td class="actions">
                                                <?= $this->element('evd_dropdown', ['controller' => 'Tags', 'model' => $tag, 'display' => 'title']); ?>
                                            </td>
                                        </tr>
                                        <?php endforeach; ?>
                                    </tbody>
                                </table>
                            </div>
                            <?php endif; ?>
                        </div>
                    </div>

                    <div class="card mt-4">
                    <?php if (!empty($article->images)) : ?>
                        <div class="mb-3">
                        <?= $this->element('image_carousel', [
                            'images' => $article->images,
                            'carouselId' => $carouselId ?? 'imageCarouselID',
                            'hideRemove' => true,
                        ]) ?>
                        </div>
                    <?php endif; ?>
                    </div>
                    
                    <?= $this->element('related/comments', ['comments' => $article->comments, 'model' => $article]) ?>

                    <div class="card mt-4">
                        <div class="card-body">
                            <h4 class="card-title"><?= __('Related Slugs') ?></h4>
                            <?php if (!empty($article->slugs)) : ?>
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th><?= __('Slug') ?></th>
                                            <th><?= __('Created') ?></th>
                                            <th><?= __('Modified') ?></th>
                                            <th class="actions"><?= __('Actions') ?></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <?php foreach ($article->slugs as $slug) : ?>
                                        <tr>
                                            <td><?= h($slug->slug) ?></td>
                                            <td><?= h($slug->created) ?></td>
                                            <td><?= h($slug->modified) ?></td>
                                            <td class="actions">
                                                <?= $this->element('evd_dropdown', ['controller' => 'Slugs', 'model' => $slug, 'display' => 'slug']); ?>
                                            </td>
                                        </tr>
                                        <?php endforeach; ?>
                                    </tbody>
                                </table>
                            </div>
                            <?php endif; ?>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Articles/view.php -----

FILE: plugins/AdminTheme/templates/Admin/Articles/edit.php
LAST MODIFIED: 2025-07-16 05:38:51
SIZE: 3519 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Article $article
 * @var string[]|\Cake\Collection\CollectionInterface $users
 * @var string[]|\Cake\Collection\CollectionInterface $images
 * @var string[]|\Cake\Collection\CollectionInterface $tags
 */
?>
<?php use App\Utility\SettingsManager; ?>

<?php if(SettingsManager::read('Editing.editor') == 'trumbowyg') : ?>
<?= $this->Html->css('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/ui/trumbowyg.min.css'); ?>
<?= $this->Html->css('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/table/ui/trumbowyg.table.min.css'); ?>
<?= $this->Html->css('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/ui/trumbowyg.min.css'); ?>
<?= $this->Html->css('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/table/ui/trumbowyg.table.min.css'); ?>
<?= $this->Html->css('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/colors/ui/trumbowyg.colors.min.css'); ?>

<?= $this->Html->script('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/trumbowyg.min.js'); ?>
<?= $this->Html->script('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/colors/trumbowyg.colors.min.js'); ?>
<?= $this->Html->script('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/upload/trumbowyg.upload.min.js'); ?>
<?= $this->Html->script('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/table/trumbowyg.table.min.js'); ?>
<?= $this->Html->script('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/plugins/preformatted/trumbowyg.preformatted.min.js'); ?>

<?= $this->Html->script('AdminTheme.trumbowyg-edit') ?>
<?php endif; ?>

<?php if(SettingsManager::read('Editing.editor') == 'markdownit') : ?>
<?= $this->Html->script('AdminTheme.markdown-it-edit') ?>
<?php endif; ?>

<meta name="csrfToken" content="<?= $this->request->getAttribute('csrfToken') ?>">

<?php $kind = $this->request->getQuery('kind'); ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => ($kind == 'page') ? 'Page' : 'Article',
        'controllerName' => 'Articles',
        'controllerIndexAction' => ($kind == 'page') ? 'tree-index' : 'index',
        'entity' => $article,
        'entityDisplayName' => $article->title,
        'urlParams' => ($kind == 'page') ? ['kind' => 'page'] : [],
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= ($kind == 'page') ? __('Edit Page') : __('Edit Post') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($article,
                    [
                        'type' => 'file',
                        'enctype' => 'multipart/form-data',
                        'class' => 'needs-validation', 'novalidate' => true
                    ]) ?>
                    <fieldset>
                        <?= $this->element('form/article', ['kind' => $article->kind]) ?>
                        <?= $this->element('form/seo') ?>                                          
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>
<?= $this->element('js/semanticui/dropdown', ['selector' => '#tags-select']); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Articles/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/Articles/tree_index_search_results.php
LAST MODIFIED: 2025-07-16 05:38:55
SIZE: 204 bytes
CONTENT:
<?php
    if (!empty($articles)) {
        echo $this->element('tree/page_tree', ['articles' => $articles, 'level' => 0]);
    } else {
        echo $this->Html->tag('p', __('No pages found.'));
    }
?>


// ----- END FILE: plugins/AdminTheme/templates/Admin/Articles/tree_index_search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Articles/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3356 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Article> $articles
 */
?>
<?php $activeFilter = $this->request->getQuery('status'); ?>
<table class="table table-striped">
    <thead>
      <tr>
        <th scope="col"><?= __('Picture') ?></th>
        <th scope="col"><?= $this->Paginator->sort('user_id', 'Author') ?></th>
        <th scope="col"><?= $this->Paginator->sort('title') ?></th>

        <?php if (null === $activeFilter) :?>
        <th scope="col"><?= $this->Paginator->sort('is_published', 'Status') ?></th>
        <?php elseif ('1' === $activeFilter) :?>
        <th scope="col"><?= $this->Paginator->sort('published') ?></th>
        <?php elseif ('0' === $activeFilter) :?>
        <th scope="col"><?= $this->Paginator->sort('modified') ?></th>
        <?php endif; ?>

        <th scope="col"><?= __('Actions') ?></th>
      </tr>
    </thead>
    <tbody>
      <?php foreach ($articles as $article): ?>
      <tr>
        <td>
          <?php if (!empty($article->image)) : ?>
          <div class="position-relative">
            <?= $this->element('image/icon',  ['model' => $article, 'icon' => $article->teenyImageUrl, 'preview' => $article->largeImageUrl ]); ?>
          </div>
          <?php endif; ?>
        </td>
        <td>
          <?php if (isset($article->_matchingData['Users']) && $article->_matchingData['Users']->username): ?>
              <?= $this->Html->link(
                  h($article->_matchingData['Users']->username),
                  ['controller' => 'Users', 'action' => 'view', $article->_matchingData['Users']->id]
              ) ?>
          <?php else: ?>
              <?= h(__('Unknown Author')) ?>
          <?php endif; ?>
        </td>
        <td>
          <?php if ($article->is_published == true): ?>
              <?= $this->Html->link(
                  html_entity_decode($article->title),
                  [
                      'controller' => 'Articles',
                      'action' => 'view-by-slug',
                      'slug' => $article->slug,
                      '_name' => 'article-by-slug'
                  ],
                  ['escape' => false]
              );
              ?>
          <?php else: ?>
              <?= $this->Html->link(
                  html_entity_decode($article->title),
                  [
                      'prefix' => 'Admin',
                      'controller' => 'Articles',
                      'action' => 'view',
                      $article->id
                  ],
                  ['escape' => false]
              ) ?>
          <?php endif; ?>
        </td>
        <?php if (null === $activeFilter) :?>
        <td><?= $article->is_published ? '<span class="badge bg-success">' . __('Published') . '</span>' : '<span class="badge bg-warning">' . __('Un-Published') . '</span>'; ?></td>
        <?php elseif ('1' === $activeFilter) :?>
        <td><?= h($article->published) ?></td>
        <?php elseif ('0' === $activeFilter) :?>
        <td><?= h($article->modified) ?></td>
        <?php endif; ?>
        <td>
          <?= $this->element('evd_dropdown', ['model' => $article, 'display' => 'title']); ?>
        </td>
      </tr>
      <?php endforeach; ?>
    </tbody>
  </table>
<?= $this->element('pagination', ['recordCount' => count($articles), 'search' => $search ?? '']) ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Articles/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/PageViews/view_records.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 8159 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Article $article
 * @var \Cake\Collection\CollectionInterface $viewRecords
 */

// Helper function to extract browser name from user agent
function extractBrowserName($userAgent) {
    $browsers = [
        'Chrome' => '/Chrome\/[\d.]+/',
        'Firefox' => '/Firefox\/[\d.]+/',
        'Safari' => '/Safari\/[\d.]+/',
        'Edge' => '/Edg\/[\d.]+/',
        'Opera' => '/OPR\/[\d.]+/',
        'Internet Explorer' => '/MSIE [\d.]+/',
    ];

    foreach ($browsers as $browser => $pattern) {
        if (preg_match($pattern, $userAgent)) {
            return $browser;
        }
    }

    return 'Other';
}
?>
<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0"><?= __('Page Views for {0}', h($article->title)) ?></h3>
                </div>
                <div class="card-body">
                    <div class="article-details mb-4">
                        <div class="row">
                            <div class="col-12 col-md-6">
                                <p class="mb-2"><strong><?= __('Article ID:') ?></strong> <span class="badge bg-secondary"><?= h($article->id) ?></span></p>
                            </div>
                            <div class="col-12 col-md-6">
                                <p class="mb-2"><strong><?= __('Slug:') ?></strong> <code><?= h($article->slug) ?></code></p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="mb-0"><?= __('View Records') ?></h4>
                        <span class="badge bg-info"><?= number_format($viewRecords->count()) ?> <?= __('records') ?></span>
                    </div>
                    
                    <?php if (!$viewRecords->isEmpty()): ?>
                        <!-- Desktop Table -->
                        <div class="table-responsive d-none d-lg-block">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th><?= __('Date & Time') ?></th>
                                        <th><?= __('IP Address') ?></th>
                                        <th><?= __('Browser') ?></th>
                                        <th><?= __('Referer') ?></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php foreach ($viewRecords as $record): ?>
                                        <tr>
                                            <td>
                                                <div><?= $record->created->format('M j, Y') ?></div>
                                                <small class="text-muted"><?= $record->created->format('H:i:s') ?></small>
                                            </td>
                                            <td>
                                                <code><?= h($record->ip_address) ?></code>
                                            </td>
                                            <td>
                                                <div class="text-truncate" style="max-width: 200px;" title="<?= h($record->user_agent) ?>">
                                                    <?= h(extractBrowserName($record->user_agent)) ?>
                                                </div>
                                            </td>
                                            <td>
                                                <?php if ($record->referer): ?>
                                                    <div class="text-truncate" style="max-width: 200px;" title="<?= h($record->referer) ?>">
                                                        <?= h(parse_url($record->referer, PHP_URL_HOST) ?: $record->referer) ?>
                                                    </div>
                                                <?php else: ?>
                                                    <span class="text-muted"><?= __('Direct') ?></span>
                                                <?php endif; ?>
                                            </td>
                                        </tr>
                                    <?php endforeach; ?>
                                </tbody>
                            </table>
                        </div>

                        <!-- Mobile/Tablet Cards -->
                        <div class="d-lg-none">
                            <?php foreach ($viewRecords as $record): ?>
                                <div class="card mb-3 view-record-card">
                                    <div class="card-body p-3">
                                        <div class="row">
                                            <div class="col-12 col-sm-6">
                                                <h6 class="card-title mb-2">
                                                    <i class="fas fa-clock text-primary me-1"></i>
                                                    <?= $record->created->format('M j, Y H:i') ?>
                                                </h6>
                                                <p class="mb-2">
                                                    <strong><?= __('IP:') ?></strong> 
                                                    <code><?= h($record->ip_address) ?></code>
                                                </p>
                                            </div>
                                            <div class="col-12 col-sm-6">
                                                <p class="mb-2">
                                                    <strong><?= __('Browser:') ?></strong><br>
                                                    <span class="text-muted"><?= h(extractBrowserName($record->user_agent)) ?></span>
                                                </p>
                                                <p class="mb-0">
                                                    <strong><?= __('Source:') ?></strong><br>
                                                    <?php if ($record->referer): ?>
                                                        <span class="text-muted text-break"><?= h(parse_url($record->referer, PHP_URL_HOST) ?: $record->referer) ?></span>
                                                    <?php else: ?>
                                                        <span class="text-muted"><?= __('Direct') ?></span>
                                                    <?php endif; ?>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <?php endforeach; ?>
                        </div>
                    <?php else: ?>
                        <div class="alert alert-info d-flex align-items-center" role="alert">
                            <i class="fas fa-info-circle me-2"></i>
                            <?= __('No view records found for this article.') ?>
                        </div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.view-record-card {
    border: none;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: box-shadow 0.2s;
}

.view-record-card:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

.card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
}

.table th {
    border-top: none;
    font-weight: 600;
    color: #6c757d;
    font-size: 0.875rem;
}

@media (max-width: 992px) {
    .article-details .row {
        gap: 0.5rem;
    }
}
</style>

// ----- END FILE: plugins/AdminTheme/templates/Admin/PageViews/view_records.php -----

FILE: plugins/AdminTheme/templates/Admin/PageViews/dashboard.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 17428 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var int $totalViews
 * @var int $uniqueVisitors
 * @var \Cake\Collection\CollectionInterface $viewsOverTime
 * @var \Cake\Collection\CollectionInterface $topArticles
 * @var array $browserStats
 * @var array $hourlyDistribution
 * @var array $topReferrers
 * @var \DateTime $startDate
 * @var \DateTime $endDate
 */
?>
<div class="analytics-dashboard">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h2"><?= __('Analytics Dashboard') ?></h1>
        <div class="date-filter">
            <form class="d-flex gap-2" method="get">
                <input type="date" 
                       name="start" 
                       value="<?= $startDate->format('Y-m-d') ?>" 
                       class="form-control">
                <input type="date" 
                       name="end" 
                       value="<?= $endDate->format('Y-m-d') ?>" 
                       class="form-control">
                <button type="submit" class="btn btn-primary"><?= __('Filter') ?></button>
            </form>
        </div>
    </div>

    <!-- KPI Cards Row -->
    <div class="row g-3 mb-4">
        <div class="col-12 col-sm-6 col-lg-3">
            <div class="card bg-primary text-white h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="card-title mb-0"><?= __('Total Views') ?></h6>
                            <h2 class="mb-0"><?= number_format($totalViews) ?></h2>
                        </div>
                        <i class="fas fa-eye fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-sm-6 col-lg-3">
            <div class="card bg-success text-white h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="card-title mb-0"><?= __('Unique Visitors') ?></h6>
                            <h2 class="mb-0"><?= number_format($uniqueVisitors) ?></h2>
                        </div>
                        <i class="fas fa-users fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-sm-6 col-lg-3">
            <div class="card bg-info text-white h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="card-title mb-0"><?= __('Avg Views/Day') ?></h6>
                            <h2 class="mb-0">
                                <?= $totalViews > 0 ? number_format($totalViews / max(1, $startDate->diff($endDate)->days)) : '0' ?>
                            </h2>
                        </div>
                        <i class="fas fa-chart-line fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-12 col-sm-6 col-lg-3">
            <div class="card bg-warning text-white h-100">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="card-title mb-0"><?= __('Pages/Visitor') ?></h6>
                            <h2 class="mb-0">
                                <?= $uniqueVisitors > 0 ? number_format($totalViews / $uniqueVisitors, 1) : '0' ?>
                            </h2>
                        </div>
                        <i class="fas fa-file-alt fa-2x opacity-75"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts Row -->
    <div class="row g-3 mb-4">
        <!-- Views Over Time Chart -->
        <div class="col-12 col-lg-8">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0"><?= __('Views Over Time') ?></h5>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="position: relative; height: 300px;">
                        <canvas id="viewsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Browser Stats Chart -->
        <div class="col-12 col-lg-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0"><?= __('Browser Usage') ?></h5>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="position: relative; height: 300px;">
                        <canvas id="browserChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Mobile-responsive data tables -->
    <div class="row g-3 mb-4">
        <!-- Top Articles -->
        <div class="col-12 col-lg-6">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0"><?= __('Top Articles') ?></h5>
                </div>
                <div class="card-body">
                    <?php if (!empty($topArticles) && $topArticles->count() > 0): ?>
                        <!-- Desktop Table -->
                        <div class="table-responsive d-none d-md-block">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th><?= __('Article') ?></th>
                                        <th class="text-end"><?= __('Views') ?></th>
                                        <th><?= __('Actions') ?></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php foreach ($topArticles as $article): ?>
                                    <tr>
                                        <td>
                                            <div class="text-truncate" style="max-width: 200px;" title="<?= h($article->article->title ?? 'N/A') ?>">
                                                <?= h($article->article->title ?? 'N/A') ?>
                                            </div>
                                        </td>
                                        <td class="text-end">
                                            <span class="badge bg-primary"><?= number_format($article->count) ?></span>
                                        </td>
                                        <td>
                                            <?php if ($article->article): ?>
                                                <?= $this->Html->link(
                                                    '<i class="fas fa-chart-bar"></i>',
                                                    ['action' => 'pageViewStats', $article->article->id],
                                                    ['class' => 'btn btn-sm btn-outline-primary', 'escape' => false, 'title' => __('View Stats')]
                                                ) ?>
                                            <?php endif; ?>
                                        </td>
                                    </tr>
                                    <?php endforeach; ?>
                                </tbody>
                            </table>
                        </div>
                        
                        <!-- Mobile Cards -->
                        <div class="d-md-none">
                            <?php foreach ($topArticles as $article): ?>
                            <div class="card mb-2">
                                <div class="card-body p-3">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1 me-2">
                                            <h6 class="card-title mb-1"><?= h($article->article->title ?? 'N/A') ?></h6>
                                            <span class="badge bg-primary"><?= number_format($article->count) ?> <?= __('views') ?></span>
                                        </div>
                                        <?php if ($article->article): ?>
                                            <?= $this->Html->link(
                                                '<i class="fas fa-chart-bar"></i>',
                                                ['action' => 'pageViewStats', $article->article->id],
                                                ['class' => 'btn btn-sm btn-outline-primary', 'escape' => false]
                                            ) ?>
                                        <?php endif; ?>
                                    </div>
                                </div>
                            </div>
                            <?php endforeach; ?>
                        </div>
                    <?php else: ?>
                        <div class="alert alert-info"><?= __('No article data available for the selected period.') ?></div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
        
        <!-- Top Referrers -->
        <div class="col-12 col-lg-6">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0"><?= __('Top Referrers') ?></h5>
                </div>
                <div class="card-body">
                    <?php if (!empty($topReferrers)): ?>
                        <!-- Desktop Table -->
                        <div class="table-responsive d-none d-md-block">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th><?= __('Source') ?></th>
                                        <th class="text-end"><?= __('Visits') ?></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <?php foreach ($topReferrers as $referrer): ?>
                                    <tr>
                                        <td>
                                            <div class="text-truncate" style="max-width: 200px;" title="<?= h($referrer['domain']) ?>">
                                                <?= h($referrer['domain']) ?>
                                            </div>
                                        </td>
                                        <td class="text-end">
                                            <span class="badge bg-secondary"><?= number_format($referrer['count']) ?></span>
                                        </td>
                                    </tr>
                                    <?php endforeach; ?>
                                </tbody>
                            </table>
                        </div>
                        
                        <!-- Mobile Cards -->
                        <div class="d-md-none">
                            <?php foreach ($topReferrers as $referrer): ?>
                            <div class="card mb-2">
                                <div class="card-body p-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="card-title mb-0"><?= h($referrer['domain']) ?></h6>
                                        </div>
                                        <span class="badge bg-secondary"><?= number_format($referrer['count']) ?></span>
                                    </div>
                                </div>
                            </div>
                            <?php endforeach; ?>
                        </div>
                    <?php else: ?>
                        <div class="alert alert-info"><?= __('No referrer data available for the selected period.') ?></div>
                    <?php endif; ?>
                </div>
            </div>
        </div>
    </div>

    <!-- Hourly Distribution Chart -->
    <div class="row g-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0"><?= __('Hourly Distribution') ?></h5>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="position: relative; height: 200px;">
                        <canvas id="hourlyChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Chart.js Scripts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Views Over Time Chart
    const viewsCtx = document.getElementById('viewsChart').getContext('2d');
    const viewsData = <?= json_encode($viewsOverTime->toArray()) ?>;
    
    new Chart(viewsCtx, {
        type: 'line',
        data: {
            datasets: [{
                label: '<?= __('Page Views') ?>',
                data: viewsData.map(item => ({
                    x: new Date(item.date),
                    y: item.count
                })),
                borderColor: '#0d6efd',
                backgroundColor: 'rgba(13, 110, 253, 0.1)',
                fill: true,
                tension: 0.4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'day',
                        displayFormats: {
                            day: 'MMM dd'
                        }
                    }
                },
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });

    // Browser Stats Chart
    const browserCtx = document.getElementById('browserChart').getContext('2d');
    const browserData = <?= json_encode($browserStats) ?>;
    
    new Chart(browserCtx, {
        type: 'doughnut',
        data: {
            labels: Object.keys(browserData),
            datasets: [{
                data: Object.values(browserData),
                backgroundColor: [
                    '#0d6efd', '#198754', '#ffc107', '#dc3545', '#6f42c1',
                    '#fd7e14', '#20c997', '#6c757d', '#e83e8c', '#17a2b8'
                ]
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom',
                    labels: {
                        boxWidth: 12,
                        font: {
                            size: 11
                        }
                    }
                }
            }
        }
    });

    // Hourly Distribution Chart
    const hourlyCtx = document.getElementById('hourlyChart').getContext('2d');
    const hourlyData = <?= json_encode($hourlyDistribution) ?>;
    
    new Chart(hourlyCtx, {
        type: 'bar',
        data: {
            labels: Array.from({length: 24}, (_, i) => i + ':00'),
            datasets: [{
                label: '<?= __('Views') ?>',
                data: hourlyData,
                backgroundColor: 'rgba(13, 110, 253, 0.6)',
                borderColor: '#0d6efd',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        precision: 0
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
});
</script>

<style>
.analytics-dashboard .card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    transition: box-shadow 0.15s ease-in-out;
}

.analytics-dashboard .card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

.date-filter input,
.date-filter button {
    min-width: auto;
}

@media (max-width: 576px) {
    .date-filter {
        width: 100%;
    }
    
    .date-filter form {
        flex-direction: column;
        gap: 0.5rem !important;
    }
    
    .d-flex.justify-content-between.align-items-center {
        flex-direction: column;
        align-items: stretch !important;
        gap: 1rem;
    }
}

.chart-container {
    min-height: 200px;
}
</style>

// ----- END FILE: plugins/AdminTheme/templates/Admin/PageViews/dashboard.php -----

FILE: plugins/AdminTheme/templates/Admin/PageViews/page_view_stats.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 14389 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Article $article
 * @var \Cake\Collection\CollectionInterface $viewsOverTime
 */
?>
<div class="page-view-stats content container-fluid mt-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
        <h2 class="mb-3 mb-md-0"><?= __('Page View Statistics for: {0}', h($article->title)) ?></h2>
        <div class="kpi-card">
            <div class="card bg-primary text-white">
                <div class="card-body p-3">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-eye me-2"></i>
                        <div>
                            <small><?= __('Total Views') ?></small>
                            <h4 class="mb-0" id="total-views"><?= number_format(array_sum(array_column($viewsOverTime->toArray(), 'count'))) ?></h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0"><?= __('Filter by Date Range') ?></h5>
                </div>
                <div class="card-body">
                    <div class="date-filter-form">
                        <div class="row g-2">
                            <div class="col-12 col-sm-6 col-md-4">
                                <label for="start-date" class="form-label"><?= __('Start Date') ?></label>
                                <input type="date" id="start-date" class="form-control">
                            </div>
                            <div class="col-12 col-sm-6 col-md-4">
                                <label for="end-date" class="form-label"><?= __('End Date') ?></label>
                                <input type="date" id="end-date" class="form-control">
                            </div>
                            <div class="col-12 col-md-4 d-flex align-items-end">
                                <button id="filter-btn" class="btn btn-primary w-100"><?= __('Apply Filter') ?></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0"><?= __('Views Over Time') ?></h5>
                </div>
                <div class="card-body">
                    <div class="chart-container" style="position: relative; height: 300px; width: 100%;">
                        <canvas id="viewsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <?php if (!empty($viewsOverTime) && $viewsOverTime->count() > 0): ?>
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0"><?= __('Daily Breakdown') ?></h5>
                    </div>
                    <div class="card-body p-0">
                        <!-- Desktop Table -->
                        <div class="table-responsive d-none d-md-block">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th><?= __('Date') ?></th>
                                        <th class="text-end"><?= __('Views') ?></th>
                                        <th><?= __('Actions') ?></th>
                                    </tr>
                                </thead>
                                <tbody id="stats-table-body">
                                    <?php foreach ($viewsOverTime as $view): ?>
                                    <tr>
                                        <td><?= h((new DateTime($view->date))->format('M j, Y')) ?></td>
                                        <td class="text-end">
                                            <span class="badge bg-primary"><?= number_format($view->count) ?></span>
                                        </td>
                                        <td>
                                            <?= $this->Html->link(
                                                '<i class="fas fa-list"></i> ' . __('Details'),
                                                ['action' => 'viewRecords', $article->id, '?' => ['date' => $view->date]],
                                                ['title' => __('View detailed records for this date'), 'class' => 'btn btn-sm btn-outline-primary', 'escape' => false]
                                            ) ?>
                                        </td>
                                    </tr>
                                    <?php endforeach; ?>
                                </tbody>
                            </table>
                        </div>

                        <!-- Mobile Cards -->
                        <div class="d-md-none p-3" id="stats-mobile-cards">
                            <?php foreach ($viewsOverTime as $view): ?>
                            <div class="card mb-2 mobile-stat-card">
                                <div class="card-body p-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="card-title mb-1"><?= h((new DateTime($view->date))->format('M j, Y')) ?></h6>
                                            <span class="badge bg-primary"><?= number_format($view->count) ?> <?= __('views') ?></span>
                                        </div>
                                        <div>
                                            <?= $this->Html->link(
                                                '<i class="fas fa-list"></i>',
                                                ['action' => 'viewRecords', $article->id, '?' => ['date' => $view->date]],
                                                ['title' => __('View details'), 'class' => 'btn btn-sm btn-outline-primary', 'escape' => false]
                                            ) ?>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <?php endforeach; ?>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    <?php else: ?>
        <div class="row">
            <div class="col-12">
                <div class="alert alert-info" role="alert">
                    <i class="fas fa-info-circle me-2"></i>
                    <?= __('No page view data available for this article.') ?>
                </div>
            </div>
        </div>
    <?php endif; ?>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const ctx = document.getElementById('viewsChart').getContext('2d');
    let chart;
    const filterBtn = document.getElementById('filter-btn');
    const startDate = document.getElementById('start-date');
    const endDate = document.getElementById('end-date');
    const totalViews = document.getElementById('total-views');
    const tableBody = document.getElementById('stats-table-body');
    const mobileCards = document.getElementById('stats-mobile-cards');

    // Initialize chart with current data
    initChart(<?= json_encode($viewsOverTime->toArray()) ?>);

    filterBtn.addEventListener('click', function() {
        if (!startDate.value || !endDate.value) {
            alert('<?= __('Please select both start and end dates') ?>');
            return;
        }

        // Show loading state
        filterBtn.disabled = true;
        filterBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> <?= __('Loading...') ?>';

        const url = `/admin/page-views/filter-stats/<?= $article->id ?>?start=${startDate.value}&end=${endDate.value}`;

        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                updateTable(data.viewsOverTime);
                updateMobileCards(data.viewsOverTime);
                updateChart(data.viewsOverTime);
                totalViews.textContent = new Intl.NumberFormat().format(data.totalViews);
            })
            .catch(error => {
                console.error('Error:', error);
                alert('<?= __('An error occurred while fetching data. Please try again.') ?>');
            })
            .finally(() => {
                // Reset button state
                filterBtn.disabled = false;
                filterBtn.innerHTML = '<?= __('Apply Filter') ?>';
            });
    });

    function initChart(data) {
        const chartData = prepareChartData(data);
        chart = new Chart(ctx, {
            type: 'line',
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            precision: 0
                        }
                    },
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day',
                            displayFormats: {
                                day: 'MMM dd'
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }

    function updateChart(data) {
        const chartData = prepareChartData(data);
        chart.data = chartData;
        chart.update();
    }

    function prepareChartData(data) {
        return {
            datasets: [{
                label: '<?= __('Page Views') ?>',
                data: data.map(item => ({x: new Date(item.date), y: item.count})),
                borderColor: '#0d6efd',
                backgroundColor: 'rgba(13, 110, 253, 0.1)',
                fill: true,
                tension: 0.4
            }]
        };
    }

    function updateTable(viewsData) {
        if (!tableBody) return;
        
        tableBody.innerHTML = '';
        viewsData.forEach(view => {
            const date = new Date(view.date);
            const formattedDate = date.toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric', 
                year: 'numeric' 
            });
            
            const row = `
                <tr>
                    <td>${formattedDate}</td>
                    <td class="text-end">
                        <span class="badge bg-primary">${new Intl.NumberFormat().format(view.count)}</span>
                    </td>
                    <td>
                        <a href="/admin/page-views/view-records/<?= $article->id ?>?date=${view.date}" 
                           class="btn btn-sm btn-outline-primary" 
                           title="<?= __('View detailed records for this date') ?>">
                            <i class="fas fa-list"></i> <?= __('Details') ?>
                        </a>
                    </td>
                </tr>
            `;
            tableBody.innerHTML += row;
        });
    }

    function updateMobileCards(viewsData) {
        if (!mobileCards) return;
        
        mobileCards.innerHTML = '';
        viewsData.forEach(view => {
            const date = new Date(view.date);
            const formattedDate = date.toLocaleDateString('en-US', { 
                month: 'short', 
                day: 'numeric', 
                year: 'numeric' 
            });
            
            const card = `
                <div class="card mb-2 mobile-stat-card">
                    <div class="card-body p-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title mb-1">${formattedDate}</h6>
                                <span class="badge bg-primary">${new Intl.NumberFormat().format(view.count)} <?= __('views') ?></span>
                            </div>
                            <div>
                                <a href="/admin/page-views/view-records/<?= $article->id ?>?date=${view.date}" 
                                   class="btn btn-sm btn-outline-primary" 
                                   title="<?= __('View details') ?>">
                                    <i class="fas fa-list"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            mobileCards.innerHTML += card;
        });
    }
});
</script>

<style>
.kpi-card {
    min-width: 200px;
}

.chart-container {
    min-height: 200px;
}

.mobile-stat-card {
    border: none;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: box-shadow 0.2s;
}

.mobile-stat-card:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

@media (max-width: 768px) {
    .d-flex.flex-column.flex-md-row {
        gap: 1rem;
    }
    
    .kpi-card {
        width: 100%;
        min-width: auto;
    }
    
    .date-filter-form .row {
        gap: 0.5rem;
    }
}

.table th {
    border-top: none;
    font-weight: 600;
    color: #6c757d;
    font-size: 0.875rem;
}

.card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
}

.card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    transition: box-shadow 0.15s ease-in-out;
}
</style>

// ----- END FILE: plugins/AdminTheme/templates/Admin/PageViews/page_view_stats.php -----

FILE: plugins/AdminTheme/templates/Admin/BlockedIps/add.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3677 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\BlockedIp $blockedIp
 */
?>
<?php if (!$blockedIp->isNew()): ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Blocked Ip',
        'controllerName' => 'Blocked Ips',
        'entity' => $blockedIp,
        'entityDisplayName' => $blockedIp->ip_address
    ]);
?>
<?php endif; ?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Add Blocked Ip') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($blockedIp, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>
                    <div class="mb-3">
                            <?php echo $this->Form->control('ip_address', ['class' => 'form-control' . ($this->Form->isFieldError('ip_address') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('ip_address')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('ip_address') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('reason', ['class' => 'form-control' . ($this->Form->isFieldError('reason') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('reason')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('reason') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('blocked_at', ['class' => 'form-control' . ($this->Form->isFieldError('blocked_at') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('blocked_at')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('blocked_at') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('expires_at', ['class' => 'form-control' . ($this->Form->isFieldError('expires_at') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('expires_at')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('expires_at') ?>
                                </div>
                            <?php endif; ?>
                        </div>                                                                     
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/BlockedIps/add.php -----

FILE: plugins/AdminTheme/templates/Admin/BlockedIps/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4662 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\BlockedIp> $blockedIps
 */
?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center blockedIps">
      <div class="d-flex align-items-center me-auto">
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="blockedIpSearch" type="search" class="form-control" placeholder="<?= __('Search Blocked Ips...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
        </form>
      </div>
      <div class="flex-shrink-0">
        <?= $this->Html->link(__('New Blocked Ip'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
      </div>
    </div>
</header>
<div id="ajax-target">
    <table class="table table-striped">
    <thead>
        <tr>
            <th scope="col"><?= $this->Paginator->sort('ip_address') ?></th>
            <th scope="col"><?= $this->Paginator->sort('reason') ?></th>
            <th scope="col"><?= $this->Paginator->sort('blocked_at') ?></th>
            <th scope="col"><?= $this->Paginator->sort('expires_at') ?></th>
            <th scope="col"><?= __('Actions') ?></th>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($blockedIps as $blockedIp): ?>
        <tr>
            <td><?= h($blockedIp->ip_address) ?></td>
            <td><?= h($blockedIp->reason) ?></td>
            <td><?= h($blockedIp->blocked_at) ?></td>
            <td><?= h($blockedIp->expires_at) ?></td>
            <td>
                <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                    <div class="dropdown">
                    <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <?= __('Actions') ?>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <?= $this->Html->link(__('View'), ['action' => 'view', $blockedIp->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li>
                            <?= $this->Html->link(__('Edit'), ['action' => 'edit', $blockedIp->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $blockedIp->id], ['confirm' => __('Are you sure you want to delete {0}?', $blockedIp->ip_address), 'class' => 'dropdown-item text-danger']) ?>
                        </li>
                    </ul>
                    </div>
                </div>
            </td>
        </tr>
        <?php endforeach; ?>
    </tbody>
    </table>
    <?= $this->element('pagination', ['recordCount' => count($blockedIps), 'search' => $search ?? '']) ?>
</div>
<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('blockedIpSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                // Re-initialize popovers after updating the content
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            })
            .catch(error => console.error('Error:', error));
        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/BlockedIps/index.php -----

FILE: plugins/AdminTheme/templates/Admin/BlockedIps/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1989 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\BlockedIp $blockedIp
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Blocked Ip',
        'controllerName' => 'Blocked Ips',
        'entity' => $blockedIp,
        'entityDisplayName' => $blockedIp->ip_address
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title"><?= h($blockedIp->ip_address) ?></h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Ip Address') ?></th>
                            <td><?= h($blockedIp->ip_address) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Blocked At') ?></th>
                            <td><?= h($blockedIp->blocked_at) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Expires At') ?></th>
                            <td><?= h($blockedIp->expires_at) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Created') ?></th>
                            <td><?= h($blockedIp->created) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Modified') ?></th>
                            <td><?= h($blockedIp->modified) ?></td>
                        </tr>
                    </table>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Reason') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($blockedIp->reason)); ?></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/BlockedIps/view.php -----

FILE: plugins/AdminTheme/templates/Admin/BlockedIps/edit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3624 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\BlockedIp $blockedIp
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Blocked Ip',
        'controllerName' => 'Blocked Ips',
        'entity' => $blockedIp,
        'entityDisplayName' => $blockedIp->ip_address
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Edit Blocked Ip') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($blockedIp, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>
                    <div class="mb-3">
                            <?php echo $this->Form->control('ip_address', ['class' => 'form-control' . ($this->Form->isFieldError('ip_address') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('ip_address')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('ip_address') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('reason', ['class' => 'form-control' . ($this->Form->isFieldError('reason') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('reason')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('reason') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('blocked_at', ['class' => 'form-control' . ($this->Form->isFieldError('blocked_at') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('blocked_at')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('blocked_at') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('expires_at', ['class' => 'form-control' . ($this->Form->isFieldError('expires_at') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('expires_at')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('expires_at') ?>
                                </div>
                            <?php endif; ?>
                        </div>                                                                   
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/BlockedIps/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/BlockedIps/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2261 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\BlockedIp> $blockedIps
 */
?>
<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col"><?= $this->Paginator->sort('ip_address') ?></th>
            <th scope="col"><?= $this->Paginator->sort('reason') ?></th>
            <th scope="col"><?= $this->Paginator->sort('blocked_at') ?></th>
            <th scope="col"><?= $this->Paginator->sort('expires_at') ?></th>
            <th scope="col"><?= __('Actions') ?></th>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($blockedIps as $blockedIp): ?>
        <tr>
            <td><?= h($blockedIp->ip_address) ?></td>
            <td><?= h($blockedIp->reason) ?></td>
            <td><?= h($blockedIp->blocked_at) ?></td>
            <td><?= h($blockedIp->expires_at) ?></td>
            <td>
                <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                    <div class="dropdown">
                    <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <?= __('Actions') ?>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <?= $this->Html->link(__('View'), ['action' => 'view', $blockedIp->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li>
                            <?= $this->Html->link(__('Edit'), ['action' => 'edit', $blockedIp->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $blockedIp->id], ['confirm' => __('Are you sure you want to delete {0}?', $blockedIp->ip_address), 'class' => 'dropdown-item text-danger']) ?>
                        </li>
                    </ul>
                    </div>
                </div>
            </td>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>
<?= $this->element('pagination', ['recordCount' => count($blockedIps), 'search' => $search ?? '']) ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/BlockedIps/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/picker.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6716 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Image> $images
 * @var string|null $galleryId
 * @var string $viewType
 */
?>
<?php use App\Utility\SettingsManager; ?>
<div class="row">
    <aside class="column">
        <div class="side-nav">
            <h4 class="heading"><?= __('Actions') ?></h4>
            <?= $this->Html->link(__('List Images'), ['action' => 'index'], ['class' => 'side-nav-item']) ?>
            <?= $this->Html->link(__('New Image'), ['action' => 'add'], ['class' => 'side-nav-item']) ?>
            <?php if ($galleryId): ?>
                <?= $this->Html->link(__('Back to Gallery'), ['controller' => 'ImageGalleries', 'action' => 'manageImages', $galleryId], ['class' => 'side-nav-item']) ?>
            <?php endif; ?>
        </div>
    </aside>
    <div class="column column-80">
        <div class="images index content">
            <h3><?= __('Select Images for Gallery') ?></h3>
            
            <?= $this->Form->create(null, [
                'url' => ['controller' => 'ImageGalleries', 'action' => 'addImages', $galleryId],
                'id' => 'add-images-form'
            ]) ?>
            
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="d-flex align-items-center">
                    <input id="imageSearch" type="search" class="form-control me-3" placeholder="<?= __('Search images...') ?>" style="width: 300px;">
                    <span id="selected-count" class="text-muted"><?= __('No images selected') ?></span>
                </div>
                <div>
                    <?= $this->Form->button(__('Add Selected Images'), [
                        'class' => 'btn btn-primary',
                        'id' => 'submit-button',
                        'disabled' => true
                    ]) ?>
                    <?= $this->Html->link(__('Cancel'), 
                        ['controller' => 'ImageGalleries', 'action' => 'manageImages', $galleryId], 
                        ['class' => 'btn btn-secondary']
                    ) ?>
                </div>
            </div>
            
            <div id="ajax-target">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th width="50"><?= __('Select') ?></th>
                            <th><?= __('Image') ?></th>
                            <th><?= $this->Paginator->sort('name') ?></th>
                            <th><?= $this->Paginator->sort('modified') ?></th>
                            <th><?= $this->Paginator->sort('created') ?></th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($images as $image): ?>
                        <tr>
                            <td>
                                <?= $this->Form->checkbox('image_ids[]', [
                                    'value' => $image->id,
                                    'class' => 'image-checkbox form-check-input',
                                    'hiddenField' => false
                                ]) ?>
                            </td>
                            <td>
                                <div class="position-relative">
                                    <?= $this->element('image/icon', ['model' => $image, 'icon' => $image->teenyImageUrl, 'preview' => $image->extraLargeImageUrl]); ?>
                                </div>
                            </td>
                            <td><?= h($image->name) ?></td>
                            <td><?= h($image->created) ?></td>
                            <td><?= h($image->modified) ?></td>
                        </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
                <?= $this->element('pagination', ['recordCount' => count($images), 'search' => $search ?? '']) ?>
            </div>
            
            <?= $this->Form->end() ?>
        </div>
    </div>
</div>

<script>
console.log('Inline script loading...');
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM Content Loaded - picker.php inline script running');
    
    const searchInput = document.getElementById('imageSearch');
    const resultsContainer = document.querySelector('#ajax-target');
    const submitButton = document.getElementById('submit-button');
    const selectedCount = document.getElementById('selected-count');
    const form = document.getElementById('add-images-form');
    
    console.log('Elements found:', {
        searchInput: !!searchInput,
        resultsContainer: !!resultsContainer,
        submitButton: !!submitButton,
        selectedCount: !!selectedCount,
        form: !!form
    });
    
    let debounceTimer;

    // Update UI based on checkbox selections
    function updateUI() {
        const checked = document.querySelectorAll('.image-checkbox:checked');
        const count = checked.length;
        
        console.log('UpdateUI called, checked count:', count);
        
        if (submitButton) {
            submitButton.disabled = count === 0;
            console.log('Submit button disabled:', submitButton.disabled);
        }
        
        if (selectedCount) {
            if (count === 0) {
                selectedCount.textContent = 'No images selected';
            } else if (count === 1) {
                selectedCount.textContent = '1 image selected';
            } else {
                selectedCount.textContent = count + ' images selected';
            }
        }
    }
    
    // Add listeners to checkboxes
    function updateCheckboxListeners() {
        const checkboxes = document.querySelectorAll('.image-checkbox');
        console.log('Found checkboxes:', checkboxes.length);
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                console.log('Checkbox changed:', this.checked, this.value);
                updateUI();
            });
        });
    }
    
    // Simple form submission test
    if (submitButton) {
        submitButton.addEventListener('click', function(e) {
            console.log('Submit button clicked!');
            console.log('Button disabled:', this.disabled);
            
            if (!this.disabled && form) {
                console.log('Submitting form...');
                form.submit();
            } else {
                console.log('Button disabled or no form found');
                e.preventDefault();
            }
        });
    }
    
    // Initialize
    updateCheckboxListeners();
    updateUI();
});
</script>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/picker.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/image_select_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 386 bytes
CONTENT:
<?php
/**
 * Image Picker Results - Only the results portion for AJAX updates
 * This template is used when gallery_only=1 parameter is present to avoid modal flicker
 * 
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Image> $images
 * @var string|null $search Current search term
 */

// Just include the original image gallery template
include 'image_gallery.php';

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/image_select_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/add.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3829 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Image $image
 */
?>
<?php if (!$image->isNew()): ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Image',
        'controllerName' => 'Images',
        'entity' => $image,
        'entityDisplayName' => $image->name
    ]);
?>
<?php endif; ?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Add Image') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($image,
                    [
                        'type' => 'file',
                        'enctype' => 'multipart/form-data',
                        'class' => 'needs-validation', 'novalidate' => true
                    ]) ?>
                    <fieldset>
                        <div class="mb-3">
                            <?php echo $this->Form->control('name', ['class' => 'form-control' . ($this->Form->isFieldError('name') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('name')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('name') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?php echo $this->Form->control('alt_text', ['class' => 'form-control' . ($this->Form->isFieldError('alt_text') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('alt_text')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('alt_text') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?php echo $this->Form->control('keywords', ['class' => 'form-control' . ($this->Form->isFieldError('keywords') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('keywords')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('keywords') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?= $this->Form->control('image', [
                                'type' => 'file',
                                'label' => [
                                    'text' => __('Image'),
                                    'class' => 'form-label'
                                ],
                                'class' => 'form-control' . ($this->Form->isFieldError('image') ? ' is-invalid' : ''),
                                'id' => 'customFile'
                            ]) ?>
                            <?php if ($this->Form->isFieldError('image')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('image') ?>
                                </div>
                            <?php endif; ?>
                        </div>                                                                     
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/add.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/ajax_image_list.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1128 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Image> $images
 */
?>
<?php foreach ($images as $image): ?>
    <div class="col-6 col-md-4 col-lg-3 image-item" data-image-id="<?= h($image->id) ?>">
        <div class="card h-100">
            <div class="position-relative">
                <?= $this->Html->image($image->getImageUrlBySize('thumbnail'), [
                    'class' => 'card-img-top',
                    'style' => 'height: 120px; object-fit: cover;',
                    'alt' => h($image->alt_text ?: $image->name)
                ]) ?>
                <div class="position-absolute top-0 end-0 p-1">
                    <span class="badge bg-primary">
                        <i class="fas fa-check" style="display: none;"></i>
                    </span>
                </div>
            </div>
            <div class="card-body p-2">
                <h6 class="card-title small mb-0" title="<?= h($image->name) ?>">
                    <?= $this->Text->truncate(h($image->name), 20) ?>
                </h6>
            </div>
        </div>
    </div>
<?php endforeach; ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/ajax_image_list.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6341 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Image> $images
 */
?>
<?php use App\Utility\SettingsManager; ?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center images">
        <div class="d-flex align-items-center me-auto">
            <div class="btn-group me-3">
                <?= $this->Html->link('
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5"></path>
                    </svg>
                    <span class="visually-hidden">' . __('List View') . '</span>
                ', ['action' => 'index', '?' => ['view' => 'list']], [
                    'class' => 'btn btn-secondary',
                    'escape' => false,
                ]) ?>
                <?= $this->Html->link('
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grid-3x2" viewBox="0 0 16 16">
                        <path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v8a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 11.5zM1.5 3a.5.5 0 0 0-.5.5V7h4V3zM5 8H1v3.5a.5.5 0 0 0 .5.5H5zm1 0v4h4V8zm4-1V3H6v4zm1 1v4h3.5a.5.5 0 0 0 .5-.5V8zm0-1h4V3.5a.5.5 0 0 0-.5-.5H11z"></path>
                    </svg>
                    <span class="visually-hidden">' . __('Grid View') . '</span>
                ', ['action' => 'index', '?' => ['view' => 'grid']], [
                    'class' => 'btn btn-outline-secondary',
                    'escape' => false,
                ]) ?>
            </div>
            <form class="d-flex-grow-1 me-3" role="search">
                <input id="imageSearch" type="search" class="form-control" placeholder="<?= __('Search...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
            </form>
        </div>
        <div class="flex-shrink-0">
            <?= $this->Html->link(__('New Image'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
            <?= $this->Html->link(__('Bulk Upload'), ['action' => 'bulkUpload'], ['class' => 'btn btn-primary']) ?>
        </div>
    </div>
</header>
<div id="ajax-target">
<table class="table table-striped">
  <thead>
    <tr>
          <th scope="col"><?= __('Image') ?></th>
          <th scope="col"><?= $this->Paginator->sort('name') ?></th>
          <th scope="col"><?= $this->Paginator->sort('modified') ?></th>
          <th scope="col"><?= $this->Paginator->sort('created') ?></th>
          <th scope="col"><?= __('Actions') ?></th>
    </tr>
  </thead>
  <tbody>
    <?php foreach ($images as $image): ?>
    <tr>
            <td>
                <div class="position-relative">
                    <?= $this->element('image/icon', ['model' => $image, 'icon' => $image->teenyImageUrl, 'preview' => $image->extraLargeImageUrl]); ?>
                </div>
            </td>
            <td><?= h($image->name) ?></td>
            <td><?= h($image->created) ?></td>
            <td><?= h($image->modified) ?></td>
            <td>
            <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <?= __('Actions') ?>
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <?= $this->Html->link(__('View'), ['action' => 'view', $image->id], ['class' => 'dropdown-item']) ?>
                    </li>
                    <li>
                        <?= $this->Html->link(__('Edit'), ['action' => 'edit', $image->id], ['class' => 'dropdown-item']) ?>
                    </li>
                    <li><hr class="dropdown-divider"></li>
                    <li>
                        <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $image->id], ['confirm' => __('Are you sure you want to delete {0}?', $image->name), 'class' => 'dropdown-item text-danger']) ?>
                    </li>
                </ul>
                </div>
            </div>
        </td>
    </tr>
    <?php endforeach; ?>
  </tbody>
</table>
<?= $this->element('pagination', ['recordCount' => count($images), 'search' => $search ?? '']) ?>
</div>
<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('imageSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                // Re-initialize popovers after updating the content
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            })
            .catch(error => console.error('Error:', error));

        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/index.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/picker_search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3589 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Image> $images
 * @var string|null $galleryId
 * @var string $viewType
 */
?>
<?php use App\Utility\SettingsManager; ?>

<?php if ($viewType === 'grid'): ?>
    <div class="album py-5 bg-body-tertiary">
        <div class="container">
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                <?php foreach ($images as $image): ?>
                        <div class="col">
                            <div class="card shadow-sm position-relative">
                                <div class="form-check position-absolute top-0 start-0 m-2" style="z-index: 10;">
                                    <input type="checkbox" name="image_ids[]" value="<?= h($image->id) ?>" class="image-checkbox form-check-input" id="img-<?= h($image->id) ?>">
                                    <label class="form-check-label visually-hidden" for="img-<?= h($image->id) ?>">
                                        <?= __('Select {0}', h($image->name)) ?>
                                    </label>
                                </div>
                                
                                <?= $this->Html->image(
                                    SettingsManager::read('ImageSizes.large') . '/' . $image->image, [
                                        'pathPrefix' => 'files/Images/image/',
                                        'alt' => $image->alt_text,
                                        'class' => 'card-img-top'
                                ]) ?>
                                
                                <div class="card-body">
                                    <p class="card-text"><?= h($image->name) ?></p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <small class="text-muted"><?= h($image->created->format('M j, Y')) ?></small>
                                    </div>
                                </div>
                            </div>
                        </div>
                <?php endforeach; ?>
            </div>
        </div>
    </div>
    <?= $this->element('pagination', ['recordCount' => count($images)]) ?>
<?php else: ?>
    <table class="table table-striped">
      <thead>
        <tr>
              <th scope="col" width="50"><?= __('Select') ?></th>
              <th scope="col"><?= __('Image') ?></th>
              <th scope="col"><?= $this->Paginator->sort('name') ?></th>
              <th scope="col"><?= $this->Paginator->sort('modified') ?></th>
              <th scope="col"><?= $this->Paginator->sort('created') ?></th>
        </tr>
      </thead>
      <tbody>
        <?php foreach ($images as $image): ?>
        <tr>
                <td>
                    <input type="checkbox" name="image_ids[]" value="<?= h($image->id) ?>" class="image-checkbox form-check-input">
                </td>
                <td>
                    <div class="position-relative">
                        <?= $this->element('image/icon', ['model' => $image, 'icon' => $image->teenyImageUrl, 'preview' => $image->extraLargeImageUrl]); ?>
                    </div>
                </td>
                <td><?= h($image->name) ?></td>
                <td><?= h($image->created) ?></td>
                <td><?= h($image->modified) ?></td>
        </tr>
        <?php endforeach; ?>
      </tbody>
    </table>
    <?= $this->element('pagination', ['recordCount' => count($images), 'search' => $search ?? '']) ?>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/picker_search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/image_gallery.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4716 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Image> $images
 */
?>
<?php use App\Utility\SettingsManager; ?>
<div class="album bg-body-tertiary mb-3">
    <div class="container">
        <div id="imageResults" class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            <?php if (!empty($images)): ?>
            <?php foreach ($images as $image): ?>
                <div class="col">
                    <div class="card shadow-sm">
                        <?= $this->Html->image(SettingsManager::read('ImageSizes.large') . '/' . $image->image, 
                            [
                                'pathPrefix' => 'files/Images/image/',
                                'alt' => $image->alt_text,
                                'class' => 'card-img-top insert-image',
                                'data-src' => $image->image,
                                'data-name' => $image->name,
                                'data-id' => $image->id,
                                'data-alt' => $image->alt_text
                            ]
                        ) ?>
                        <div class="card-body">
                        <p class="card-text"><?= h($image->name) ?></p>
                            <?php
                            $imageSizes = SettingsManager::read('ImageSizes');
                            
                            // Create proper options with labels
                            $sizeOptions = [];
                            if (is_array($imageSizes) && !empty($imageSizes)) {
                                foreach ($imageSizes as $name => $width) {
                                    $sizeOptions[$width] = ucfirst($name) . ' (' . $width . 'px)';
                                }
                                // Sort by size (key) ascending - smallest to biggest
                                ksort($sizeOptions);
                            } else {
                                // Fallback if ImageSizes is not available (ordered smallest to biggest)
                                $sizeOptions = [
                                    '10' => 'Micro (10px)',
                                    '50' => 'Teeny (50px)',
                                    '100' => 'Tiny (100px)',
                                    '200' => 'Small (200px)',
                                    '300' => 'Medium (300px)',
                                    '400' => 'Large (400px)',
                                    '500' => 'Extra Large (500px)',
                                    '800' => 'Massive (800px)'
                                ];
                            }
                            
                            echo $this->Form->select(
                                'size',
                                $sizeOptions,
                                [
                                    'hiddenField' => false,
                                    'id' => $image->id . '_size',
                                    'class' => 'form-select',
                                    'value' => SettingsManager::read('ImageSizes.large') ?: '400'
                                ]
                            );
                            ?>
                        </div>
                    </div>
                </div>
            <?php endforeach; ?>
            <?php else: ?>
                <!-- Empty State -->
                <div class="col-12">
                    <div class="text-center py-5">
                        <i class="fas fa-images fa-4x text-muted mb-3"></i>
                        <h5 class="text-muted"><?= __('No images found') ?></h5>
                        <?php if (!empty($search ?? '')): ?>
                            <p class="text-muted">
                                <?= __('No images match your search for "{0}"', h($search)) ?>
                            </p>
                            <button type="button" class="btn btn-outline-secondary" onclick="document.getElementById('imageSearch').value = ''; document.getElementById('imageSearch').dispatchEvent(new Event('input'));">
                                <?= __('Clear Search') ?>
                            </button>
                        <?php else: ?>
                            <p class="text-muted">
                                <?= __('Upload some images first to insert them into your content.') ?>
                            </p>
                        <?php endif; ?>
                    </div>
                </div>
            <?php endif; ?>
        </div>
    </div>
</div>
<?= $this->element('pagination', ['recordCount' => count($images), 'search' => $search ?? '']) ?>


// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/image_gallery.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2291 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Image $image
 */
?>
<?php use App\Utility\SettingsManager; ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Image',
        'controllerName' => 'Images',
        'entity' => $image,
        'entityDisplayName' => $image->name
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title"><?= h($image->name) ?></h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Name') ?></th>
                            <td><?= h($image->name) ?></td>
                        </tr>
                        <tr>
                            <?php if (!empty($image->image)): ?>
                                <div class="mb-3">
                                <?= $this->Html->image(SettingsManager::read('ImageSizes.large', '200') . '/' . $image->image, 
                                    [
                                        'pathPrefix' => 'files/Images/image/',
                                        'alt' => $image->alt_text,
                                        'class' => 'img-thumbnail',
                                    ])?>
                                </div>
                            <?php endif; ?>
                        </tr>
                        <tr>
                            <th><?= __('Alt Text') ?></th>
                            <td><?= h($image->alt_text) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Keywords') ?></th>
                            <td><?= h($image->keywords) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Created') ?></th>
                            <td><?= h($image->created) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Modified') ?></th>
                            <td><?= h($image->modified) ?></td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/view.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/edit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4065 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Image $image
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Image',
        'controllerName' => 'Images',
        'entity' => $image,
        'entityDisplayName' => $image->name
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Edit Image') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($image,
                    [
                        'type' => 'file',
                        'enctype' => 'multipart/form-data',
                        'class' => 'needs-validation', 'novalidate' => true
                    ]) ?>
                    <fieldset>
                        <div class="mb-3">
                            <?php echo $this->Form->control('name', ['class' => 'form-control' . ($this->Form->isFieldError('name') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('name')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('name') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?php echo $this->Form->control('alt_text', ['class' => 'form-control' . ($this->Form->isFieldError('alt_text') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('alt_text')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('alt_text') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mbteeny-3">
                            <?php echo $this->Form->control('keywords', ['class' => 'form-control' . ($this->Form->isFieldError('keywords') ? ' is-invalid' : '')]); ?>
                            <?php if ($this->Form->isFieldError('keywords')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('keywords') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <div class="mb-3">
                            <?= $this->Form->control('image', [
                                'type' => 'file',
                                'label' => [
                                    'text' => __('Image'),
                                    'class' => 'form-label'
                                ],
                                'class' => 'form-control' . ($this->Form->isFieldError('image') ? ' is-invalid' : ''),
                                'id' => 'customFile'
                            ]) ?>
                            <?php if ($this->Form->isFieldError('image')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('image') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                        <?php if (!empty($image->image)): ?>
                            <div class="mb-3">
                                <?= $this->element('image/icon', ['model' => $image, 'icon' => $image->teenyImageUrl, 'preview' => $image->extraLargeImageUrl]); ?>
                            </div>
                        <?php endif; ?>
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/image_select.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 3984 bytes
CONTENT:
<?php
/**
 * Image Picker - For selecting images to insert into content
 * Modern layout with separated search form and results for smooth AJAX updates
 * 
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Image> $images
 * @var string|null $search Current search term
 */

use App\Utility\SettingsManager;
?>

<div id="image-gallery" class="willow-image-picker">
    <!-- Static Search Form (Never gets replaced via AJAX) -->
    <div class="willow-search-form p-3">
        <div class="row align-items-center">
            <div class="col-md-8">
                <div class="input-group">
                    <span class="input-group-text bg-white border-end-0">
                        <i class="fas fa-search text-muted"></i>
                    </span>
                    <input type="text" 
                           class="form-control border-start-0" 
                           id="imageSearch" 
                           placeholder="<?= __('Search images by name, alt text, keywords...') ?>"
                           value="<?= h($this->request->getQuery('search', '')) ?>"
                           autocomplete="off">
                    <?php if ($this->request->getQuery('search')): ?>
                        <button class="btn btn-outline-secondary" type="button" id="clearImageSearch">
                            <i class="fas fa-times"></i>
                        </button>
                    <?php endif; ?>
                </div>
            </div>
            <div class="col-md-4 text-end">
                <div class="btn-group" role="group" aria-label="View toggle">
                    <input type="radio" class="btn-check" name="imageViewType" id="imageGridView" value="grid" checked>
                    <label class="btn btn-outline-primary" for="imageGridView" title="<?= __('Grid View') ?>">
                        <i class="fas fa-th"></i>
                    </label>
                    <input type="radio" class="btn-check" name="imageViewType" id="imageListView" value="list">
                    <label class="btn btn-outline-primary" for="imageListView" title="<?= __('List View') ?>">
                        <i class="fas fa-list"></i>
                    </label>
                </div>
            </div>
        </div>
        
        <!-- Search Stats -->
        <div class="row mt-2">
            <div class="col">
                <small class="text-muted">
                    <i class="fas fa-info-circle me-1"></i>
                    <?= __('Select an image and choose the size to insert into your content') ?>
                </small>
            </div>
        </div>
    </div>

    <!-- Dynamic Results Container (Gets replaced via AJAX) -->
    <div id="image-results" class="willow-results-container">
        <?php include 'image_gallery.php'; ?>
    </div>
</div>

<script>
// Enhanced image picker interactions
document.addEventListener('DOMContentLoaded', function() {
    // Clear search functionality  
    const clearImageSearchBtn = document.getElementById('clearImageSearchBtn');
    if (clearImageSearchBtn) {
        clearImageSearchBtn.addEventListener('click', function() {
            const searchInput = document.getElementById('imageSearch');
            if (searchInput) {
                searchInput.value = '';
                searchInput.dispatchEvent(new Event('input', { bubbles: true }));
                searchInput.focus();
            }
        });
    }
    
    // Clear search button in search form
    const clearImageSearch = document.getElementById('clearImageSearch');
    if (clearImageSearch) {
        clearImageSearch.addEventListener('click', function() {
            const searchInput = document.getElementById('imageSearch');
            if (searchInput) {
                searchInput.value = '';
                searchInput.dispatchEvent(new Event('input', { bubbles: true }));
                searchInput.focus();
            }
        });
    }
});
</script>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/image_select.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/picker_grid.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 11249 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Image> $images
 * @var string $viewType
 * @var string|null $galleryId
 */
?>
<div class="row">
    <aside class="column">
        <div class="side-nav">
            <h4 class="heading"><?= __('Actions') ?></h4>
            <?= $this->Html->link(__('List Images'), ['action' => 'index'], ['class' => 'side-nav-item']) ?>
            <?= $this->Html->link(__('New Image'), ['action' => 'add'], ['class' => 'side-nav-item']) ?>
            <?php if ($galleryId): ?>
                <?= $this->Html->link(__('Back to Gallery'), ['controller' => 'ImageGalleries', 'action' => 'manageImages', $galleryId], ['class' => 'side-nav-item']) ?>
            <?php endif; ?>
        </div>
    </aside>
    <div class="column column-80">
        <header class="py-3 mb-3 border-bottom">
            <div class="container-fluid d-flex align-items-center images">
                <div class="d-flex align-items-center me-auto">
                    <div class="btn-group me-3">
                        <?= $this->Html->link('
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5"></path>
                            </svg>
                            <span class="visually-hidden">' . __('List View') . '</span>
                        ', ['action' => 'picker', '?' => ['view' => 'list', 'gallery_id' => $galleryId]], [
                            'class' => 'btn btn-outline-secondary',
                            'escape' => false,
                        ]) ?>
                        <?= $this->Html->link('
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grid-3x2" viewBox="0 0 16 16">
                                <path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v8a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 11.5zM1.5 3a.5.5 0 0 0-.5.5V7h4V3zM5 8H1v3.5a.5.5 0 0 0 .5.5H5zm1 0v4h4V8zm4-1V3H6v4zm1 1v4h3.5a.5.5 0 0 0 .5-.5V8zm0-1h4V3.5a.5.5 0 0 0-.5-.5H11z"></path>
                            </svg>
                            <span class="visually-hidden">' . __('Grid View') . '</span>
                        ', ['action' => 'picker', '?' => ['view' => 'grid', 'gallery_id' => $galleryId]], [
                            'class' => 'btn btn-secondary',
                            'escape' => false,
                        ]) ?>
                    </div>
                    <div class="d-flex-grow-1 me-3" role="search">
                        <input id="imageSearch" type="search" class="form-control" placeholder="<?= __('Search...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
                    </div>
                </div>
                <div class="flex-shrink-0">
                    <?= $this->Form->button(__('Add Selected Images'), [
                        'class' => 'btn btn-primary',
                        'id' => 'submit-button',
                        'disabled' => true
                    ]) ?>
                    <span id="selected-count" class="text-muted ms-2"><?= __('No images selected') ?></span>
                </div>
            </div>
        </header>
        
        <?= $this->Form->create(null, [
            'url' => ['controller' => 'ImageGalleries', 'action' => 'addImages', $galleryId],
            'id' => 'add-images-form'
        ]) ?>
            
            <div id="ajax-target">
                <div class="album py-5 bg-body-tertiary">
                    <div class="container">
                        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                            <?php foreach ($images as $image): ?>
                                    <div class="col">
                                        <div class="card shadow-sm position-relative">
                                            <div class="form-check position-absolute top-0 start-0 m-2" style="z-index: 10;">
                                                <?= $this->Form->checkbox('image_ids[]', [
                                    'value' => $image->id,
                                    'class' => 'image-checkbox form-check-input',
                                    'id' => 'img-' . $image->id,
                                    'hiddenField' => false
                                ]) ?>
                                                <label class="form-check-label visually-hidden" for="img-<?= h($image->id) ?>">
                                                    <?= __('Select {0}', h($image->name)) ?>
                                                </label>
                                            </div>
                                            
                                            <?= $this->Html->image(
                                                SettingsManager::read('ImageSizes.large') . '/' . $image->image, [
                                                    'pathPrefix' => 'files/Images/image/',
                                                    'alt' => $image->alt_text,
                                                    'class' => 'card-img-top'
                                            ]) ?>
                                            
                                            <div class="card-body">
                                                <p class="card-text"><?= h($image->name) ?></p>
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <small class="text-muted"><?= h($image->created->format('M j, Y')) ?></small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                            <?php endforeach; ?>
                        </div>
                    </div>
                </div>
                <?= $this->element('pagination', ['recordCount' => count($images)]) ?>
            </div>
        <?= $this->Form->end() ?>
    </div>
</div>

<style>
.card.selected {
    border-color: #007bff;
    box-shadow: 0 4px 12px rgba(0,123,255,0.3) !important;
}
</style>

<?php $this->Html->scriptStart(['block' => true]); ?>
console.log('Grid view script loading...');
document.addEventListener('DOMContentLoaded', function() {
    console.log('Grid view: DOM Content Loaded');
    
    const searchInput = document.getElementById('imageSearch');
    const resultsContainer = document.querySelector('#ajax-target');
    const submitButton = document.getElementById('submit-button');
    const selectedCount = document.getElementById('selected-count');
    
    console.log('Grid view elements found:', {
        searchInput: !!searchInput,
        resultsContainer: !!resultsContainer,
        submitButton: !!submitButton,
        selectedCount: !!selectedCount
    });
    
    let debounceTimer;

    // Update UI based on checkbox selections
    function updateUI() {
        const checked = document.querySelectorAll('.image-checkbox:checked');
        const count = checked.length;
        
        submitButton.disabled = count === 0;
        
        if (count === 0) {
            selectedCount.textContent = '<?= __('No images selected') ?>';
        } else if (count === 1) {
            selectedCount.textContent = '<?= __('1 image selected') ?>';
        } else {
            selectedCount.textContent = count + ' <?= __('images selected') ?>';
        }
        
        // Update visual selection
        document.querySelectorAll('.card').forEach(card => {
            const checkbox = card.querySelector('.image-checkbox');
            if (checkbox && checkbox.checked) {
                card.classList.add('selected');
            } else {
                card.classList.remove('selected');
            }
        });
    }
    
    // Add listeners to checkboxes
    function updateCheckboxListeners() {
        document.querySelectorAll('.image-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', updateUI);
        });
        
        // Also add click listeners to cards for better UX
        document.querySelectorAll('.card').forEach(card => {
            const checkbox = card.querySelector('.image-checkbox');
            card.addEventListener('click', function(e) {
                if (e.target.type !== 'checkbox' && checkbox) {
                    checkbox.checked = !checkbox.checked;
                    updateUI();
                }
            });
        });
    }
    
    // Search functionality
    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            // Only search if 3+ characters or empty (to show all results)
            if (searchTerm.length > 0 && searchTerm.length < 3) {
                return;
            }
            
            let url = '<?= $this->Url->build(['action' => 'picker']) ?>';
            const params = new URLSearchParams();
            params.append('gallery_id', '<?= h($galleryId) ?>');
            params.append('view', 'grid');
            
            if (searchTerm.length > 0) {
                params.append('search', searchTerm);
            }
            
            url += '?' + params.toString();
            
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                updateCheckboxListeners();
                updateUI();
            })
            .catch(error => console.error('Search error:', error));
        }, 300);
    });
    
    // Submit button click handler
    if (submitButton) {
        submitButton.addEventListener('click', function(e) {
            console.log('Grid view: Submit button clicked!');
            
            const form = document.getElementById('add-images-form');
            const checked = document.querySelectorAll('.image-checkbox:checked');
            
            if (checked.length === 0) {
                alert('Please select at least one image.');
                e.preventDefault();
                return false;
            }
            
            if (form && !this.disabled) {
                console.log('Grid view: Submitting form...');
                form.submit();
            } else {
                console.log('Grid view: Form not found or button disabled');
                e.preventDefault();
            }
        });
    }
    
    // Initialize
    updateCheckboxListeners();
    updateUI();
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/picker_grid.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/json/trumbowyg_add.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 78 bytes
CONTENT:
<?php
echo json_encode(array('success'=> 'true', 'file' => $img['image']));
?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/json/trumbowyg_add.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/json/bulk_upload.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 0 bytes
CONTENT:


// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/json/bulk_upload.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/bulk_upload.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2925 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 */
?>
<?= $this->Html->css('https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/basic.min.css') ?>
<?= $this->Html->script('https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/dropzone.min.js') ?>
<?php // CSRF Token will be passed via data-attribute on the form ?>

<?php
    echo $this->element('actions_card', [
        'modelName' => 'Image',
        'controllerName' => 'Images',
        'entity' => null,
        'entityDisplayName' => __('Bulk Upload Images')
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0"><?= __('Bulk Upload Images') ?></h3>
                </div>
                <div class="card-body">
                    <div class="alert alert-info">
                        <h5 class="alert-heading"><i class="fas fa-info-circle me-2"></i><?= __('Upload Options') ?></h5>
                        <p class="mb-2"><?= __('You can upload:') ?></p>
                        <ul class="mb-0">
                            <li><strong><?= __('Individual Images') ?>:</strong> <?= __('JPG, PNG, GIF files') ?></li>
                            <li><strong><?= __('Archive Files') ?>:</strong> <?= __('ZIP, TAR, TAR.GZ files containing multiple images') ?></li>
                        </ul>
                        <hr>
                        <p class="mb-0 small text-muted">
                            <i class="fas fa-lightbulb me-1"></i><?= __('Tip: Upload a ZIP file to quickly add multiple related images, then organize them into galleries.') ?>
                        </p>
                    </div>
                    <div id="upload-notifications" class="mb-3"></div>
                    <form action="<?= $this->Url->build(['controller' => 'Images', 'action' => 'bulkUpload']) ?>"
                          class="dropzone"
                          id="imageUploadDropzone"
                          data-upload-url="<?= $this->Url->build(['controller' => 'Images', 'action' => 'bulkUpload']) ?>"
                          data-delete-url="<?= $this->Url->build(['controller' => 'Images', 'action' => 'deleteUploadedImage']) ?>"
                          data-csrf-token="<?= $this->request->getAttribute('csrfToken') ?>">
                        <div class="fallback">
                            <input name="file" type="file" multiple />
                        </div>
                    </form>
                    <div class="mt-3">
                        <button id="refreshPageButton" class="btn btn-info" style="display:none;"><?= __('Done - Refresh Page') ?></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<?= $this->Html->script('AdminTheme.image_bulk_upload') // Reference the script within the plugin ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/bulk_upload.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/index_grid.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 5858 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Image> $images
 * @var string $viewType
 */
?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center images">
        <div class="d-flex align-items-center me-auto">
            <div class="btn-group me-3">
                <?= $this->Html->link('
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5"></path>
                    </svg>
                    <span class="visually-hidden">' . __('List View') . '</span>
                ', ['action' => 'index', '?' => ['view' => 'list']], [
                    'class' => 'btn btn-outline-secondary',
                    'escape' => false,
                ]) ?>
                <?= $this->Html->link('
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grid-3x2" viewBox="0 0 16 16">
                        <path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v8a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 11.5zM1.5 3a.5.5 0 0 0-.5.5V7h4V3zM5 8H1v3.5a.5.5 0 0 0 .5.5H5zm1 0v4h4V8zm4-1V3H6v4zm1 1v4h3.5a.5.5 0 0 0 .5-.5V8zm0-1h4V3.5a.5.5 0 0 0-.5-.5H11z"></path>
                    </svg>
                    <span class="visually-hidden">' . __('Grid View') . '</span>
                ', ['action' => 'index', '?' => ['view' => 'grid']], [
                    'class' => 'btn btn-secondary',
                    'escape' => false,
                ]) ?>
            </div>
            <form class="d-flex-grow-1 me-3" role="search">
                <input id="imageSearch" type="search" class="form-control" placeholder="<?= __('Search...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
            </form>
        </div>
        <div class="flex-shrink-0">
            <?= $this->Html->link(__('New Image'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
            <?= $this->Html->link(__('Bulk Upload'), ['action' => 'bulkUpload'], ['class' => 'btn btn-primary']) ?>
        </div>
    </div>
</header>
<div id="ajax-target">
    <div class="album py-5 bg-body-tertiary">
        <div class="container">
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                <?php foreach ($images as $image): ?>
                        <div class="col">
                            <div class="card shadow-sm">
                                <?= $this->Html->image(
                                    SettingsManager::read('ImageSizes.large') . '/' . $image->image, [
                                        'pathPrefix' => 'files/Images/image/',
                                        'alt' => $image->alt_text,
                                        'class' => 'card-img-top'
                                ]) ?>
                                
                                <div class="card-body">
                                    <p class="card-text"><?= h($image->name) ?></p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="btn-group">
                                            <?= $this->Html->link(__('View'), ['action' => 'view', $image->id], ['class' => 'btn btn-sm btn-outline-secondary']) ?>
                                            <?= $this->Html->link(__('Edit'), ['action' => 'edit', $image->id], ['class' => 'btn btn-sm btn-outline-secondary']) ?>
                                            <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $image->id], ['confirm' => __('Are you sure you want to delete {0}?', $image->name), 'class' => 'btn btn-sm btn-outline-secondary text-danger']) ?>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                <?php endforeach; ?>
            </div>
        </div>
    </div>
    <?= $this->element('pagination', ['recordCount' => count($images)]) ?>
</div>

<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('imageSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
            })
            .catch(error => console.error('Error:', error));
        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/index_grid.php -----

FILE: plugins/AdminTheme/templates/Admin/Images/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4375 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Image> $images
 * @var string $viewType
 */
?>

<?php if ($viewType === 'grid'): ?>
    <div class="album py-5 bg-body-tertiary">
        <div class="container">
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
                <?php foreach ($images as $image): ?>
                        <div class="col">
                            <div class="card shadow-sm">
                                <?= $this->Html->image(
                                    SettingsManager::read('ImageSizes.large') . '/' . $image->image, [
                                        'pathPrefix' => 'files/Images/image/',
                                        'alt' => $image->alt_text,
                                        'class' => 'card-img-top'
                                ]) ?>
                                
                                <div class="card-body">
                                    <p class="card-text"><?= h($image->name) ?></p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="btn-group">
                                            <?= $this->Html->link(__('View'), ['action' => 'view', $image->id], ['class' => 'btn btn-sm btn-outline-secondary']) ?>
                                            <?= $this->Html->link(__('Edit'), ['action' => 'edit', $image->id], ['class' => 'btn btn-sm btn-outline-secondary']) ?>
                                            <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $image->id], ['confirm' => __('Are you sure you want to delete {0}?', $image->name), 'class' => 'btn btn-sm btn-outline-secondary text-danger']) ?>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                <?php endforeach; ?>
            </div>
        </div>
    </div>
    <?= $this->element('pagination', ['recordCount' => count($images)]) ?>
<?php else: ?>
    <table class="table table-striped">
  <thead>
    <tr>
          <th scope="col"><?= __('Image') ?></th>
          <th scope="col"><?= $this->Paginator->sort('name') ?></th>
          <th scope="col"><?= $this->Paginator->sort('modified') ?></th>
          <th scope="col"><?= $this->Paginator->sort('created') ?></th>
          <th scope="col"><?= __('Actions') ?></th>
    </tr>
  </thead>
  <tbody>
    <?php foreach ($images as $image): ?>
    <tr>
            <td>
                <div class="position-relative">
                    <?= $this->element('image/icon',  ['model' => $image, 'icon' => $image->teenyImageUrl, 'preview' => $image->extraLargeImageUrl]); ?>
                </div>
            </td>
            <td><?= h($image->name) ?></td>
            <td><?= h($image->created) ?></td>
            <td><?= h($image->modified) ?></td>
            <td>
            <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                <div class="dropdown">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <?= __('Actions') ?>
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <?= $this->Html->link(__('View'), ['action' => 'view', $image->id], ['class' => 'dropdown-item']) ?>
                    </li>
                    <li>
                        <?= $this->Html->link(__('Edit'), ['action' => 'edit', $image->id], ['class' => 'dropdown-item']) ?>
                    </li>
                    <li><hr class="dropdown-divider"></li>
                    <li>
                        <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $image->id], ['confirm' => __('Are you sure you want to delete {0}?', $image->name), 'class' => 'dropdown-item text-danger']) ?>
                    </li>
                </ul>
                </div>
            </div>
        </td>
    </tr>
    <?php endforeach; ?>
  </tbody>
</table>
<?= $this->element('pagination', ['recordCount' => count($images), 'search' => $search ?? '']) ?>
<?php endif; ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Images/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Aiprompts/add.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4293 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Aiprompt $aiprompt
 */
?>
<?php if (!$aiprompt->isNew()): ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Aiprompt',
        'controllerName' => 'Aiprompts',
        'entity' => $aiprompt,
        'entityDisplayName' => $aiprompt->task_type
    ]);
?>
<?php endif; ?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Add Aiprompt') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($aiprompt, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>
                    <div class="mb-3">
                            <?php echo $this->Form->control('task_type', ['class' => 'form-control' . ($this->Form->isFieldError('task_type') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('task_type')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('task_type') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('system_prompt', ['class' => 'form-control' . ($this->Form->isFieldError('system_prompt') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('system_prompt')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('system_prompt') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('model', ['class' => 'form-control' . ($this->Form->isFieldError('model') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('model')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('model') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('max_tokens', ['class' => 'form-control' . ($this->Form->isFieldError('max_tokens') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('max_tokens')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('max_tokens') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('temperature', ['class' => 'form-control' . ($this->Form->isFieldError('temperature') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('temperature')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('temperature') ?>
                                </div>
                            <?php endif; ?>
                        </div>                                                               
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Aiprompts/add.php -----

FILE: plugins/AdminTheme/templates/Admin/Aiprompts/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4929 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Aiprompt> $aiprompts
 */
?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center aiprompts">
      <div class="d-flex align-items-center me-auto">
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="aipromptSearch" type="search" class="form-control" placeholder="<?= __('Search Aiprompts...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
        </form>
      </div>
      <div class="flex-shrink-0">
        <?= $this->Html->link(__('New Aiprompt'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
      </div>
    </div>
</header>
<div id="ajax-target">
    <table class="table table-striped">
    <thead>
        <tr>
            <th scope="col"><?= $this->Paginator->sort('task_type') ?></th>
            <th scope="col"><?= $this->Paginator->sort('model') ?></th>
            <th scope="col"><?= $this->Paginator->sort('max_tokens') ?></th>
            <th scope="col"><?= $this->Paginator->sort('temperature') ?></th>
            <th scope="col"><?= $this->Paginator->sort('created') ?></th>
            <th scope="col"><?= $this->Paginator->sort('modified') ?></th>
            <th scope="col"><?= __('Actions') ?></th>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($aiprompts as $aiprompt): ?>
        <tr>
            <td><?= h($aiprompt->task_type) ?></td>
            <td><?= h($aiprompt->model) ?></td>
            <td><?= $this->Number->format($aiprompt->max_tokens) ?></td>
            <td><?= $this->Number->format($aiprompt->temperature) ?></td>
            <td><?= h($aiprompt->created) ?></td>
            <td><?= h($aiprompt->modified) ?></td>
            <td>
                <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                    <div class="dropdown">
                    <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <?= __('Actions') ?>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <?= $this->Html->link(__('View'), ['action' => 'view', $aiprompt->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li>
                            <?= $this->Html->link(__('Edit'), ['action' => 'edit', $aiprompt->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $aiprompt->id], ['confirm' => __('Are you sure you want to delete {0}?', $aiprompt->task_type), 'class' => 'dropdown-item text-danger']) ?>
                        </li>
                    </ul>
                    </div>
                </div>
            </td>
        </tr>
        <?php endforeach; ?>
    </tbody>
    </table>
    <?= $this->element('pagination', ['recordCount' => count($aiprompts), 'search' => $search ?? '']) ?>
</div>
<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('aipromptSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                // Re-initialize popovers after updating the content
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            })
            .catch(error => console.error('Error:', error));
        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Aiprompts/index.php -----

FILE: plugins/AdminTheme/templates/Admin/Aiprompts/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2211 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Aiprompt $aiprompt
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Aiprompt',
        'controllerName' => 'Aiprompts',
        'entity' => $aiprompt,
        'entityDisplayName' => $aiprompt->task_type
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title"><?= h($aiprompt->task_type) ?></h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Task Type') ?></th>
                            <td><?= h($aiprompt->task_type) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Model') ?></th>
                            <td><?= h($aiprompt->model) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Max Tokens') ?></th>
                            <td><?= $this->Number->format($aiprompt->max_tokens) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Temperature') ?></th>
                            <td><?= $this->Number->format($aiprompt->temperature) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Created At') ?></th>
                            <td><?= h($aiprompt->created) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Modified At') ?></th>
                            <td><?= h($aiprompt->modified) ?></td>
                        </tr>
                    </table>
                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('System Prompt') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($aiprompt->system_prompt)); ?></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Aiprompts/view.php -----

FILE: plugins/AdminTheme/templates/Admin/Aiprompts/edit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 4248 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Aiprompt $aiprompt
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Aiprompt',
        'controllerName' => 'Aiprompts',
        'entity' => $aiprompt,
        'entityDisplayName' => $aiprompt->task_type
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Edit Aiprompt') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($aiprompt, ['class' => 'needs-validation', 'novalidate' => true]) ?>
                    <fieldset>
                    <div class="mb-3">
                            <?php echo $this->Form->control('task_type', ['class' => 'form-control' . ($this->Form->isFieldError('task_type') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('task_type')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('task_type') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('system_prompt', ['class' => 'form-control' . ($this->Form->isFieldError('system_prompt') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('system_prompt')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('system_prompt') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('model', ['class' => 'form-control' . ($this->Form->isFieldError('model') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('model')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('model') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('max_tokens', ['class' => 'form-control' . ($this->Form->isFieldError('max_tokens') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('max_tokens')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('max_tokens') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                                        <div class="mb-3">
                            <?php echo $this->Form->control('temperature', ['class' => 'form-control' . ($this->Form->isFieldError('temperature') ? ' is-invalid' : '')]); ?>
                                                                                        <?php if ($this->Form->isFieldError('temperature')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('temperature') ?>
                                </div>
                            <?php endif; ?>
                        </div>                                                                    
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Aiprompts/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/Aiprompts/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 2535 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Aiprompt> $aiprompts
 */
?>
<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col"><?= $this->Paginator->sort('task_type') ?></th>
            <th scope="col"><?= $this->Paginator->sort('model') ?></th>
            <th scope="col"><?= $this->Paginator->sort('max_tokens') ?></th>
            <th scope="col"><?= $this->Paginator->sort('temperature') ?></th>
            <th scope="col"><?= $this->Paginator->sort('created') ?></th>
            <th scope="col"><?= $this->Paginator->sort('modified') ?></th>
            <th scope="col"><?= __('Actions') ?></th>
        </tr>
    </thead>
    <tbody>
        <?php foreach ($aiprompts as $aiprompt): ?>
        <tr>
            <td><?= h($aiprompt->task_type) ?></td>
            <td><?= h($aiprompt->model) ?></td>
            <td><?= $this->Number->format($aiprompt->max_tokens) ?></td>
            <td><?= $this->Number->format($aiprompt->temperature) ?></td>
            <td><?= h($aiprompt->created) ?></td>
            <td><?= h($aiprompt->modified) ?></td>
            <td>
                <div class="btn-group w-100 align-items-center justify-content-between flex-wrap">
                    <div class="dropdown">
                    <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <?= __('Actions') ?>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <?= $this->Html->link(__('View'), ['action' => 'view', $aiprompt->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li>
                            <?= $this->Html->link(__('Edit'), ['action' => 'edit', $aiprompt->id], ['class' => 'dropdown-item']) ?>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <?= $this->Form->postLink(__('Delete'), ['action' => 'delete', $aiprompt->id], ['confirm' => __('Are you sure you want to delete {0}?', $aiprompt->task_type), 'class' => 'dropdown-item text-danger']) ?>
                        </li>
                    </ul>
                    </div>
                </div>
            </td>
        </tr>
        <?php endforeach; ?>
    </tbody>
</table>
<?= $this->element('pagination', ['recordCount' => count($aiprompts), 'search' => $search ?? '']) ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Aiprompts/search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Tags/tree_index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 6037 bytes
CONTENT:
<?php
$activeFilter = $this->request->getQuery('status');
if ($activeFilter === null) {
    $this->Html->script('https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js', ['block' => true]);
    $this->Html->script('tags_tree', ['block' => true]);
}
?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center tags">
      <div class="d-flex align-items-center me-auto">
        <ul class="navbar-nav me-3">
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false"><?= __('Status') ?></a>
            <ul class="dropdown-menu">
              <li>
                <?= $this->Html->link(
                    __('All'), 
                    ['action' => 'treeIndex', 'id' => ''], 
                    [
                      'class' => 'dropdown-item' . ($activeFilter === null ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Un-Published'), 
                    ['action' => 'treeIndex', 'id' => '', '?' => ['status' => 0]], 
                    [
                      'class' => 'dropdown-item' . ($activeFilter === '0' ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Published'), 
                    ['action' => 'treeIndex', 'id' => '', '?' => ['status' => 1]], 
                    [
                      'class' => 'dropdown-item' . ($activeFilter === '1' ? ' active' : '')
                    ]
                ) ?>
              </li>
            </ul>
          </li>
        </ul>
        <div class="btn-group me-3">
            <?= $this->Html->link('
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5"></path>
                </svg>
                <span class="visually-hidden">' . __('List View') . '</span>
            ', ['action' => 'index'], [
                'class' => 'btn btn-outline-secondary',
                'escape' => false,
            ]) ?>
            <?= $this->Html->link('
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-tree" viewBox="0 0 16 16">
                  <path d="M8.416.223a.5.5 0 0 0-.832 0l-3 4.5A.5.5 0 0 0 5 5.5h.098L3.076 8.735A.5.5 0 0 0 3.5 9.5h.191l-1.638 3.276a.5.5 0 0 0 .447.724H7V16h2v-2.5h4.5a.5.5 0 0 0 .447-.724L12.31 9.5h.191a.5.5 0 0 0 .424-.765L10.902 5.5H11a.5.5 0 0 0 .416-.777zM6.437 4.758A.5.5 0 0 0 6 4.5h-.066L8 1.401 10.066 4.5H10a.5.5 0 0 0-.424.765L11.598 8.5H11.5a.5.5 0 0 0-.447.724L12.69 12.5H3.309l1.638-3.276A.5.5 0 0 0 4.5 8.5h-.098l2.022-3.235a.5.5 0 0 0 .013-.507"/>
                </svg>
                <span class="visually-hidden">' . __('Tree View') . '</span>
            ', ['action' => 'treeIndex'], [
                'class' => 'btn btn-secondary',
                'escape' => false,
            ]) ?>
        </div>
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="tagSearch" type="search" class="form-control" placeholder="<?= __('Search Tags...') ?>" aria-label="Search">
        </form>
      </div>
      <div class="flex-shrink-0">
        <?= $this->Html->link(__('New Tag'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
      </div>
    </div>
</header>
<span id="ajax-target">
<?php
    if (!empty($tags)) {
        echo $this->element('tree/tag_tree', ['tags' => $tags, 'level' => 0]);
    } else {
        echo $this->Html->tag('p', __('No tags found.'));
    }
?>
</span>

<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('tagSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            let url = `<?= $this->Url->build(['action' => 'treeIndex']) ?>`;
            <?php if (null !== $activeFilter): ?>
            url += `?status=<?= urlencode($activeFilter) ?>`;
            <?php endif; ?>
            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
                fetch(url, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => response.text())
                .then(html => {
                    resultsContainer.innerHTML = html;
                    // Re-initialize popovers after updating the content
                    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                    popoverTriggerList.map(function (popoverTriggerEl) {
                        return new bootstrap.Popover(popoverTriggerEl);
                    });
                })
                .catch(error => console.error('Error:', error));
            } else {
                // If search is empty, you might want to reload all results or clear the table
                location.reload();
            }
        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Tags/tree_index.php -----

FILE: plugins/AdminTheme/templates/Admin/Tags/add.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1466 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Tag $tag
 * @var \Cake\Collection\CollectionInterface|string[] $articles
 */
?>
<?php if (!$tag->isNew()): ?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Tag',
        'controllerName' => 'Tags',
        'entity' => $tag,
        'entityDisplayName' => $tag->title
    ]);
?>
<?php endif; ?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Add Tag') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($tag, ['type' => 'file', 'class' => 'needs-validation', 'novalidate' => true, 'enctype' => 'multipart/form-data']) ?>
                    <fieldset>
                        <?= $this->element('form/tag') ?>
                        <?= $this->element('form/seo', ['hideWordCount' => true]) ?>                                              
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>
<?= $this->element('js/semanticui/dropdown', ['selector' => '#articles-select']); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Tags/add.php -----

FILE: plugins/AdminTheme/templates/Admin/Tags/index.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 7028 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Tag> $tags
 */
?>
<?php use App\Utility\SettingsManager; ?>
<header class="py-3 mb-3 border-bottom">
    <div class="container-fluid d-flex align-items-center tags">
      <div class="d-flex align-items-center me-auto">
      <ul class="navbar-nav me-3">
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false"><?= __('Level') ?></a>
            <ul class="dropdown-menu">
              <?php $activeFilter = $this->request->getQuery('level'); ?>
              <li>
                <?= $this->Html->link(
                    __('All'), 
                    ['action' => 'index'],
                    [
                      'class' => 'dropdown-item' . (null === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Root'), 
                    ['action' => 'index', '?' => ['level' => 0]],
                    [
                      'class' => 'dropdown-item' . ('0' === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
              <li>
                <?= $this->Html->link(
                    __('Child'), 
                    ['action' => 'index', '?' => ['level' => 1]],
                    [
                      'class' => 'dropdown-item' . ('1' === $activeFilter ? ' active' : '')
                    ]
                ) ?>
              </li>
            </ul>
          </li>
        </ul>
        <div class="btn-group me-3">
            <?= $this->Html->link('
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-list" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5m0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5"></path>
                </svg>
                <span class="visually-hidden">' . __('List View') . '</span>
            ', ['action' => 'index'], [
                'class' => 'btn btn-secondary',
                'escape' => false,
            ]) ?>
            <?= $this->Html->link('
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-tree" viewBox="0 0 16 16">
                  <path d="M8.416.223a.5.5 0 0 0-.832 0l-3 4.5A.5.5 0 0 0 5 5.5h.098L3.076 8.735A.5.5 0 0 0 3.5 9.5h.191l-1.638 3.276a.5.5 0 0 0 .447.724H7V16h2v-2.5h4.5a.5.5 0 0 0 .447-.724L12.31 9.5h.191a.5.5 0 0 0 .424-.765L10.902 5.5H11a.5.5 0 0 0 .416-.777zM6.437 4.758A.5.5 0 0 0 6 4.5h-.066L8 1.401 10.066 4.5H10a.5.5 0 0 0-.424.765L11.598 8.5H11.5a.5.5 0 0 0-.447.724L12.69 12.5H3.309l1.638-3.276A.5.5 0 0 0 4.5 8.5h-.098l2.022-3.235a.5.5 0 0 0 .013-.507"/>
                </svg>
                <span class="visually-hidden">' . __('Tree View') . '</span>
            ', ['action' => 'treeIndex'], [
                'class' => 'btn btn-outline-secondary',
                'escape' => false,
            ]) ?>
        </div>
        <form class="d-flex-grow-1 me-3" role="search">
          <input id="tagSearch" type="search" class="form-control" placeholder="<?= __('Search Tags...') ?>" aria-label="Search" value="<?= $this->request->getQuery('search') ?>">
        </form>
      </div>
      <div class="flex-shrink-0">
        <?= $this->Html->link(__('New Tag'), ['action' => 'add'], ['class' => 'btn btn-primary']) ?>
      </div>
    </div>
</header>
<div id="ajax-target">
<table class="table table-striped">
  <thead>
    <tr>
          <th><?= __('Picture') ?></th>
          <th scope="col"><?= $this->Paginator->sort('title') ?></th>
          <th scope="col"><?= $this->Paginator->sort('slug') ?></th>
          <th scope="col"><?= $this->Paginator->sort('parent_id', __('Parent')) ?></th>
          <th scope="col"><?= __('Actions') ?></th>
    </tr>
  </thead>
  <tbody>
    <?php foreach ($tags as $tag): ?>
    <tr>
        <td>
          <?php if (!empty($tag->image)) : ?>
              <div class="position-relative">
                <?= $this->element('image/icon', ['model' => $tag, 'icon' => $tag->teenyImageUrl, 'preview' => $tag->largeImageUrl]); ?>
              </div>
          <?php endif; ?>
        </td>
            <td><?= html_entity_decode($tag->title) ?></td>
            <td><?= h($tag->slug) ?></td>
            <td>
              <?php if (!empty($tag->parent_tag)) : ?>
                  <?= $this->Html->link(
                      h($tag->parent_tag->title), 
                      ['controller' => 'Tags', 'action' => 'view', $tag->parent_tag->id]
                  ); ?>
              <?php endif; ?>
            </td>
        <td>
          <?= $this->element('evd_dropdown', ['model' => $tag, 'display' => 'title']); ?>
        </td>
    </tr>
    <?php endforeach; ?>
  </tbody>
</table>
<?= $this->element('pagination', ['recordCount' => count($tags), 'search' => $search ?? '']) ?>
</div>
<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('tagSearch');
    const resultsContainer = document.querySelector('#ajax-target');

    let debounceTimer;

    searchInput.addEventListener('input', function() {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const searchTerm = this.value.trim();
            
            let url = `<?= $this->Url->build(['action' => 'index']) ?>`;

            <?php if (null !== $activeFilter): ?>
            url += `?level=<?= urlencode($activeFilter) ?>`;
            <?php endif; ?>

            if (searchTerm.length > 0) {
                url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
            }

            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.text())
            .then(html => {
                resultsContainer.innerHTML = html;
                // Re-initialize popovers after updating the content
                const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
                popoverTriggerList.map(function (popoverTriggerEl) {
                    return new bootstrap.Popover(popoverTriggerEl);
                });
            })
            .catch(error => console.error('Error:', error));

        }, 300); // Debounce for 300ms
    });

    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Tags/index.php -----

FILE: plugins/AdminTheme/templates/Admin/Tags/view.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1975 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Tag $tag
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Tag',
        'controllerName' => 'Tags',
        'entity' => $tag,
        'entityDisplayName' => $tag->title
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title"><?= h($tag->title) ?></h2>
                    <table class="table table-striped">
                        <tr>
                            <th><?= __('Title') ?></th>
                            <td><?= h($tag->title) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Slug') ?></th>
                            <td><?= h($tag->slug) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Created') ?></th>
                            <td><?= h($tag->created) ?></td>
                        </tr>
                        <tr>
                            <th><?= __('Modified') ?></th>
                            <td><?= h($tag->modified) ?></td>
                        </tr>
                    </table>

                    <div class="card mt-4">
                        <div class="card-body">
                            <h5 class="card-title"><?= __('Description') ?></h5>
                            <p class="card-text"><?= $this->Text->autoParagraph(h($tag->description)); ?></p>
                        </div>
                    </div>

                    <div class="mt-4">
                    <?= $this->element('seo_display_fields', ['model' => $tag, 'hideWordCount' => true]); ?>
                    </div>

                    <?= $this->element('related/articles', ['articles' => $tag->articles]) ?>
                </div>
            </div>
        </div>
    </div>
</div>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Tags/view.php -----

FILE: plugins/AdminTheme/templates/Admin/Tags/edit.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1421 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Tag $tag
 * @var string[]|\Cake\Collection\CollectionInterface $articles
 */
?>
<?php
    echo $this->element('actions_card', [
        'modelName' => 'Tag',
        'controllerName' => 'Tags',
        'entity' => $tag,
        'entityDisplayName' => $tag->title
    ]);
?>
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title"><?= __('Edit Tag') ?></h5>
                </div>
                <div class="card-body">
                    <?= $this->Form->create($tag, ['type' => 'file', 'class' => 'needs-validation', 'novalidate' => true, 'enctype' => 'multipart/form-data']) ?>
                    <fieldset>
                        <?= $this->element('form/tag') ?>
                        <?= $this->element('form/seo', ['hideWordCount' => true]) ?>                                              
                    </fieldset>
                    <div class="form-group">
                        <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
                    </div>
                    <?= $this->Form->end() ?>
                </div>
            </div>
        </div>
    </div>
</div>
<?= $this->element('js/semanticui/dropdown', ['selector' => '#articles-select']); ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Tags/edit.php -----

FILE: plugins/AdminTheme/templates/Admin/Tags/tree_index_search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 189 bytes
CONTENT:
<?php
    if (!empty($tags)) {
        echo $this->element('tree/tag_tree', ['tags' => $tags, 'level' => 0]);
    } else {
        echo $this->Html->tag('p', __('No tags found.'));
    }
?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Tags/tree_index_search_results.php -----

FILE: plugins/AdminTheme/templates/Admin/Tags/search_results.php
LAST MODIFIED: 2025-07-14 07:03:50
SIZE: 1588 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Tag> $tags
 */
?>
<?php use App\Utility\SettingsManager; ?>
<table class="table table-striped">
  <thead>
    <tr>
          <th><?= __('Picture') ?></th>
          <th scope="col"><?= $this->Paginator->sort('title') ?></th>
          <th scope="col"><?= $this->Paginator->sort('slug') ?></th>
          <th scope="col"><?= $this->Paginator->sort('parent_id', __('Parent')) ?></th>
          <th scope="col"><?= __('Actions') ?></th>
    </tr>
  </thead>
  <tbody>
    <?php foreach ($tags as $tag): ?>
    <tr>
        <td>
          <?php if (!empty($tag->image)) : ?>
              <div class="position-relative">
                  <?= $this->element('image/icon', ['model' => $tag, 'icon' => $tag->teenyImageUrl, 'preview' => $tag->largeImageUrl]); ?>
              </div>
          <?php endif; ?>
        </td>
            <td><?= html_entity_decode($tag->title) ?></td>
            <td><?= h($tag->slug) ?></td>
            <td>
              <?php if (!empty($tag->parent_tag)) : ?>
                  <?= $this->Html->link(
                      h($tag->parent_tag->title), 
                      ['controller' => 'Tags', 'action' => 'view', $tag->parent_tag->id]
                  ); ?>
              <?php endif; ?>
            </td>
        <td>
          <?= $this->element('evd_dropdown', ['model' => $tag, 'display' => 'title']); ?>
        </td>
    </tr>
    <?php endforeach; ?>
  </tbody>
</table>
<?= $this->element('pagination', ['recordCount' => count($tags), 'search' => $search ?? '']) ?>

// ----- END FILE: plugins/AdminTheme/templates/Admin/Tags/search_results.php -----

FILE: plugins/DefaultTheme/templates/Users/login.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 1784 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<div class="form-signin w-100 m-auto">
    <?= $this->Flash->render() ?>
    <?= $this->Form->create(null, ['class' => 'needs-validation', 'novalidate' => true]) ?>
        <h1 class="h3 mb-3 fw-normal"><?= __('Log In') ?></h1>

        <div class="form-floating">
            <?= $this->Form->input('email', [
                'type' => 'email',
                'required' => true,
                'class' => 'form-control',
                'placeholder' => 'name@example.com',
                'id' => 'floatingInput',
                'label' => false,
                'templates' => [
                    'inputContainer' => '{{content}}'
                ]
            ]) ?>
            <label for="floatingInput">Email address</label>
        </div>

        <div class="form-floating">
            <?= $this->Form->input('password', [
                'type' => 'password',
                'required' => true,
                'class' => 'form-control',
                'placeholder' => 'Password',
                'id' => 'floatingPassword',
                'label' => false,
                'templates' => [
                    'inputContainer' => '{{content}}'
                ]
            ]) ?>
            <label for="floatingPassword">Password</label>
        </div>

        <?= $this->Form->submit(__('Log In'), ['class' => 'btn btn-primary w-100 py-2', 'type' => 'submit']) ?>

        <?php if (SettingsManager::read('Users.registrationEnabled', false)) :?>      
        <div class="text-center">
            <?= $this->Html->link(__('Forgot Password?'), ['controller' => 'Users', 'action' => 'forgot-password'], ['class' => 'text-decoration-none']) ?>
        </div>
        <?php endif; ?>

    <?= $this->Form->end() ?>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/Users/login.php -----

FILE: plugins/DefaultTheme/templates/Users/reset_password.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 1806 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<div class="col-md-6 container mt-4 mb-3">
    <div class="row">
        <?= $this->Flash->render() ?>
        <?= $this->Form->create($user, ['url' => ['_name' => 'reset-password', $confirmationCode], 'class' => 'needs-validation', 'novalidate' => true]) ?>
        <h1 class="h3 mb-3 fw-normal text-center"><?= __('Reset Your Password') ?></h1>

        <fieldset>

            <div class="mb-3">
                <?php echo $this->Form->control('password',
                    [
                        'value' => '',
                        'class' => 'form-control' . ($this->Form->isFieldError('password') ? ' is-invalid' : '')
                    ]); ?>
                <?php if ($this->Form->isFieldError('password')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('password') ?>
                    </div>
                <?php endif; ?>
            </div>

            <div class="mb-3">
                <?php echo $this->Form->control('confirm_password',
                    [
                        'value' => '',
                        'type' => 'password',
                        'class' => 'form-control' . ($this->Form->isFieldError('confirm_password') ? ' is-invalid' : '')
                    ]); ?>
                <?php if ($this->Form->isFieldError('confirm_password')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('confirm_password') ?>
                    </div>
                <?php endif; ?>
            </div>

        </fieldset>
        <div class="form-group">
            <?= $this->Form->button(__('Reset Password'), ['class' => 'btn btn-primary']) ?>
        </div>
        <?= $this->Form->end() ?>
    </div>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/Users/reset_password.php -----

FILE: plugins/DefaultTheme/templates/Users/register.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 2412 bytes
CONTENT:
<div class="col-md-6 container mt-4 mb-3">
    <div class="row">
        <?= $this->Flash->render() ?>
        <?= $this->Form->create($user,
        [
            'type' => 'file',
            'enctype' => 'multipart/form-data',
            'class' => 'needs-validation', 'novalidate' => true
        ]) ?>
        <h1 class="h3 mb-3 fw-normal text-center"><?= __('Create an Account') ?></h1>

        <fieldset>

            <div class="mb-3">
                <?php echo $this->Form->control('email', ['class' => 'form-control' . ($this->Form->isFieldError('email') ? ' is-invalid' : '')]); ?>
                <?php if ($this->Form->isFieldError('email')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('email') ?>
                    </div>
                <?php endif; ?>
            </div>

            <div class="mb-3">
                <?php echo $this->Form->control('password',
                    [
                        'value' => '',
                        'class' => 'form-control' . ($this->Form->isFieldError('password') ? ' is-invalid' : '')
                    ]); ?>
                <?php if ($this->Form->isFieldError('password')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('password') ?>
                    </div>
                <?php endif; ?>
            </div>

            <div class="mb-3">
                <?php echo $this->Form->control('confirm_password',
                    [
                        'value' => '',
                        'type' => 'password',
                        'class' => 'form-control' . ($this->Form->isFieldError('confirm_password') ? ' is-invalid' : '')
                    ]); ?>
                <?php if ($this->Form->isFieldError('confirm_password')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('confirm_password') ?>
                    </div>
                <?php endif; ?>
            </div>

        </fieldset>
        <div class="form-group">
            <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
        </div>
        <?= $this->Form->end() ?>
        <p class="mt-3 text-center">
            <?= $this->Html->link("Already have an account? Login", ['action' => 'login'], ['class' => 'text-primary']) ?>
        </p>
    </div>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/Users/register.php -----

FILE: plugins/DefaultTheme/templates/Users/forgot_password.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 1197 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<div class="col-md-6 container mt-4 mb-3">
    <div class="row">
        <?= $this->Flash->render() ?>
        <?= $this->Form->create(null, ['url' => ['_name' => 'forgot-password'], 'class' => 'needs-validation', 'novalidate' => true]) ?>
        <h1 class="h3 mb-3 fw-normal text-center"><?= __('Reset your password') ?></h1>

        <fieldset>

            <div class="mb-3">
                <?php echo $this->Form->control('email', ['class' => 'form-control' . ($this->Form->isFieldError('email') ? ' is-invalid' : '')]); ?>
                <?php if ($this->Form->isFieldError('email')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('email') ?>
                    </div>
                <?php endif; ?>
            </div>

        </fieldset>
        <div class="form-group">
            <?= $this->Form->button(__('Send Reset Link'), ['class' => 'btn btn-primary']) ?>
        </div>
        <?= $this->Form->end() ?>
        <div class="text-center">
            <?= $this->Html->link(__('Back to Login'), ['action' => 'login'], ['class' => 'text-muted']) ?>
        </div>
    </div>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/Users/forgot_password.php -----

FILE: plugins/DefaultTheme/templates/Users/edit.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 4126 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<div class="col-md-6 container mt-4 mb-3">
    <div class="row">
        <?= $this->Flash->render() ?>
        <?= $this->Form->create($user,
        [
            'type' => 'file',
            'enctype' => 'multipart/form-data',
            'class' => 'needs-validation', 'novalidate' => true
        ]) ?>
        <h1 class="h3 mb-3 fw-normal text-center"><?= __('Edit your Account') ?></h1>

        <fieldset>

            <div class="mb-3">
                <?php echo $this->Form->control('email', ['class' => 'form-control' . ($this->Form->isFieldError('email') ? ' is-invalid' : '')]); ?>
                <?php if ($this->Form->isFieldError('email')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('email') ?>
                    </div>
                <?php endif; ?>
            </div>

            <div class="mb-3">
                <?php echo $this->Form->control('username', ['class' => 'form-control' . ($this->Form->isFieldError('username') ? ' is-invalid' : '')]); ?>
                <?php if ($this->Form->isFieldError('username')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('username') ?>
                    </div>
                <?php endif; ?>
            </div>

            <div class="mb-3">
                <?php echo $this->Form->control('password',
                    [
                        'value' => '',
                        'class' => 'form-control' . ($this->Form->isFieldError('password') ? ' is-invalid' : '')
                    ]); ?>
                <?php if ($this->Form->isFieldError('password')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('password') ?>
                    </div>
                <?php endif; ?>
            </div>

            <div class="mb-3">
                <?php echo $this->Form->control('confirm_password',
                    [
                        'value' => '',
                        'type' => 'password',
                        'class' => 'form-control' . ($this->Form->isFieldError('confirm_password') ? ' is-invalid' : '')
                    ]); ?>
                <?php if ($this->Form->isFieldError('confirm_password')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('confirm_password') ?>
                    </div>
                <?php endif; ?>
            </div>

            <?php if (!empty($user->image)): ?>
                <div class="mb-3">
                    <?= $this->element('image/icon', ['model' => $user, 'icon' => $user->teenyImageUrl, 'preview' => $user->extraLargeImageUrl]); ?>
                </div>
            <?php endif; ?>

            <div class="mb-3">
                <?= $this->Form->control('image', [
                    'type' => 'file',
                    'label' => [
                        'text' => __('Image'),
                        'class' => 'form-label'
                    ],
                    'class' => 'form-control' . ($this->Form->isFieldError('image') ? ' is-invalid' : ''),
                    'id' => 'customFile'
                ]) ?>
                <?php if ($this->Form->isFieldError('image')): ?>
                    <div class="invalid-feedback">
                        <?= $this->Form->error('image') ?>
                    </div>
                <?php endif; ?>
            </div>

        </fieldset>
        <div class="form-group">
            <?= $this->Form->button(__('Submit'), ['class' => 'btn btn-primary']) ?>
        </div>
        <?= $this->Form->end() ?>
    </div>
</div>
<?php $this->Html->scriptStart(['block' => true]); ?>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize popovers on page load
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
});
<?php $this->Html->scriptEnd(); ?>

// ----- END FILE: plugins/DefaultTheme/templates/Users/edit.php -----

FILE: plugins/DefaultTheme/templates/CookieConsents/edit.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 7203 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\CookieConsent $cookieConsent
 */
?>
<?php if (!$this->request->is('ajax')) :?>
<div class="row justify-content-center">
    <div class="col-md-9">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title"><?= __('Cookie Preferences') ?></h5>
            </div>
            <div class="card-body">
<?php endif; ?>

                <?= $this->Form->create($cookieConsent, [
                    'class' => 'needs-validation',
                    'novalidate' => true
                ]) ?>
                <fieldset>
                    <p class="mb-4"><?= __('Please select your cookie preferences below. Essential cookies are required for the website to function and cannot be disabled.') ?></p>
                    <?php if (!empty($sitePrivacyPolicy)) : ?>
                    <p>
                        <?= __(
                            'To understand how we handle your personal information, including the use of cookies and other tracking technologies, please review our {0}.',
                            $this->Html->link(
                                __('Privacy Policy'),
                                [
                                    '_name' => 'page-by-slug',
                                    'slug' => $sitePrivacyPolicy['slug']
                                ]
                            )
                        ); ?>
                    </p>
                    <?php endif; ?>
                    <div class="mb-3">
                        <div class="form-check">
                            <?= $this->Form->checkbox('essential_consent', [
                                'class' => 'form-check-input' . ($this->Form->isFieldError('essential_consent') ? ' is-invalid' : ''),
                                'disabled' => true,
                                'checked' => true
                            ]) ?>
                            <label class="form-check-label" for="essential-consent">
                                <?= __('Essential Cookies') ?>
                            </label>
                            <div class="form-text">
                                <?= __('Required for the website to function properly. These cannot be disabled.') ?>
                            </div>
                            <?php if ($this->Form->isFieldError('essential_consent')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('essential_consent') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <?= $this->Form->checkbox('functional_consent', [
                                'class' => 'form-check-input' . ($this->Form->isFieldError('functional_consent') ? ' is-invalid' : '')
                            ]) ?>
                            <label class="form-check-label" for="functional-consent">
                                <?= __('Functional Cookies') ?>
                            </label>
                            <div class="form-text">
                                <?= __('Enable enhanced functionality and personalization.') ?>
                            </div>
                            <?php if ($this->Form->isFieldError('functional_consent')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('functional_consent') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <?= $this->Form->checkbox('analytics_consent', [
                                'class' => 'form-check-input' . ($this->Form->isFieldError('analytics_consent') ? ' is-invalid' : '')
                            ]) ?>
                            <label class="form-check-label" for="analytics-consent">
                                <?= __('Analytics Cookies') ?>
                            </label>
                            <div class="form-text">
                                <?= __('Help us understand how visitors interact with our website.') ?>
                            </div>
                            <?php if ($this->Form->isFieldError('analytics_consent')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('analytics_consent') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="form-check">
                            <?= $this->Form->checkbox('marketing_consent', [
                                'class' => 'form-check-input' . ($this->Form->isFieldError('marketing_consent') ? ' is-invalid' : '')
                            ]) ?>
                            <label class="form-check-label" for="marketing-consent">
                                <?= __('Marketing Cookies') ?>
                            </label>
                            <div class="form-text">
                                <?= __('Used to deliver personalized advertisements and enable the facebook share button.') ?>
                            </div>
                            <?php if ($this->Form->isFieldError('marketing_consent')): ?>
                                <div class="invalid-feedback">
                                    <?= $this->Form->error('marketing_consent') ?>
                                </div>
                            <?php endif; ?>
                        </div>
                    </div>
                </fieldset>
                <div class="form-group">
                    <?= $this->Form->button(__('Essential'), [
                        'class' => 'btn btn-secondary my-1 me-1',
                        'name' => 'consent_type',
                        'value' => 'essential',
                        'data-consent-type' => 'essential',
                        ]) ?>
                    <?= $this->Form->button(__('Selected'), [
                        'class' => 'btn btn-secondary my-1 me-1',
                        'name' => 'consent_type',
                        'value' => 'selected',
                        'data-consent-type' => 'selected',
                        ]) ?>
                    <?= $this->Form->button(__('All'), [
                        'class' => 'btn btn-primary my-1 me-1',
                        'name' => 'consent_type',
                        'value' => 'all',
                        'data-consent-type' => 'all',
                        ]) ?>
                </div>
                <?= $this->Form->end() ?>
                
<?php if (!$this->request->is('ajax')) :?>
            </div>
        </div>
    </div>
</div>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/CookieConsents/edit.php -----

FILE: plugins/DefaultTheme/templates/element/image/icon.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 994 bytes
CONTENT:
<?php
// Handle null or empty icon values by falling back to original image URL
$imageUrl = $icon ?? ($model->image ?? null);

if (!empty($model->image) && $imageUrl): ?>
    <?php 
    // Base image options
    $imageOptions = [
        'pathPrefix' => '', 
        'alt' => $model->alt_text ?? '', 
        'class' => 'img-thumbnail'
    ];
    
    // Only add popover options if preview is provided
    if (isset($preview) && $preview !== false) {
        $imageOptions = array_merge($imageOptions, [
            'data-bs-toggle' => 'popover',
            'data-bs-trigger' => 'hover',
            'data-bs-html' => 'true',
            'data-bs-content' => $this->Html->image(
                $preview, 
                [
                    'pathPrefix' => '', 
                    'alt' => $model->alt_text ?? '', 
                    'class' => 'img-fluid', 
                ]
            )
        ]);
    }
    ?>
    <?= $this->Html->image($imageUrl, $imageOptions) ?>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/image/icon.php -----

FILE: plugins/DefaultTheme/templates/element/image_carousel.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 1379 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php
/**
 * @var \App\View\AppView $this
 * @var array $images
 * @var string $carouselId
 */
?>
<?php if (!empty($images)): ?>
<div class="col-md-6 mb-4">
<h4><?= __('Images') ?></h4>
<div id="<?= $carouselId ?>" class="carousel slide" data-bs-ride="carousel">
    <div class="carousel-inner">
        <?php foreach ($images as $index => $image): ?>
            <div class="carousel-item <?= $index === 0 ? 'active' : '' ?>">
                <?= $this->Html->image(SettingsManager::read('ImageSizes.medium', '200') . '/' . $image->image, 
                [
                    'pathPrefix' => 'files/Images/image/',
                    'class' => 'd-block w-100',
                    'alt' => $image->alt_text,
                ]) ?>
            </div>
        <?php endforeach; ?>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#<?= $carouselId ?>" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#<?= $carouselId ?>" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>
</div>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/image_carousel.php -----

FILE: plugins/DefaultTheme/templates/element/site/footer.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 630 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<footer class="py-5 text-center text-body-secondary bg-body-tertiary">
    <p>&copy; <?= date('Y') ?> <?= SettingsManager::read('SEO.siteName', 'Willow CMS') ?>. <?= __('All rights reserved.') ?></p>
    <?php if (!empty($sitePrivacyPolicy)) : ?>
    <p class="mb-0">
        <?= $this->Html->link(
            __('Privacy Policy'),
            [
                '_name' => 'page-by-slug',
                'slug' => $sitePrivacyPolicy['slug']
            ]
        ); ?>
    </p>
    <?php endif; ?>
    <p class="mb-0">
        <a href="#"><?= __('Back to top') ?></a>
    </p>
</footer>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/footer.php -----

FILE: plugins/DefaultTheme/templates/element/site/site_language.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 1310 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var array $tags
 * @var string|null $selectedSiteLanguage
 */
?>
<?php
$currentParams = $this->request->getAttribute('params');
unset($currentParams['_matchedRoute']);
unset($currentParams['pass']);
?>
<?php if (!empty($languages)): ?>
    <?php $currentParams['lang'] = 'en'; ?>
    <ul class="navbar-nav me-3">
        <li class="nav-item dropdown">
        <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false"><?= __('Language') ?></a>
        <ul class="dropdown-menu">
            <li>
                <?= $this->Html->link(
                __('English'),
                $currentParams,
                [
                    'class' => 'dropdown-item' . ($selectedSiteLanguage === 'en' ? ' active' : '')
                ]) ?>
            </li>
            <?php foreach ($languages as $code => $name): ?>
                <?php $currentParams['lang'] = $code; ?>
                <li>
                <?= $this->Html->link(
                    h($name),
                    $currentParams,
                    ['class' => 'dropdown-item' . ($selectedSiteLanguage == $code ? ' active' : '')]
                ) ?>
                </li>
            <?php endforeach; ?>
        </ul>
        </li>
    </ul>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/site_language.php -----

FILE: plugins/DefaultTheme/templates/element/site/header.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 1031 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<header class="border-bottom lh-1 py-3">
  <div class="row flex-nowrap justify-content-between align-items-center">
    <div class="col-6 col-md-4 pt-1">
      <?= $this->element('site/site_language', ['languages' => $siteLanguages, 'selectedSiteLanguage' => $selectedSiteLanguage]) ?>
    </div>
    <div class="d-none d-md-flex col-4 text-center">
      <a class="blog-header-logo text-body-emphasis text-decoration-none mx-auto" href="<?= $this->Url->build(['_name' => 'home']) ?>"><?= SettingsManager::read('SEO.siteName', 'Willow CMS') ?></a>
    </div>
    <div class="col-6 col-md-4 d-flex justify-content-end align-items-center">
        <?= $this->element('site/user_actions') ?>
    </div>
  </div>
  
  <!-- Mobile site name -->
  <div class="d-md-none text-center mt-2">
    <a class="blog-header-logo text-body-emphasis text-decoration-none" href="<?= $this->Url->build(['_name' => 'home']) ?>"><?= SettingsManager::read('SEO.siteName', 'Willow CMS') ?></a>
  </div>
</header>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/header.php -----

FILE: plugins/DefaultTheme/templates/element/site/user_actions.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 2422 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>

<?php if ($this->Identity->isLoggedIn()): ?>
<div class="flex-shrink-0 dropdown ms-auto">
    <a href="#" class="d-block link-body-emphasis text-decoration-none dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
        <?php if (isset($profilePic)) : ?>
            <?= $this->Html->image($profilePic, 
            [
                'pathPrefix' => '', 
                'class' => 'rounded-circle',
                'width' => '32',
                'height' => '32',

            ])?>
        <?php else: ?>
            <img src="/img/willow-icon.png" width="32" height="32" class="rounded-circle">
        <?php endif; ?>
    </a>
    <ul class="dropdown-menu dropdown-menu-end text-small shadow">
        <li>
            <?php if ($this->Identity->get('is_admin')): ?>
                <?= $this->Html->link(__('Admin'), ['prefix' => 'Admin', 'controller' => 'Articles', 'action' => 'index'], ['class' => 'dropdown-item']) ?>
            <?php endif; ?>
        </li>
        <li>
            <?= $this->Html->link(__('My Account'), ['controller' => 'Users', 'action' => 'edit', $this->Identity->get('id')], ['class' => 'dropdown-item']) ?>
        </li>
        <li>
            <?= $this->Html->link(__('Cookies'), ['_name' => 'cookie-consent'], ['class' => 'dropdown-item']) ?>
        </li>
        <li><hr class="dropdown-divider"></li>
        <li>
            <?= $this->Html->link(__('Logout'), ['controller' => 'Users', 'action' => 'logout'], ['class' => 'dropdown-item']) ?>
        </li>
    </ul>
</div>

<?php else: ?>

<ul class="navbar-nav me-3">
    <li class="nav-item dropdown">
    <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false"><?= __('Account') ?></a>
    <ul class="dropdown-menu">
        <li>
            <?= $this->Html->link(__('Log In'), ['controller' => 'Users', 'action' => 'login'], ['class' => 'dropdown-item']) ?>
        </li>
        <li>
            <?= $this->Html->link(__('Cookies'), ['_name' => 'cookie-consent'], ['class' => 'dropdown-item']) ?>
        </li>
        <li>
            <?php if (SettingsManager::read('Users.registrationEnabled', false)) :?>
            <?= $this->Html->link(__('Register'), ['controller' => 'Users', 'action' => 'register'], ['class' => 'dropdown-item']) ?>
            <?php endif; ?>
        </li>
    </ul>
    </li>
</ul>

<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/user_actions.php -----

FILE: plugins/DefaultTheme/templates/element/site/articles_list.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 2033 bytes
CONTENT:
<?php if (!empty($articles)) : ?>
<div class="sidebar-section mb-4">
    <h4 class="fst-italic border-bottom pb-2 mb-3"><?= $title ?></h4>
    <div class="sidebar-articles-list">
    <?php foreach ($articles as $article) : ?>
        <article class="sidebar-article-item mb-3">
            <a class="text-decoration-none" href="<?= $this->Url->build(['_name' => $article->kind . '-by-slug', 'slug' => $article->slug]) ?>" aria-label="<?= h($article->title) ?>">
                <h6 class="sidebar-article-title mb-2 text-body-emphasis"><?= htmlspecialchars_decode($article->title) ?></h6>
            </a>
            
            <div class="sidebar-wrap-container">
                <?php if (!empty($article->image)) : ?>
                <div class="sidebar-image-container">
                    <a href="<?= $this->Url->build(['_name' => $article->kind . '-by-slug', 'slug' => $article->slug]) ?>">
                        <?= $this->element('image/icon', [
                            'model' => $article, 
                            'icon' => $article->tinyImageUrl, 
                            'preview' => false,
                            'class' => 'sidebar-wrap-image'
                        ]); ?>
                    </a>
                </div>
                <?php endif; ?>
                
                <div class="sidebar-text-wrap">
                    <?php if (!empty($article->lede)): ?>
                    <p class="sidebar-article-summary mb-1 text-body-secondary small"><?= $this->Text->truncate(strip_tags($article->lede), 80) ?></p>
                    <?php endif; ?>
                    
                    <small class="sidebar-article-meta text-body-tertiary d-block"><?= $article->published->format('M j, Y') ?></small>
                </div>
            </div>
            
            <?php if ($article !== end($articles)): ?>
            <hr class="sidebar-article-separator my-2" />
            <?php endif; ?>
        </article>
    <?php endforeach; ?>
    </div>
</div>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/articles_list.php -----

FILE: plugins/DefaultTheme/templates/element/site/archives.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 2243 bytes
CONTENT:
<?php if (!empty($articleArchives)) : ?>
<div class="p-4">
    <h4 class="fst-italic"><?= __('Archives') ?></h4>
    <ol class="list-unstyled mb-0">
        <?php foreach ($articleArchives as $year => $months): ?>
            <li>
                <?php
                $isYearActive = ($this->request->getQuery('year') == $year);

                echo $this->Html->link(
                    $year,
                    [
                        'lang' => $this->request->getParam('lang'),
                        '_name' => 'home',
                        '?' => ['year' => $year],
                    ],
                    [
                        'class' => $isYearActive 
                            ? 'fw-bold text-decoration-none' 
                            : 'text-decoration-none',
                    ]
                );
                ?>
                <ol class="list-unstyled ms-3">
                    <?php foreach ($months as $month): ?>
                    <li>
                        <?php
                        $isActive = (
                            $this->request->getQuery('year') == $year &&
                            $this->request->getQuery('month') == $month
                        );
                        echo $this->Html->link(
                            DateTime::createFromFormat('!m', $month)->format('F'),
                            [
                                'lang' => $this->request->getParam('lang'),
                                '_name' => 'home',
                                '?' => 
                                    [
                                        'year' => $year, 
                                        'month' => $month,
                                    ]
                            ],
                            [
                                'class' => $isActive 
                                    ? 'fw-bold text-decoration-none' 
                                    : 'text-decoration-none',
                            ]
                        );
                        ?>
                    </li>
                    <?php endforeach; ?>
                </ol>
            </li>
        <?php endforeach; ?>
    </ol>
</div>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/archives.php -----

FILE: plugins/DefaultTheme/templates/element/site/tags.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 718 bytes
CONTENT:
<div class="nav-scroller py-1 mb-3 border-bottom">
    <nav class="nav nav-underline justify-content-between">
    <?= $this->Html->link(
    __('All'),
    [
        '_name' => 'home',
    ],
    [
        'class' => 'nav-item nav-link link-body-emphasis' . (!$selectedTagId ? ' active' : '')
    ]) ?>
    <?php foreach ($rootTags as $rootTag) : ?>
        <?= $this->Html->link(
            htmlspecialchars_decode($rootTag->title),
            [
                '_name' => 'home',
                '?' => ['tag' => $rootTag->id]
            ],
            ['class' => 'nav-item nav-link link-body-emphasis' . ($selectedTagId == $rootTag->id ? ' active' : '')]
        ) ?>
    <?php endforeach; ?>
    </nav>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/tags.php -----

FILE: plugins/DefaultTheme/templates/element/site/cookie_prefs.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 426 bytes
CONTENT:
<?php use Cake\Routing\Router; ?>
<?php if (!isset($consentData)): ?>
<script>
document.addEventListener('DOMContentLoaded', function() {
    WillowModal.show('<?= Router::url(['_name' => 'cookie-consent']) ?>', {
        title: '<?= __('Cookie Preferences') ?>',
        static: true,
        closeable: true,
        reload: true,
        dialogClass: 'modal-dialog-scrollable modal-lg'
    });
});
</script>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/cookie_prefs.php -----

FILE: plugins/DefaultTheme/templates/element/site/feeds.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 629 bytes
CONTENT:
<?php use Cake\Routing\Router; ?>
<div class="p-4">
    <h4 class="fst-italic"><?= __('Feeds') ?></h4>
    <ol class="list-unstyled">
        <li>
            <?= $this->Html->link(
                '<i class="bi bi-rss"></i> ' . __('RSS Feed'),
                Router::url(['_name' => 'rss', 'lang' => $this->request->getParam('lang', 'en')], true),
                [
                    'target' => '_blank',
                    'rel' => 'noopener noreferrer',
                    'title' => __('Latest Articles RSS Feed'),
                    'escape' => false
                ]
            ); ?>
        </li>
    </ol>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/feeds.php -----

FILE: plugins/DefaultTheme/templates/element/site/facebook/sdk.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 148 bytes
CONTENT:
<div id="fb-root"></div>
<script async defer crossorigin="anonymous" src="https://connect.facebook.net/en_GB/sdk.js#xfbml=1&version=v21.0"></script>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/facebook/sdk.php -----

FILE: plugins/DefaultTheme/templates/element/site/facebook/share_button.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 592 bytes
CONTENT:
<?php if (!empty($consentData) && $consentData['marketing_consent']) :?>
    <?php 
    $url = $this->Url->build(
        ['_name' => $article->kind . '-by-slug', 'slug' => $article->slug],
        ['fullBase' => true]
    );
    $encodedUrl = urlencode($url) . ';src=sdkpreparse';
    ?>
    <div class="fb-share-button" data-href="<?= $url ?>" data-layout="" data-size="">
        <a target="_blank" 
        href="https://www.facebook.com/sharer/sharer.php?u=<?= $encodedUrl ?>" 
        class="fb-xfbml-parse-ignore">
            <?= __('Share') ?>
        </a>
    </div>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/facebook/share_button.php -----

FILE: plugins/DefaultTheme/templates/element/site/youtube_embed.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 888 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var string $videoId
 * @var string $width
 * @var string $height
 * @var string $title
 * @var string $thumbnailUrl
 */
?>
<div class="youtube-embed" data-video-id="<?= h($videoId) ?>" data-title="<?= h($title) ?>">
    <div class="youtube-placeholder">
        <img src="<?= h($thumbnailUrl) ?>" 
             alt="<?= h($title) ?>"
             class="youtube-thumbnail">
        <div class="youtube-consent-overlay">
            <p class="mb-3"><?= __('This content is hosted by YouTube. By showing the external content you accept the privacy policy of YouTube.') ?></p>
            <button class="btn btn-primary youtube-consent-btn" 
                    data-video-id="<?= h($videoId) ?>"
                    onclick="loadYouTubeVideo(this)">
                <?= __('Load video') ?>
            </button>
        </div>
    </div>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/youtube_embed.php -----

FILE: plugins/DefaultTheme/templates/element/site/meta_tags.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 2313 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php if (isset($model)): ?>
    <title><?= h($model->meta_title ?: $model->title) ?></title>
    <meta name="description" content="<?= h($model->meta_description ?: substr(strip_tags($model->description ?? $model->body ?? ''), 0, 160)) ?>">
    <meta name="keywords" content="<?= h($model->meta_keywords) ?>">

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="article">
    <meta property="og:url" content="<?= $this->Url->build('/' . $model->slug, ['fullBase' => true]) ?>">
    <meta property="og:title" content="<?= h($model->meta_title ?: $model->title) ?>">
    <meta property="og:description" content="<?= h($model->facebook_description ?: $model->meta_description) ?>">
    <meta property="og:image" content="<?= !empty($model->image_url) ? $this->Url->build($model->image_url, ['fullBase' => true]) : '' ?>">
    <meta property="article:published_time" content="<?= isset($model->published) ? $model->published->format('c') : $model->modified->format('c') ?>">
    <meta property="article:modified_time" content="<?= $model->modified->format('c') ?>">
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:url" content="<?= $this->Url->build('/' . $model->slug, ['fullBase' => true]) ?>">
    <meta name="twitter:title" content="<?= h($model->meta_title ?: $model->title) ?>">
    <meta name="twitter:description" content="<?= h($model->twitter_description ?: $model->meta_description) ?>">
    
    <!-- LinkedIn -->
    <meta name="linkedin:title" content="<?= h($model->meta_title ?: $model->title) ?>">
    <meta name="linkedin:description" content="<?= h($model->linkedin_description ?: $model->meta_description) ?>">
    
    <!-- Instagram -->
    <meta name="instagram:title" content="<?= h($model->meta_title ?: $model->title) ?>">
    <meta name="instagram:description" content="<?= h($model->instagram_description ?: $model->meta_description) ?>">
<?php else: ?>
    <title><?= SettingsManager::read('SEO.siteStrapline') ?></title>
    <meta name="description" content="<?= SettingsManager::read('SEO.siteMetaDescription', 'Meta Description') ?>">
    <meta name="keywords" content="<?= SettingsManager::read('SEO.siteMetakeywords', 'Meta Keywords') ?>">
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/meta_tags.php -----

FILE: plugins/DefaultTheme/templates/element/site/elsewhere.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 202 bytes
CONTENT:
<div class="p-4">
    <h4 class="fst-italic"><?= __('Elsewhere') ?></h4>
    <ol class="list-unstyled">
        <li><a href="https://www.github.com/matthewdeaves/willow">GitHub</a></li>
    </ol>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/elsewhere.php -----

FILE: plugins/DefaultTheme/templates/element/site/crumbs.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 835 bytes
CONTENT:
<?php $currentUrl = $this->request->getPath(); ?>
<?php if (!empty($crumbs) && count($crumbs) >1 ) : ?>
<div class="border-bottom mb-3">
    <nav class="breadcrumb">
        <ol class="breadcrumb breadcrumb-chevron">
        <?php foreach ($crumbs as $crumb) : ?>
            <?php $url = $this->Html->Url->build(['_name' => 'page-by-slug', 'slug' => $crumb->slug]); ?>
            <li class="breadcrumb-item">
                <?php
                echo $this->Html->link(
                    $crumb->title,
                    $url,
                    [
                        'class' => 'link-body-emphasis text-decoration-none' . (($currentUrl == $url) ? ' fw-semibold' : '')
                    ]
                );
                ?>
            </li>
        <?php endforeach; ?>
        </ol>
    </nav>
</div>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/crumbs.php -----

FILE: plugins/DefaultTheme/templates/element/site/main_menu.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 1453 bytes
CONTENT:
<?php $mbAmount = $mbAmount ?? 0; ?>
<?php $currentUrl = $this->request->getPath(); ?>

<div class="nav-scroller py-1 mb-<?= $mbAmount ?> border-bottom">
    <nav class="nav nav-underline justify-content-center" role="navigation" aria-label="<?= __('Main navigation') ?>">

        <?php $url = $this->Html->Url->build(['_name' => 'home']); ?>
        <?= $this->Html->link(__('Blog'), $url, [
            'class' => 'nav-item nav-link link-body-emphasis fw-medium px-3' . (($currentUrl == $url) ? ' active' : ''),
            'aria-current' => ($currentUrl == $url) ? 'page' : false
        ]) ?>

        <?php foreach ($menuPages as $menuPage) : ?>
            <?php $url = $this->Html->Url->build(['_name' => 'page-by-slug', 'slug' => $menuPage['slug']]); ?>
            <?=
                $this->Html->link(
                    htmlspecialchars_decode($menuPage['title']),
                    $url,
                    [
                        'class' => 'nav-item nav-link link-body-emphasis fw-medium px-3' . (($currentUrl == $url) ? ' active' : ''),
                        'escape' => false,
                        'aria-current' => ($currentUrl == $url) ? 'page' : false
                    ]
                );
            ?>
        <?php endforeach ?>
        <a class="nav-item nav-link link-body-emphasis fw-medium px-3" 
           href="https://www.github.com/matthewdeaves/willow">
           GitHub
        </a>
    </nav>
</div>



// ----- END FILE: plugins/DefaultTheme/templates/element/site/main_menu.php -----

FILE: plugins/DefaultTheme/templates/element/site/bootstrap.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 5183 bytes
CONTENT:
<svg xmlns="http://www.w3.org/2000/svg" class="d-none">
    <symbol id="check2" viewBox="0 0 16 16">
    <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
    </symbol>
    <symbol id="circle-half" viewBox="0 0 16 16">
    <path d="M8 15A7 7 0 1 0 8 1v14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16z"/>
    </symbol>
    <symbol id="moon-stars-fill" viewBox="0 0 16 16">
    <path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z"/>
    <path d="M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.734 1.734 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.734 1.734 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.734 1.734 0 0 0 1.097-1.097l.387-1.162zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.156 1.156 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.156 1.156 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732L13.863.1z"/>
    </symbol>
    <symbol id="sun-fill" viewBox="0 0 16 16">
    <path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"/>
    </symbol>
</svg>

<!-- Skip navigation link for accessibility -->
<a class="visually-hidden-focusable btn btn-primary position-absolute top-0 start-0 m-3" href="#main-content">
    <?= __('Skip to main content') ?>
</a>

<div class="dropdown position-fixed bottom-0 end-0 mb-3 me-3 bd-mode-toggle">
    <button class="btn btn-bd-primary py-2 dropdown-toggle d-flex align-items-center"
            id="bd-theme"
            type="button"
            aria-expanded="false"
            data-bs-toggle="dropdown"
            aria-label="<?= __('Toggle theme (auto)') ?>">
    <svg class="bi my-1 theme-icon-active" width="1em" height="1em" aria-hidden="true"><use href="#circle-half"></use></svg>
    <span class="visually-hidden" id="bd-theme-text"><?= __('Toggle theme') ?></span>
    </button>
    <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="bd-theme-text">
    <li>
        <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="light" aria-pressed="false">
        <svg class="bi me-2 opacity-50" width="1em" height="1em"><use href="#sun-fill"></use></svg>
        <?= __('Light') ?>
        <svg class="bi ms-auto d-none" width="1em" height="1em"><use href="#check2"></use></svg>
        </button>
    </li>
    <li>
        <button type="button" class="dropdown-item d-flex align-items-center" data-bs-theme-value="dark" aria-pressed="false">
        <svg class="bi me-2 opacity-50" width="1em" height="1em"><use href="#moon-stars-fill"></use></svg>
        <?= __('Dark') ?>
        <svg class="bi ms-auto d-none" width="1em" height="1em"><use href="#check2"></use></svg>
        </button>
    </li>
    <li>
        <button type="button" class="dropdown-item d-flex align-items-center active" data-bs-theme-value="auto" aria-pressed="true">
        <svg class="bi me-2 opacity-50" width="1em" height="1em"><use href="#circle-half"></use></svg>
        <?= __('Auto') ?>
        <svg class="bi ms-auto d-none" width="1em" height="1em"><use href="#check2"></use></svg>
        </button>
    </li>
    </ul>
</div>

<svg xmlns="http://www.w3.org/2000/svg" class="d-none">
  <symbol id="aperture" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24">
    <circle cx="12" cy="12" r="10"/>
    <path d="M14.31 8l5.74 9.94M9.69 8h11.48M7.38 12l5.74-9.94M9.69 16L3.95 6.06M14.31 16H2.83m13.79-4l-5.74 9.94"/>
  </symbol>
  <symbol id="cart" viewBox="0 0 16 16">
    <path d="M0 1.5A.5.5 0 0 1 .5 1H2a.5.5 0 0 1 .485.379L2.89 3H14.5a.5.5 0 0 1 .49.598l-1 5a.5.5 0 0 1-.465.401l-9.397.472L4.415 11H13a.5.5 0 0 1 0 1H4a.5.5 0 0 1-.491-.408L2.01 3.607 1.61 2H.5a.5.5 0 0 1-.5-.5zM3.102 4l.84 4.479 9.144-.459L13.89 4H3.102zM5 12a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm7 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-7 1a1 1 0 1 1 0 2 1 1 0 0 1 0-2zm7 0a1 1 0 1 1 0 2 1 1 0 0 1 0-2z"/>
  </symbol>
  <symbol id="chevron-right" viewBox="0 0 16 16">
    <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
  </symbol>
</svg>

// ----- END FILE: plugins/DefaultTheme/templates/element/site/bootstrap.php -----

FILE: plugins/DefaultTheme/templates/element/article/tags.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 517 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Article $article
 */
?>
<h4 class="fst-italic"><?= __('Tags') ?></h4>
<?php if (!empty($article->tags)) : ?>
    <?php foreach ($article->tags as $tag) : ?>
        <?= $this->Html->link(
            htmlspecialchars_decode($tag->title),
            [
                '_name' => 'home',
                '?' => ['tag' => $tag->id],
            ],
            ['class' => 'btn btn-outline btn-sm']
        ) ?>
    <?php endforeach; ?>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/article/tags.php -----

FILE: plugins/DefaultTheme/templates/element/pagination.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 2376 bytes
CONTENT:
<?php
$this->Paginator->setTemplates([
    'nextActive' => '<li class="page-item"><a class="page-link" rel="next" aria-label="Next" href="{{url}}">&raquo;</a></li>',
    'nextDisabled' => '<li class="page-item disabled"><a class="page-link" aria-label="Next" href="" onclick="return false;">&raquo;</a></li>',
    'prevActive' => '<li class="page-item"><a class="page-link" rel="prev" aria-label="Previous" href="{{url}}">&laquo;</a></li>',
    'prevDisabled' => '<li class="page-item disabled"><a class="page-link" aria-label="Previous" href="" onclick="return false;">&laquo;</a></li>',
    'number' => '<li class="page-item"><a class="page-link" href="{{url}}">{{text}}</a></li>',
    'current' => '<li class="page-item active"><a class="page-link" href="">{{text}}</a></li>',
    'counterRange' => __('Page {{page}} of {{pages}}, showing {{current}} record(s) out of {{count}} total'),
    'counterPages' => __('Page {{page}} of {{pages}}'),
]);

$this->Paginator->options([
    'url' => [
        'lang' => $this->request->getParam('lang'),
        '_name' => 'home',
        '?' => array_filter([
            'tag' => $this->request->getQuery('tag'),
            'year' => $this->request->getQuery('year'),
            'month' => $this->request->getQuery('month'),
        ])
    ]
]);
?>
<?php if ($this->Paginator->total() > 1): ?>
<div class="pagination-wrapper my-5">
    <nav aria-label="<?= __('Article pagination') ?>" class="d-flex justify-content-center">
        <ul class="pagination pagination-lg shadow-sm">
            <?= $this->Paginator->prev('&laquo;', [
                'escape' => false,
                'class' => 'page-link',
                'title' => __('Previous page')
            ]) ?>
            <?= $this->Paginator->numbers([
                'class' => 'page-link'
            ]) ?>
            <?= $this->Paginator->next('&raquo;', [
                'escape' => false,
                'class' => 'page-link',
                'title' => __('Next page')
            ]) ?>
        </ul>
    </nav>
    
    <?php if ($this->Paginator->total() > 0): ?>
    <div class="pagination-info text-center mt-3">
        <small class="text-muted">
            <?= $this->Paginator->counter(__('Page {{page}} of {{pages}}, showing {{current}} record(s) out of {{count}} total')) ?>
        </small>
    </div>
    <?php endif; ?>
</div>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/element/pagination.php -----

FILE: plugins/DefaultTheme/templates/element/flash/success.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 201 bytes
CONTENT:
<div class="alert alert-success alert-dismissible fade show" role="alert">
    <?= h($message) ?>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/element/flash/success.php -----

FILE: plugins/DefaultTheme/templates/element/flash/error.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 200 bytes
CONTENT:
<div class="alert alert-danger alert-dismissible fade show" role="alert">
    <?= h($message) ?>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/element/flash/error.php -----

FILE: plugins/DefaultTheme/templates/element/flash/default.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 220 bytes
CONTENT:
<div class="alert alert-info alert-dismissible fade show" role="alert">
    <?= htmlspecialchars_decode($message) ?>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/element/flash/default.php -----

FILE: plugins/DefaultTheme/templates/Articles/index.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 2877 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Article> $articles
 * @var array $tags
 * @var string|null $selectedTag
 */
?>
<?php foreach ($articles as $article): ?>
<article class="article-list-item mb-4">
    <a class="text-decoration-none" href="<?= $this->Url->build(['_name' => $article->kind . '-by-slug', 'slug' => $article->slug]) ?>">
        <h2 class="article-title h4 link-body-emphasis mb-2"><?= htmlspecialchars_decode($article->title) ?></h2>
    </a>
    
    <div class="article-meta mb-3">
        <span class="date"><?= $article->published->format('F j, Y') ?></span> • 
        <span class="author"><?= h($article->user->username) ?></span>
    </div>
    
    <?php $displayMode = SettingsManager::read('Blog.articleDisplayMode', 'summary') ?>
    <div class="article-wrap-container">
        <?php if (!empty($article->image)): ?>
        <div class="article-image-container">
            <a href="<?= $this->Url->build(['_name' => $article->kind . '-by-slug', 'slug' => $article->slug]) ?>">
                <?= $this->element('image/icon', [
                    'model' => $article, 
                    'icon' => $article->extraLargeImageUrl, 
                    'preview' => false,
                    'class' => 'article-wrap-image'
                ]); ?>
            </a>
        </div>
        <?php endif; ?>
        <div class="article-text-wrap">
            <?php if ($displayMode == 'lede') : ?>
                <p><?= htmlspecialchars_decode($article->lede) ?></p>
            <?php elseif ($displayMode == 'summary') : ?>
                <p><?= htmlspecialchars_decode($article->summary) ?></p>
            <?php elseif ($displayMode == 'body') : ?>
                <div><?php
                    $content = $article->body;
                    $content = $this->Video->processVideoPlaceholders($content);
                    $content = $this->Gallery->processGalleryPlaceholders($content);
                    echo htmlspecialchars_decode($content);
                ?></div>
            <?php endif; ?>
            <div class="read-more-container">
                <a href="<?= $this->Url->build(['_name' => $article->kind . '-by-slug', 'slug' => $article->slug]) ?>" class="read-more-link">
                    <?= __('Read more') ?>
                </a>
            </div>
        </div>
    </div>
    
    <hr class="article-separator" />
</article>
<?php endforeach; ?>
<script>
document.addEventListener('DOMContentLoaded', function () {
    // Initialize popovers
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl, {
            container: 'body'
        })
    })
});
</script>

// ----- END FILE: plugins/DefaultTheme/templates/Articles/index.php -----

FILE: plugins/DefaultTheme/templates/Articles/page_index.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 1566 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Article $article
 * @var array $articles
 */

// Recursive function to build the nested menu
function buildMenu($articles, $view) {
    echo '<ul class="nested-menu">';
    foreach ($articles as $page) {
        echo '<li>';
        echo $view->Html->link(
            h($page->title),
            ['prefix' => false, 'controller' => 'Articles', 'action' => 'view-by-slug', $page->slug],
            ['class' => 'menu-item']
        );
        if (!empty($page->children)) {
            buildMenu($page->children, $view);
        }
        echo '</li>';
    }
    echo '</ul>';
}
?>

<div class="article-container">
    <?php if ($article) : ?>
    <article>
        <header>
            <h1 class="article-title"><?= htmlspecialchars_decode($article->title) ?></h1>
            <time class="article-date" datetime="<?= $article->modified->format('Y-m-d H:i:s') ?>">
                Last updated: <?= $article->modified->format('F j, Y, g:i a') ?>
            </time>
        </header>

        <div id="article-body-content"><?php
            $content = $article->body;
            $content = $this->Video->processVideoPlaceholders($content);
            $content = $this->Gallery->processGalleryPlaceholders($content);
            echo htmlspecialchars_decode($content);
        ?></div>

    </article>
    <?php endif; ?>
    <?php if ($articles) : ?>
    <nav class="sidebar-menu">
        <h2>Pages Menu</h2>
        <?php buildMenu($articles, $this); ?>
    </nav>
    <?php endif; ?>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/Articles/page_index.php -----

FILE: plugins/DefaultTheme/templates/Articles/article.php
LAST MODIFIED: 2025-07-15 17:23:16
SIZE: 4207 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Article $article
 */
?>

<article class="blog-post">
    <header class="article-header mb-4">
        <h1 class="display-5 link-body-emphasis mb-3"><?= htmlspecialchars_decode($article->title) ?></h1>
        <div class="blog-post-meta">
            <span class="date"><?= $article->published->format('F j, Y') ?></span>
            <span class="author">by <?= h($article->user->username) ?></span>
        </div>
    </header>
    
    <?php if (!empty($article->image)): ?>
    <div class="article-featured-image mb-4">
        <?= $this->element('image/icon', [
            'model' => $article, 
            'icon' => $article->largeImageUrl, 
            'preview' => false,
            'class' => 'img-fluid rounded shadow-sm w-100'
        ]); ?>
    </div>
    <?php endif; ?>
    
    <?= $this->Html->css('https://cdn.jsdelivr.net/npm/trumbowyg@2.28.0/dist/ui/trumbowyg.min.css'); ?>
    
    <div class="article-content-wrapper">
        <div id="article-body-content" class="article-body trumbowyg-editor-visible trumbowyg-semantic"><?php
            $content = $article->body;
            // Process videos first
            $content = $this->Video->processVideoPlaceholders($content);
            // Process galleries second
            $content = $this->Gallery->processGalleryPlaceholders($content);
            // Enhance content formatting (alignment, responsive images)
            $content = $this->Content->enhanceContent($content, ['processResponsiveImages' => true]);
            echo htmlspecialchars_decode($content);
        ?></div>
    </div>
    
    <?= $this->element('site/facebook/share_button') ?>
    <div class="mb-3">
        <?= $this->element('image_carousel', [
            'images' => $article->images,
            'carouselId' => 'articleImagesCarousel'
        ]) ?>
    </div>

    <div>
        <?= $this->element('article/tags', ['article' => $article]) ?>
    </div>
</article>

<?php if(
        (SettingsManager::read('Comments.articlesEnabled') && $article->kind == 'article')
        || (SettingsManager::read('Comments.pagesEnabled') && $article->kind == 'page')
    ):
?>
    <section class="comments mb-8">
        <h3 class="mb-3"><?= __('Comments') ?></h3>
        <?php if (!empty($article->comments)): ?>
            <?php foreach ($article->comments as $comment): ?>
                <div class="card mb-3">
                    <div class="card-body">
                        <p class="card-text"><?= htmlspecialchars_decode($comment->content) ?></p>
                        <p class="card-text">
                            <small class="text-muted">
                                <?= __('Posted on {date} by {author}', [
                                    'date' => $comment->created->format('F j, Y, g:i a'),
                                    'author' => h($comment->user->username ?? 'Unknown')
                                ]) ?>
                            </small>
                        </p>
                    </div>
                </div>
            <?php endforeach; ?>
        <?php else: ?>
            <p class="text-muted"><?= __('No comments yet.') ?></p>
        <?php endif; ?>           
    </section>
    <?php if ($this->Identity->isLoggedIn()): ?>
        <section class="add-comment mb-4">
            <h3 class="mb-3"><?= __('Add a Comment') ?></h3>
            <?= $this->Form->create(null, ['url' => ['controller' => 'Articles', 'action' => 'addComment', $article->id]]) ?>
                <?= $this->Form->control('content', ['label' => __('Comment'), 'type' => 'textarea', 'rows' => 3, 'class' => 'form-control mb-3']) ?>
                <?= $this->Form->button(__('Submit Comment'), ['class' => 'btn btn-primary']) ?>
            <?= $this->Form->end() ?>
        </section>
    <?php else: ?>
        <section class="login-prompt mb-4">
            <h3 class="mb-3"><?= __('Please log in to add a comment') ?></h3>
            <?= $this->Html->link(__('Login'), ['controller' => 'Users', 'action' => 'login'], ['class' => 'btn btn-primary']) ?>
        </section>
    <?php endif; ?>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/Articles/article.php -----

FILE: plugins/DefaultTheme/templates/Articles/page.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 3087 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Article $article
 */
?>

<article class="blog-post">
    <h2 class="display-5 link-body-emphasis mb-1"><?= htmlspecialchars_decode($article->title) ?></h2>

    <?= $this->element('site/crumbs') ?>

    <?= $this->element('image/icon', ['model' => $article, 'icon' => $article->smallImageUrl, 'preview' => $article->largeImageUrl]); ?>

    <div id="article-body-content"><?php
        $content = $article->body;
        $content = $this->Video->processVideoPlaceholders($content);
        $content = $this->Gallery->processGalleryPlaceholders($content);
        echo htmlspecialchars_decode($content);
    ?></div>

    <div>
        <?= $this->element('image_carousel', [
            'images' => $article->images,
            'carouselId' => 'articleImagesCarousel'
        ]) ?>
    </div>
</article>

<?php if(
        (SettingsManager::read('Comments.articlesEnabled') && $article->kind == 'article')
        || (SettingsManager::read('Comments.pagesEnabled') && $article->kind == 'page')
    ):
?>
    <section class="comments mb-8">
        <h3 class="mb-3"><?= __('Comments') ?></h3>
        <?php if (!empty($article->comments)): ?>
            <?php foreach ($article->comments as $comment): ?>
                <div class="card mb-3">
                    <div class="card-body">
                        <p class="card-text"><?= htmlspecialchars_decode($comment->content) ?></p>
                        <p class="card-text">
                            <small class="text-muted">
                                <?= __('Posted on {date} by {author}', [
                                    'date' => $comment->created->format('F j, Y, g:i a'),
                                    'author' => h($comment->user->username ?? 'Unknown')
                                ]) ?>
                            </small>
                        </p>
                    </div>
                </div>
            <?php endforeach; ?>
        <?php else: ?>
            <p class="text-muted"><?= __('No comments yet.') ?></p>
        <?php endif; ?>           
    </section>
    <?php if ($this->Identity->isLoggedIn()): ?>
        <section class="add-comment mb-4">
            <h3 class="mb-3"><?= __('Add a Comment') ?></h3>
            <?= $this->Form->create(null, ['url' => ['controller' => 'Articles', 'action' => 'addComment', $article->id]]) ?>
                <?= $this->Form->control('content', ['label' => __('Comment'), 'type' => 'textarea', 'rows' => 3, 'class' => 'form-control mb-3']) ?>
                <?= $this->Form->button(__('Submit Comment'), ['class' => 'btn btn-primary']) ?>
            <?= $this->Form->end() ?>
        </section>
    <?php else: ?>
        <section class="login-prompt mb-4">
            <h3 class="mb-3"><?= __('Please log in to add a comment') ?></h3>
            <?= $this->Html->link(__('Login'), ['controller' => 'Users', 'action' => 'login'], ['class' => 'btn btn-primary']) ?>
        </section>
    <?php endif; ?>
<?php endif; ?>

// ----- END FILE: plugins/DefaultTheme/templates/Articles/page.php -----

FILE: plugins/DefaultTheme/templates/layout/default.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 2385 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<!doctype html>
<html lang="<?= $this->request->getParam('lang', 'en') ?>" data-bs-theme="auto">
  <head>
  <?php if (!empty($consentData) && $consentData['analytics_consent']) :?>
    <?= SettingsManager::read('Google.tagManagerHead', '') ?>
    <?php endif; ?>
    <?= $this->Html->script('willow-modal') ?>
    <?= $this->Html->script('DefaultTheme.color-modes') ?>
    <?= $this->Html->charset() ?>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <?= $this->element('site/meta_tags', ['model' => $article ?? $tag ?? null]) ?>
    <title><?= SettingsManager::read('SEO.siteName', 'Willow CMS') ?>: <?= $this->fetch('title') ?></title>
    <?= $this->Html->meta('icon') ?>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <?= $this->Html->css('DefaultTheme.willow') ?>
    <?= $this->fetch('meta') ?>
    <?= $this->fetch('css') ?>
    <?= $this->fetch('script') ?>
    <link href="https://fonts.googleapis.com/css?family=Playfair&#43;Display:700,900&amp;display=swap" rel="stylesheet">
    <?= $this->Html->scriptBlock(sprintf(
        'var csrfToken = %s;',
        json_encode($this->request->getAttribute('csrfToken'))
    )); ?>
</head>
  <body>
      <?php if (!empty($consentData) && $consentData['marketing_consent']) :?>
        <?= $this->element('site/facebook/sdk') ?>
      <?php endif; ?>

    <?= $this->element('site/bootstrap') ?>

    <div class="container">

      <?= $this->element('site/header'); ?>

      <?= $this->element('site/main_menu', ['mbAmount' => 3]); ?>

    </div>
    <main class="container" id="main-content">
      <div class="row g-5">
        <div class="col-md-12">
            <?= $this->Flash->render() ?>
            <?= $this->fetch('content') ?>
        </div>
      </div>
    </main>

    <?= $this->element('site/footer'); ?>
    <?= $this->element('site/cookie_prefs'); ?>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <?= $this->Html->script('youtube-gdpr') ?>
    <?= $this->fetch('scriptBottom') ?>
  </body>
</html>

// ----- END FILE: plugins/DefaultTheme/templates/layout/default.php -----

FILE: plugins/DefaultTheme/templates/layout/article_index.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 5203 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php use Cake\Routing\Router; ?>
<!doctype html>
<html lang="<?= $this->request->getParam('lang', 'en') ?>" data-bs-theme="auto">
  <head>
  <?php if (!empty($consentData) && $consentData['analytics_consent']) :?>
    <?= SettingsManager::read('Google.tagManagerHead', '') ?>
    <?php endif; ?>
    <?= $this->Html->script('willow-modal') ?>
    <?= $this->Html->script('DefaultTheme.color-modes') ?>
    <?= $this->Html->charset() ?>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <?= $this->element('site/meta_tags', ['model' => $article ?? $tag ?? null]) ?>
    <title><?= SettingsManager::read('SEO.siteName', 'Willow CMS') ?>: <?= $this->fetch('title') ?></title>
    <?= $this->Html->meta('icon') ?>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <?= $this->Html->css('DefaultTheme.willow') ?>
    <?= $this->fetch('meta') ?>
    <?= $this->fetch('css') ?>
    <?= $this->fetch('script') ?>
    <link href="https://fonts.googleapis.com/css?family=Playfair&#43;Display:700,900&amp;display=swap" rel="stylesheet">
    <?= $this->Html->scriptBlock(sprintf(
        'var csrfToken = %s;',
        json_encode($this->request->getAttribute('csrfToken'))
    )); ?>
    <?= $this->Html->meta([
        'link' => Router::url([
            '_name' => 'rss'
        ], true),
        'type' => 'application/rss+xml',
        'title' => __('Latest Articles RSS Feed'),
        'rel' => 'alternate'
    ]); ?>
</head>
  <body>
      <?php if (!empty($consentData) && $consentData['marketing_consent']) :?>
      <?= $this->element('site/facebook/sdk') ?>
      <?php endif; ?>

    <?= $this->element('site/bootstrap') ?>

    <div class="container">

      <?= $this->element('site/header'); ?>

      <?= $this->element('site/main_menu'); ?>

      <?= $this->element('site/tags'); ?>

    </div>

    <main class="container" id="main-content">
      <div class="row g-5">
        
        <div class="col-lg-8">
            <div role="main" aria-label="<?= __('Article list') ?>">
                <?= $this->Flash->render() ?>
                <?= $this->fetch('content') ?>
                <?= $this->element('pagination', ['recordCount' => count($articles)]) ?>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="sidebar-content">
                <div class="d-none d-lg-block position-sticky" style="top: 2rem;">

            <div class="p-4 mb-3 bg-body-tertiary rounded">
              <h4 class="fst-italic"><?= __('About') ?></h4>
              <p class="mb-0"><?= __("Welcome to willowcms.app. This site uses Willow - a content management system I'm building in the open. Here you'll find development updates, feature highlights, and guides on using Willow for your own sites.") ?></p>
            </div>

                <?= $this->element('site/articles_list', ['articles' => $featuredArticles, 'title' => __('Featured posts')]) ?>

                <?= $this->element('site/articles_list', ['articles' => $recentArticles, 'title' => __('Recent posts')]) ?>

                <?= $this->element('site/archives') ?>

                <?= $this->element('site/elsewhere') ?>

                <?= $this->element('site/feeds') ?>

                </div>
                
                <!-- Mobile sidebar (visible on smaller screens) -->
                <div class="d-lg-none mt-4">
                    <div class="p-4 mb-3 bg-body-tertiary rounded">
                        <h4 class="fst-italic"><?= __('About') ?></h4>
                        <p class="mb-0"><?= __("Welcome to willowcms.app. This site uses Willow - a content management system I'm building in the open. Here you'll find development updates, feature highlights, and guides on using Willow for your own sites.") ?></p>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <?= $this->element('site/articles_list', ['articles' => $featuredArticles, 'title' => __('Featured posts')]) ?>
                            <?= $this->element('site/archives') ?>
                        </div>
                        <div class="col-md-6">
                            <?= $this->element('site/articles_list', ['articles' => $recentArticles, 'title' => __('Recent posts')]) ?>
                            <?= $this->element('site/elsewhere') ?>
                        </div>
                    </div>
                    <?= $this->element('site/feeds') ?>
                </div>
            </div>
        </div>
      </div>

    </main>

    <?= $this->element('site/footer'); ?>

    <?= $this->element('site/cookie_prefs'); ?>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <?= $this->Html->script('youtube-gdpr') ?>
    <?= $this->fetch('scriptBottom') ?>
  </body>
</html>

// ----- END FILE: plugins/DefaultTheme/templates/layout/article_index.php -----

FILE: plugins/DefaultTheme/templates/layout/article.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 3853 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<!doctype html>
  <html lang="<?= $this->request->getParam('lang', 'en') ?>" data-bs-theme="auto">
    <head>
    <?php if (!empty($consentData) && $consentData['analytics_consent']) :?>
      <?= SettingsManager::read('Google.tagManagerHead', '') ?>
      <?php endif; ?>
      <?= $this->Html->script('willow-modal') ?>
      <?= $this->Html->script('DefaultTheme.color-modes') ?>
      <?= $this->Html->charset() ?>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <?= $this->element('site/meta_tags', ['model' => $article ?? $tag ?? null]) ?>
      <title><?= SettingsManager::read('SEO.siteName', 'Willow CMS') ?>: <?= $this->fetch('title') ?></title>
      <?= $this->Html->meta('icon') ?>
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
      <?= $this->Html->css('DefaultTheme.willow') ?>
      <?= $this->fetch('meta') ?>
      <?= $this->fetch('css') ?>
      <?= $this->fetch('script') ?>
      <link href="https://fonts.googleapis.com/css?family=Playfair&#43;Display:700,900&amp;display=swap" rel="stylesheet">
      <?= $this->Html->scriptBlock(sprintf(
          'var csrfToken = %s;',
          json_encode($this->request->getAttribute('csrfToken'))
      )); ?>
      <?= $this->element('libraries/highlightjs'); ?>
  </head>
  <body>
      <?php if (!empty($consentData) && $consentData['marketing_consent']) :?>
        <?= $this->element('site/facebook/sdk') ?>
      <?php endif; ?>

    <?= $this->element('site/bootstrap') ?>

    <div class="container">

      <?= $this->element('site/header'); ?>

      <?= $this->element('site/main_menu'); ?>

      <?= $this->element('site/tags'); ?>
    </div>
    <main class="container" id="main-content">
      <div class="row g-5">
        
        <div class="col-lg-8">
            <div role="main" aria-label="<?= __('Article content') ?>">
                <?= $this->Flash->render() ?>
                <?= $this->fetch('content') ?>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="sidebar-content">
                <div class="d-none d-lg-block position-sticky" style="top: 2rem;">

                <?= $this->element('site/articles_list', ['articles' => $featuredArticles, 'title' => __('Featured posts')]) ?>

                <?= $this->element('site/articles_list', ['articles' => $recentArticles, 'title' => __('Recent posts')]) ?>

                <?= $this->element('site/elsewhere') ?>

                </div>
                
                <!-- Mobile sidebar (visible on smaller screens) -->
                <div class="d-lg-none mt-4">
                    <div class="row">
                        <div class="col-md-6">
                            <?= $this->element('site/articles_list', ['articles' => $featuredArticles, 'title' => __('Featured posts')]) ?>
                        </div>
                        <div class="col-md-6">
                            <?= $this->element('site/articles_list', ['articles' => $recentArticles, 'title' => __('Recent posts')]) ?>
                        </div>
                    </div>
                    <?= $this->element('site/elsewhere') ?>
                </div>
            </div>
        </div>
      </div>

    </main>

    <?= $this->element('site/footer'); ?>
    <?= $this->element('site/cookie_prefs'); ?>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <?= $this->Html->script('youtube-gdpr') ?>
    <?= $this->fetch('scriptBottom') ?>
  </body>
</html>

// ----- END FILE: plugins/DefaultTheme/templates/layout/article.php -----

FILE: plugins/DefaultTheme/templates/layout/page.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 2974 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<!doctype html>
  <html lang="<?= $this->request->getParam('lang', 'en') ?>" data-bs-theme="auto">
    <head>
      <?php if (!empty($consentData) && $consentData['analytics_consent']) :?>
      <?= SettingsManager::read('Google.tagManagerHead', '') ?>
      <?php endif; ?>
      <?= $this->Html->script('willow-modal') ?>
      <?= $this->Html->script('DefaultTheme.color-modes') ?>
      <?= $this->Html->charset() ?>
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <?= $this->element('site/meta_tags', ['model' => $article ?? $tag ?? null]) ?>
      <title><?= SettingsManager::read('SEO.siteName', 'Willow CMS') ?>: <?= $this->fetch('title') ?></title>
      <?= $this->Html->meta('icon') ?>
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
      <?= $this->Html->css('DefaultTheme.willow') ?>
      <?= $this->fetch('meta') ?>
      <?= $this->fetch('css') ?>
      <?= $this->fetch('script') ?>
      <link href="https://fonts.googleapis.com/css?family=Playfair&#43;Display:700,900&amp;display=swap" rel="stylesheet">
      <?= $this->Html->scriptBlock(sprintf(
          'var csrfToken = %s;',
          json_encode($this->request->getAttribute('csrfToken'))
      )); ?>
  </head>
  <body>
      <?php if (!empty($consentData) && $consentData['marketing_consent']) :?>
        <?= $this->element('site/facebook/sdk') ?>
      <?php endif; ?>

    <?= $this->element('site/bootstrap') ?>

    <div class="container">

    <?= $this->element('site/header'); ?>

    <?= $this->element('site/main_menu', ['mbAmount' => 3]); ?>

    </div>
    <main class="container">
      <div class="row g-5">
        
        <div class="col-md-8">
            <?= $this->Flash->render() ?>
            <?= $this->fetch('content') ?>
        </div>

        <div class="col-md-4">
            <div class="position-sticky" style="top: 2rem;">

              <?= $this->element('site/articles_list', ['articles' => $childPages, 'title' => __('Related pages')]) ?>

              <?= $this->element('site/articles_list', ['articles' => $featuredArticles, 'title' => __('Featured posts')]) ?>

              <?= $this->element('site/articles_list', ['articles' => $recentArticles, 'title' => __('Recent posts')]) ?>

              <?= $this->element('site/elsewhere') ?>

            </div>
        </div>
      </div>

    </main>

    <?= $this->element('site/footer'); ?>

    <?= $this->element('site/cookie_prefs'); ?>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <?= $this->Html->script('youtube-gdpr') ?>
    <?= $this->fetch('scriptBottom') ?>
  </body>
</html>

// ----- END FILE: plugins/DefaultTheme/templates/layout/page.php -----

FILE: plugins/DefaultTheme/templates/Tags/view_by_slug.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 2929 bytes
CONTENT:
<?php use App\Utility\SettingsManager; ?>
<?php
/**
 * @var \App\View\AppView $this
 * @var \App\Model\Entity\Tag $tag
 */
?>
<div class="tag-articles">
    <h2 class="mb-4 text-primary"><?= htmlspecialchars_decode($tag->title) ?></h2>
    <div class="card mb-4">
        <div class="card-body">
            <p class="card-text"><?= htmlspecialchars_decode($tag->description) ?></p>
        </div>
    </div>
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white">
            <h3 class="card-title h5 mb-0"><?= __('Articles/Pages') ?></h3>
        </div>
        <div class="card-body">
            <?php if (!empty($tag->articles)): ?>
                <ul class="list-group list-group-flush">
                    <?php foreach ($tag->articles as $article): ?>
                        <li class="list-group-item">
                            <div class="d-flex justify-content-between align-items-start">
                            <?php if (!empty($article->image)) : ?>
                            <div class="me-2">
                                <?= $this->element('image/icon', ['model' => $article, 'icon' => $article->smallImageUrl, 'preview' => $article->largeImageUrl]); ?>
                            </div>
                            <?php endif; ?>
                                <div class="d-flex flex-column">
                                    <h4 class="h6 mb-0">
                                        <?= $this->Html->link(
                                            htmlspecialchars_decode($article->title),
                                            [
                                                '_name' => 'article-by-slug',
                                                'slug' => $article->slug
                                            ],
                                            ['class' => 'text-primary']
                                        ); ?>
                                    </h4>
                                    <small class="text-muted"><?= __('By') ?> <?= h($article->user->username) ?></small>
                                </div>
                                <small class="text-muted ms-auto"><?= h($article->created->format('F j, Y, g:i a')) ?></small>
                            </div>
                        </li>
                    <?php endforeach; ?>
                </ul>
            <?php else: ?>
                <p class="card-text"><?= __('No articles found for this tag.') ?></p>
            <?php endif; ?>
        </div>
    </div>
</div>
<script>
document.addEventListener('DOMContentLoaded', function () {
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl, {
            container: 'body'
        })
    })
});
</script>

// ----- END FILE: plugins/DefaultTheme/templates/Tags/view_by_slug.php -----

FILE: plugins/DefaultTheme/templates/Tags/index.php
LAST MODIFIED: 2025-07-14 07:03:51
SIZE: 752 bytes
CONTENT:
<?php
/**
 * @var \App\View\AppView $this
 * @var iterable<\App\Model\Entity\Tag> $tags
 */
?>
<div class="tags">
    <h2 class="mb-4 text-primary"><?= __('Tags') ?></h2>
    <?php if (!empty($tags->toArray())) : ?>
    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <div class="d-flex flex-wrap gap-2">
                <?php foreach ($tags as $tag): ?>
                    <?= $this->Html->link(
                        htmlspecialchars_decode($tag->title),
                        ['action' => 'view-by-slug', $tag->slug],
                        ['class' => 'btn btn-outline-primary']
                    ) ?>
                <?php endforeach; ?>
            </div>
        </div>
    </div>
    <?php endif; ?>
</div>

// ----- END FILE: plugins/DefaultTheme/templates/Tags/index.php -----



================================================================================
END SECTION: Views
================================================================================



================================================================================
BEGIN SECTION: Webroot
================================================================================

FILE: webroot/css/fonts.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 2896 bytes
CONTENT:
/* cyrillic-ext */
@font-face {
    font-family: 'Raleway';
    font-style: normal;
    font-weight: 400;
    src: url('../font/raleway-400-cyrillic-ext.woff2') format('woff2');
    unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
}
/* cyrillic */
@font-face {
    font-family: 'Raleway';
    font-style: normal;
    font-weight: 400;
    src: url('../font/raleway-400-cyrillic.woff2') format('woff2');
    unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
}
/* vietnamese */
@font-face {
    font-family: 'Raleway';
    font-style: normal;
    font-weight: 400;
    src: url('../font/raleway-400-vietnamese.woff2') format('woff2');
    unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;
}
/* latin-ext */
@font-face {
    font-family: 'Raleway';
    font-style: normal;
    font-weight: 400;
    src: url('../font/raleway-400-latin-ext.woff2') format('woff2');
    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}
/* latin */
@font-face {
    font-family: 'Raleway';
    font-style: normal;
    font-weight: 400;
    src: url('../font/raleway-400-latin.woff2') format('woff2');
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}
/* cyrillic-ext */
@font-face {
    font-family: 'Raleway';
    font-style: normal;
    font-weight: 700;
    src: url('../font/raleway-700-cyrillic-ext.woff2') format('woff2');
    unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
}
/* cyrillic */
@font-face {
    font-family: 'Raleway';
    font-style: normal;
    font-weight: 700;
    src: url('../font/raleway-700-cyrillic.woff2') format('woff2');
    unicode-range: U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
}
/* vietnamese */
@font-face {
    font-family: 'Raleway';
    font-style: normal;
    font-weight: 700;
    src: url('../font/raleway-700-vietnamese.woff2') format('woff2');
    unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;
}
/* latin-ext */
@font-face {
    font-family: 'Raleway';
    font-style: normal;
    font-weight: 700;
    src: url('../font/raleway-700-latin-ext.woff2') format('woff2');
    unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}
/* latin */
@font-face {
    font-family: 'Raleway';
    font-style: normal;
    font-weight: 700;
    src: url('../font/raleway-700-latin.woff2') format('woff2');
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}


// ----- END FILE: webroot/css/fonts.css -----

FILE: webroot/index.php
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 1300 bytes
CONTENT:
<?php
/**
 * The Front Controller for handling every request
 *
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @since         0.2.9
 * @license       MIT License (https://opensource.org/licenses/mit-license.php)
 */

// For built-in server
if (PHP_SAPI === 'cli-server') {
    $_SERVER['PHP_SELF'] = '/' . basename(__FILE__);

    $url = parse_url(urldecode($_SERVER['REQUEST_URI']));
    $file = __DIR__ . $url['path'];
    if (strpos($url['path'], '..') === false && strpos($url['path'], '.') !== false && is_file($file)) {
        return false;
    }
}
require dirname(__DIR__) . '/vendor/autoload.php';

use App\Application;
use Cake\Http\Server;

// Bind your application to the server.
$server = new Server(new Application(dirname(__DIR__) . '/config'));

// Run the request/response through the application and emit the response.
$server->emit($server->run());


// ----- END FILE: webroot/index.php -----

FILE: webroot/js/photoswipe-gallery.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 23285 bytes
CONTENT:
/**
 * Shared PhotoSwipe Gallery Component
 * Unified implementation for both AdminTheme and DefaultTheme
 * Provides beautiful lightbox galleries with slideshow functionality
 */

class PhotoSwipeGallery {
    constructor(options = {}) {
        // Detect current theme
        const theme = this.detectTheme();
        
        this.options = {
            gallerySelector: '.photo-gallery',
            itemSelector: '.gallery-item',
            // PhotoSwipe options
            bgOpacity: 0.8,
            showHideOpacity: true,
            showAnimationDuration: 333,
            hideAnimationDuration: 333,
            // Slideshow options
            slideshowInterval: 4000, // 4 seconds
            enableSlideshow: true,
            // Theme-specific defaults
            ...this.getThemeDefaults(theme),
            // User overrides
            ...options
        };
        
        this.theme = theme;
        this.galleries = [];
        this.slideshowTimer = null;
        this.isPlaying = false;
        this.init();
    }

    /**
     * Detect current theme from page context
     */
    detectTheme() {
        // Check for admin theme indicators
        if (document.querySelector('.admin-gallery') || 
            document.querySelector('[class*="admin"]') ||
            window.location.pathname.includes('/admin/')) {
            return 'admin';
        }
        
        // Check for default theme indicators
        if (document.querySelector('.default-gallery')) {
            return 'default';
        }
        
        // Fallback detection
        return document.body.classList.contains('admin') ? 'admin' : 'default';
    }

    /**
     * Get theme-specific default options
     */
    getThemeDefaults(theme) {
        const defaults = {
            admin: {
                // Admin theme: More conservative padding for better management UX
                padding: { top: 60, bottom: 60, left: 40, right: 40 },
                spacing: 0.1,
                initialZoomLevel: 'fit',
                secondaryZoomLevel: 'fit',
                enableBulkActions: true,
                showImageCount: true
            },
            default: {
                // Default theme: Generous padding for optimal viewing experience
                padding: { top: 80, bottom: 80, left: 60, right: 60 },
                spacing: 0.1,
                initialZoomLevel: 'fit',
                secondaryZoomLevel: 'fit',
                enableBulkActions: false,
                showImageCount: false
            }
        };

        return defaults[theme] || defaults.default;
    }

    async init() {
        try {
            // Load PhotoSwipe dynamically from CDN
            await this.loadPhotoSwipe();
            this.initializeGalleries();
        } catch (error) {
            console.error('Failed to initialize PhotoSwipe Gallery:', error);
            // Fall back to basic click handlers that open images in new tabs
            this.initializeFallbackGalleries();
        }
    }
    
    initializeFallbackGalleries() {
        console.log('PhotoSwipe Gallery: Initializing fallback mode (images will open in new tabs)');
        const galleryElements = document.querySelectorAll(this.options.gallerySelector);
        
        galleryElements.forEach((galleryEl) => {
            const itemElements = galleryEl.querySelectorAll(this.options.itemSelector);
            
            itemElements.forEach((itemEl) => {
                const link = itemEl.querySelector('a');
                if (link) {
                    link.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        // Open image in new tab as fallback
                        window.open(link.href, '_blank');
                    });
                }
            });
        });
    }

    async loadPhotoSwipe() {
        // Load CSS
        if (!document.querySelector('link[href*="photoswipe"]')) {
            const cssLink = document.createElement('link');
            cssLink.rel = 'stylesheet';
            cssLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/photoswipe/5.4.2/photoswipe.min.css';
            cssLink.onerror = () => {
                console.warn('PhotoSwipe Gallery: Failed to load PhotoSwipe CSS from CDN');
            };
            document.head.appendChild(cssLink);
        }

        // Load JS
        if (!window.PhotoSwipe) {
            console.log('PhotoSwipe Gallery: Loading PhotoSwipe library...');
            
            // Use reliable CDNJS source
            const src = 'https://cdnjs.cloudflare.com/ajax/libs/photoswipe/5.4.2/umd/photoswipe.umd.min.js';
            
            try {
                await this.loadScript(src);
                console.log('PhotoSwipe Gallery: PhotoSwipe library loaded successfully');
            } catch (error) {
                console.error('PhotoSwipe Gallery: Failed to load PhotoSwipe library:', error);
                throw new Error('Failed to load PhotoSwipe from CDN');
            }
        } else {
            console.log('PhotoSwipe Gallery: PhotoSwipe library already loaded');
        }
    }
    
    async loadScript(src) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = src;
            script.onload = () => {
                // Double check PhotoSwipe is actually available
                if (window.PhotoSwipe) {
                    resolve();
                } else {
                    reject(new Error('PhotoSwipe not available after script load'));
                }
            };
            script.onerror = () => reject(new Error(`Failed to load script: ${src}`));
            
            document.head.appendChild(script);
        });
    }

    initializeGalleries() {
        const galleryElements = document.querySelectorAll(this.options.gallerySelector);
        console.log(`PhotoSwipe Gallery: Found ${galleryElements.length} galleries (${this.theme} theme)`);
        
        galleryElements.forEach((galleryEl, index) => {
            const items = this.parseGalleryItems(galleryEl);
            console.log(`PhotoSwipe Gallery: Gallery ${index} has ${items.length} items`);
            if (items.length > 0) {
                this.setupGalleryClickHandlers(galleryEl, items, index);
                console.log(`PhotoSwipe Gallery: Set up click handlers for gallery ${index}`);
            }
        });
    }

    parseGalleryItems(galleryEl) {
        const items = [];
        const itemElements = galleryEl.querySelectorAll(this.options.itemSelector);
        
        itemElements.forEach((itemEl) => {
            const link = itemEl.querySelector('a');
            const img = itemEl.querySelector('img');
            
            if (link && img) {
                // Get dimensions from data attributes or use auto-detection
                let width = parseInt(link.dataset.pswpWidth || link.dataset.width || 0);
                let height = parseInt(link.dataset.pswpHeight || link.dataset.height || 0);
                
                // If no dimensions provided, use auto-detection (PhotoSwipe 5 feature)
                if (!width || !height) {
                    width = 0;  // PhotoSwipe will auto-detect
                    height = 0; // PhotoSwipe will auto-detect
                }
                
                const item = {
                    src: link.href,
                    width: width,
                    height: height,
                    alt: img.alt || '',
                    title: link.dataset.title || img.alt || '',
                    caption: link.dataset.caption || '',
                    element: itemEl
                };
                
                console.log(`Image ${img.alt || 'untitled'}: ${item.width || 'auto'}x${item.height || 'auto'} (${this.theme} theme)`);
                
                items.push(item);
            }
        });
        
        return items;
    }

    setupGalleryClickHandlers(galleryEl, items, galleryIndex) {
        const itemElements = galleryEl.querySelectorAll(this.options.itemSelector);
        
        itemElements.forEach((itemEl, itemIndex) => {
            const link = itemEl.querySelector('a');
            if (link) {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Ensure PhotoSwipe is loaded before opening
                    if (window.PhotoSwipe) {
                        this.openGallery(items, itemIndex);
                    } else {
                        console.error('PhotoSwipe not loaded, falling back to simple image view');
                        // Fallback: open image in new tab
                        window.open(link.href, '_blank');
                    }
                });
            }
        });
    }

    openGallery(items, startIndex = 0) {
        const options = {
            dataSource: items,
            index: startIndex,
            bgOpacity: this.options.bgOpacity,
            showHideOpacity: this.options.showHideOpacity,
            showAnimationDuration: this.options.showAnimationDuration,
            hideAnimationDuration: this.options.hideAnimationDuration,
            
            // Enable zoom
            zoom: true,
            
            // Theme-specific options
            spacing: this.options.spacing,
            padding: this.options.padding,
            initialZoomLevel: this.options.initialZoomLevel,
            secondaryZoomLevel: this.options.secondaryZoomLevel,
            maxZoomLevel: 2,
            
            // Allow pan
            allowPanToNext: true,
            
            // Close on vertical drag
            closeOnVerticalDrag: true,
            
            // Preload images
            preload: [1, 3],
            
            // User interaction settings
            imageClickAction: 'zoom-or-close',
            tapAction: 'toggle-controls',
            doubleTapAction: 'zoom',
            
            // Disable built-in counter to prevent duplicates
            counter: false,
        };

        const gallery = new PhotoSwipe(options);
        this.currentGallery = gallery;
        
        // Add custom event handlers
        this.addCustomEventHandlers(gallery);
        
        gallery.init();
        
        // Auto-start slideshow after gallery opens if enabled
        if (this.options.enableSlideshow) {
            // Use openingAnimationEnd instead of afterInit for better timing
            gallery.on('openingAnimationEnd', () => {
                console.log('PhotoSwipe Gallery: Auto-starting slideshow...');
                
                // Show auto-start notification
                this.showSlideshowNotification(gallery, 'Slideshow starting automatically...');
                
                setTimeout(() => {
                    this.startSlideshow(gallery);
                    // Update UI to show slideshow is playing
                    const playBtn = gallery.element.querySelector('.pswp__button--play');
                    const pauseBtn = gallery.element.querySelector('.pswp__button--pause');
                    if (playBtn && pauseBtn) {
                        playBtn.style.display = 'none';
                        pauseBtn.style.display = 'block';
                    }
                    
                    // Show playing notification briefly
                    this.showSlideshowNotification(gallery, 'Slideshow playing - Press spacebar to pause');
                    setTimeout(() => this.hideSlideshowNotification(gallery), 3000);
                }, 500);
            });
        }
    }

    addCustomEventHandlers(gallery) {
        // Show image title/caption in UI
        gallery.on('uiRegister', () => {
            // Custom caption
            gallery.ui.registerElement({
                name: 'custom-caption',
                className: 'pswp__custom-caption',
                appendTo: 'root',
                onInit: (el, pswp) => {
                    gallery.on('change', () => {
                        this.updateCaption(el, gallery);
                    });
                    // Set initial caption
                    this.updateCaption(el, gallery);
                }
            });

            // Slideshow controls
            if (this.options.enableSlideshow) {
                gallery.ui.registerElement({
                    name: 'slideshow-controls',
                    className: 'pswp__slideshow-controls',
                    appendTo: 'top-bar',
                    onInit: (el, pswp) => {
                        el.innerHTML = `
                            <button class="pswp__button pswp__button--play" title="Play slideshow">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M8 5v14l11-7z"/>
                                </svg>
                            </button>
                            <button class="pswp__button pswp__button--pause" title="Pause slideshow" style="display: none;">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
                                </svg>
                            </button>
                        `;

                        const playBtn = el.querySelector('.pswp__button--play');
                        const pauseBtn = el.querySelector('.pswp__button--pause');

                        playBtn.addEventListener('click', () => {
                            this.startSlideshow(gallery);
                            playBtn.style.display = 'none';
                            pauseBtn.style.display = 'block';
                            this.showSlideshowNotification(gallery, 'Slideshow playing');
                            setTimeout(() => this.hideSlideshowNotification(gallery), 2000);
                        });

                        pauseBtn.addEventListener('click', () => {
                            this.stopSlideshow();
                            pauseBtn.style.display = 'none';
                            playBtn.style.display = 'block';
                            this.showSlideshowNotification(gallery, 'Slideshow paused');
                            setTimeout(() => this.hideSlideshowNotification(gallery), 2000);
                        });
                    }
                });

                // Progress indicator
                gallery.ui.registerElement({
                    name: 'slideshow-progress',
                    className: 'pswp__slideshow-progress',
                    appendTo: 'root',
                    onInit: (el, pswp) => {
                        el.innerHTML = '<div class="pswp__progress-bar"></div>';
                        this.progressElement = el.querySelector('.pswp__progress-bar');
                    }
                });
            }

            // Image counter (theme-aware)
            if (this.options.showImageCount) {
                gallery.ui.registerElement({
                    name: 'image-counter',
                    className: 'pswp__image-counter',
                    appendTo: 'top-bar',
                    onInit: (el, pswp) => {
                        gallery.on('change', () => {
                            el.textContent = `${gallery.currIndex + 1} / ${gallery.getNumItems()}`;
                        });
                        // Set initial counter
                        el.textContent = `${gallery.currIndex + 1} / ${gallery.getNumItems()}`;
                    }
                });
            }
        });

        // Handle slideshow cleanup
        gallery.on('destroy', () => {
            this.stopSlideshow();
        });

        // Handle manual navigation during slideshow
        gallery.on('change', () => {
            if (this.isPlaying) {
                this.resetSlideshowTimer(gallery);
            }
        });

        // Add keyboard shortcuts
        gallery.on('keydown', (e) => {
            const event = e.originalEvent;
            if (!event) return;
            
            switch (event.keyCode) {
                case 37: // Left arrow
                    gallery.prev();
                    break;
                case 39: // Right arrow
                    gallery.next();
                    break;
                case 27: // Escape
                    gallery.close();
                    break;
                case 32: // Spacebar - toggle slideshow
                    e.preventDefault();
                    this.toggleSlideshow(gallery);
                    break;
            }
        });
    }

    updateCaption(el, gallery) {
        const currSlideElement = gallery.currSlide?.data;
        if (currSlideElement) {
            let captionHTML = '';
            if (currSlideElement.title) {
                captionHTML += `<div class="pswp__caption-title">${currSlideElement.title}</div>`;
            }
            // Only show caption in admin theme or if explicitly enabled
            if ((this.theme === 'admin' || this.options.showCaptions) && currSlideElement.caption) {
                captionHTML += `<div class="pswp__caption-description">${currSlideElement.caption}</div>`;
            }
            el.innerHTML = captionHTML;
        }
    }

    startSlideshow(gallery) {
        console.log('PhotoSwipe Gallery: Starting slideshow...');
        this.isPlaying = true;
        this.currentGallery = gallery;
        this.resetSlideshowTimer(gallery);
        this.startProgressAnimation();
    }

    stopSlideshow() {
        this.isPlaying = false;
        if (this.slideshowTimer) {
            clearTimeout(this.slideshowTimer);
            this.slideshowTimer = null;
        }
        this.stopProgressAnimation();
    }

    toggleSlideshow(gallery) {
        if (this.isPlaying) {
            this.stopSlideshow();
            // Update UI buttons
            const playBtn = gallery.element.querySelector('.pswp__button--play');
            const pauseBtn = gallery.element.querySelector('.pswp__button--pause');
            if (playBtn && pauseBtn) {
                pauseBtn.style.display = 'none';
                playBtn.style.display = 'block';
            }
            this.showSlideshowNotification(gallery, 'Slideshow paused - Press spacebar to resume');
            setTimeout(() => this.hideSlideshowNotification(gallery), 2500);
        } else {
            this.startSlideshow(gallery);
            // Update UI buttons
            const playBtn = gallery.element.querySelector('.pswp__button--play');
            const pauseBtn = gallery.element.querySelector('.pswp__button--pause');
            if (playBtn && pauseBtn) {
                playBtn.style.display = 'none';
                pauseBtn.style.display = 'block';
            }
            this.showSlideshowNotification(gallery, 'Slideshow playing - Press spacebar to pause');
            setTimeout(() => this.hideSlideshowNotification(gallery), 2500);
        }
    }

    resetSlideshowTimer(gallery) {
        if (this.slideshowTimer) {
            clearTimeout(this.slideshowTimer);
        }
        
        this.slideshowTimer = setTimeout(() => {
            if (this.isPlaying && gallery) {
                // Move to next slide, or loop to first if at end
                if (gallery.currIndex < gallery.getNumItems() - 1) {
                    gallery.next();
                } else {
                    gallery.goTo(0);
                }
            }
        }, this.options.slideshowInterval);
    }

    startProgressAnimation() {
        if (this.progressElement) {
            this.progressElement.style.animation = `slideshow-progress ${this.options.slideshowInterval}ms linear`;
        }
    }

    stopProgressAnimation() {
        if (this.progressElement) {
            this.progressElement.style.animation = 'none';
        }
    }
    
    showSlideshowNotification(gallery, message) {
        // Remove existing notification
        this.hideSlideshowNotification(gallery);
        
        // Create notification element
        const notification = document.createElement('div');
        notification.className = 'pswp__slideshow-notification';
        notification.textContent = message;
        notification.style.cssText = `
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 1rem 2rem;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: 500;
            z-index: 10001;
            backdrop-filter: blur(8px);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        `;
        
        gallery.element.appendChild(notification);
        
        // Fade in
        requestAnimationFrame(() => {
            notification.style.opacity = '1';
        });
        
        this.currentNotification = notification;
    }
    
    hideSlideshowNotification(gallery) {
        if (this.currentNotification) {
            this.currentNotification.style.opacity = '0';
            setTimeout(() => {
                if (this.currentNotification && this.currentNotification.parentNode) {
                    this.currentNotification.parentNode.removeChild(this.currentNotification);
                }
                this.currentNotification = null;
            }, 300);
        }
    }

    // Static method to initialize galleries
    static init(options = {}) {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                new PhotoSwipeGallery(options);
            });
        } else {
            new PhotoSwipeGallery(options);
        }
    }

    // Method to refresh galleries (useful for dynamic content)
    refresh() {
        this.initializeGalleries();
    }

    // Get current theme
    getTheme() {
        return this.theme;
    }

    // Get theme-specific configuration
    getThemeConfig() {
        return this.getThemeDefaults(this.theme);
    }
}

// Auto-initialize if galleries are present
document.addEventListener('DOMContentLoaded', () => {
    const galleries = document.querySelectorAll('.photo-gallery');
    if (galleries.length > 0) {
        console.log(`PhotoSwipe Gallery: Found ${galleries.length} galleries, initializing...`);
        PhotoSwipeGallery.init();
    } else {
        console.log('PhotoSwipe Gallery: No galleries found on page');
    }
});

// Also initialize immediately if DOM is already loaded
if (document.readyState !== 'loading') {
    const galleries = document.querySelectorAll('.photo-gallery');
    if (galleries.length > 0) {
        console.log(`PhotoSwipe Gallery: Found ${galleries.length} galleries, initializing immediately...`);
        PhotoSwipeGallery.init();
    }
}

// Export for manual initialization
window.PhotoSwipeGallery = PhotoSwipeGallery;

// ----- END FILE: webroot/js/photoswipe-gallery.js -----

FILE: webroot/js/youtube-gdpr.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 1091 bytes
CONTENT:
function loadYouTubeVideo(button) {
    const container = button.closest('.youtube-embed');
    const videoId = button.dataset.videoId;
    const maxWidth = container.getAttribute('style') ? 
                     parseInt(container.style.width) : 
                     800; // default max width

    // Create player container div
    const playerContainer = document.createElement('div');
    playerContainer.className = 'youtube-player-container';
    playerContainer.style.maxWidth = maxWidth + 'px';

    // Create iframe with privacy-enhanced mode
    const iframe = document.createElement('iframe');
    iframe.setAttribute('src', `https://www.youtube-nocookie.com/embed/${videoId}`);
    iframe.setAttribute('frameborder', '0');
    iframe.setAttribute('allowfullscreen', '');

    // Add iframe to player container
    playerContainer.appendChild(iframe);

    // Replace the placeholder with the player container
    container.innerHTML = '';
    container.appendChild(playerContainer);

    // Store consent in localStorage
    localStorage.setItem('youtube_consent', 'granted');
}

// ----- END FILE: webroot/js/youtube-gdpr.js -----

FILE: webroot/js/willow-modal.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 41621 bytes
CONTENT:
/**
 * WillowModal - Dynamic Bootstrap Modal Manager
 * ==========================================
 * 
 * A comprehensive utility for creating and managing Bootstrap modals with AJAX content loading,
 * form handling, and specialized media selection capabilities.
 * 
 * Features:
 * - Dynamic modal creation and cleanup
 * - AJAX content loading with error handling
 * - Automatic form submission handling with CSRF protection
 * - Support for submit button data attributes
 * - Comprehensive event callbacks and lifecycle management
 * - Specialized media selection methods for editors
 * - Search and pagination handling for media pickers
 * - Content insertion strategies for different editor types
 * 
 * Basic Usage:
 * ```javascript
 * WillowModal.show('/path/to/content', {
 *     title: 'Modal Title',
 *     closeable: true
 * });
 * ```
 * 
 * Media Selection Usage:
 * ```javascript
 * WillowModal.showImageSelector(trumbowygEditor, {
 *     title: 'Select Image from Library'
 * });
 * 
 * WillowModal.showGallerySelector(markdownEditor, {
 *     title: 'Insert Photo Gallery'
 * });
 * ```
 * 
 * Configuration:
 * ```javascript
 * WillowModalConfig.endpoints.imageSelect = '/custom/images/select';
 * WillowModalConfig.searchDelay = 500;
 * ```
 * 
 * @namespace WillowModal
 */

/**
 * WillowModal Configuration Object
 * Centralized configuration for all modal operations
 */
window.WillowModalConfig = {
    // API Endpoints
    endpoints: {
        imageSelect: '/admin/images/image-select',
        videoSelect: '/admin/videos/video-select',
        galleryPicker: '/admin/image-galleries/picker',
        codeSnippet: '/admin/code-snippet' // For future implementation
    },
    
    // Search Configuration
    search: {
        delay: 300,                    // Debounce delay in milliseconds
        minLength: 3,                  // Minimum search length (0 for no minimum)
        placeholder: {
            image: 'Search images...',
            video: 'Search videos...',
            gallery: 'Search galleries...'
        }
    },
    
    // Modal Configuration
    modal: {
        defaultDialogClass: 'modal-lg',
        zIndex: 99999,
        backdrop: true,
        keyboard: true
    },
    
    // Media Configuration
    media: {
        imageSizes: ['thumbnail', 'medium', 'large', 'original'],
        defaultImageSize: 'large',
        imagePath: '/files/Images/image/',
        videoPlaceholderFormat: '[youtube:{id}:560:315:{title}]',
        galleryPlaceholderFormat: '[gallery:{id}:{theme}:{title}]'
    },
    
    // Event Configuration  
    events: {
        datasetMarker: 'handlerBound',
        searchInputSelector: 'input[type="search"]',
        paginationSelector: '.pagination a'
    }
};

/**
 * Creates and displays a Bootstrap modal with content loaded from a URL
 * 
 * @method show
 * @memberof WillowModal
 * 
 * @param {string} url - The URL from which to load the modal content
 * @param {Object} [options={}] - Configuration options for the modal
 * 
 * @param {string} [options.title] - The title to display in the modal header
 * @param {string} [options.dialogClass] - Additional CSS classes for the modal dialog
 * @param {boolean} [options.closeable=false] - Whether to show a close button in the header
 * @param {boolean} [options.static=false] - If true, modal won't close on backdrop click or Escape key
 * @param {boolean} [options.handleForm=true] - Whether to automatically handle form submissions
 * @param {boolean} [options.reload=false] - Whether to reload the page after successful form submission
 * 
 * @param {Function} [options.onShown] - Callback fired when modal is fully shown
 * @param {Function} [options.onContentLoaded] - Callback fired after content is loaded
 * @param {Function} [options.onSuccess] - Callback fired after successful form submission
 * @param {Function} [options.onError] - Callback fired on any error (loading/submission)
 * @param {Function} [options.onHidden] - Callback fired when modal is fully hidden
 * 
 * @returns {bootstrap.Modal} The Bootstrap modal instance
 * 
 * @example
 * // Basic modal with content
 * WillowModal.show('/users/edit/1', {
 *     title: 'Edit User',
 *     closeable: true
 * });
 * 
 * @example
 * // Form handling with callbacks
 * WillowModal.show('/users/add', {
 *     title: 'Add New User',
 *     handleForm: true,
 *     onSuccess: (data) => {
 *         console.log('User added:', data);
 *     },
 *     onError: (error) => {
 *         console.error('Failed:', error);
 *     }
 * });
 * 
 * Technical Details:
 * -----------------
 * 
 * Modal Structure:
 * The modal is created using Bootstrap's modal component structure and inserted
 * into the document body. It includes:
 * - Modal dialog with configurable classes
 * - Header with optional title and close button
 * - Body container for AJAX content
 * 
 * Form Handling:
 * When handleForm is true (default):
 * 1. Captures all form submissions within the modal
 * 2. Collects form data including:
 *    - All form fields
 *    - Data attributes from clicked submit buttons
 *    - Submit button name/value if present
 * 3. Submits via AJAX with CSRF token
 * 4. Handles success/error responses
 * 
 * CSRF Protection:
 * Requires a global csrfToken variable to be defined.
 * Automatically includes the token in all AJAX requests.
 * 
 * Cleanup:
 * The modal automatically removes itself from the DOM when closed.
 * 
 * Error Handling:
 * - Logs errors to console
 * - Calls onError callback if provided
 * - Handles both network and application errors
 * 
 * Dependencies:
 * - Bootstrap 5.x
 * - Modern browser with fetch API support
 */
window.WillowModal = {
    show: function(url, options = {}) {
        const modalHtml = `
            <div class="modal fade" id="dynamicModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered ${options.dialogClass || ''}">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5">${options.title || ''}</h1>
                            ${options.closeable ? '<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>' : ''}
                        </div>
                        <div class="modal-body">
                            <div id="dynamicModalContent"></div>
                        </div>
                    </div>
                </div>
            </div>`;

        document.body.insertAdjacentHTML('beforeend', modalHtml);
        const modalEl = document.getElementById('dynamicModal');
        const modal = new bootstrap.Modal(modalEl, {
            backdrop: options.static ? 'static' : true,
            keyboard: !options.static
        });

        // Add shown.bs.modal event listener before showing the modal
        modalEl.addEventListener('shown.bs.modal', function() {
            if (typeof options.onShown === 'function') {
                options.onShown();
            }
        });

        modalEl.addEventListener('show.bs.modal', function() {
            fetch(url, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-Token': csrfToken
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(html => {
                document.getElementById('dynamicModalContent').innerHTML = html;
                
                // Handle form submission if present
                const form = modalEl.querySelector('form');
                if (form && options.handleForm !== false) {
                    let lastClickedButton = null;

                    // Handle any button clicks within the form
                    form.addEventListener('click', function(e) {
                        if (e.target.matches('button[type="submit"]')) {
                            lastClickedButton = e.target;
                        }
                    });

                    form.addEventListener('submit', function(e) {
                        e.preventDefault();
                        
                        const formData = new FormData(form);
                        
                        // Add any data attributes from the clicked button to the form data
                        if (lastClickedButton) {
                            Object.entries(lastClickedButton.dataset).forEach(([key, value]) => {
                                formData.append(key, value);
                            });
                            // Also add the button's name and value if present
                            if (lastClickedButton.name && lastClickedButton.value) {
                                formData.append(lastClickedButton.name, lastClickedButton.value);
                            }
                        }

                        fetch(form.action, {
                            method: 'POST',
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest',
                                'X-CSRF-Token': csrfToken
                            },
                            body: formData
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            if (data.success) {
                                modal.hide();
                                if (options.reload) {
                                    window.location.reload();
                                }
                                if (typeof options.onSuccess === 'function') {
                                    options.onSuccess(data);
                                }
                            } else {
                                console.error('Form submission failed:', data);
                                if (typeof options.onError === 'function') {
                                    options.onError(data);
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            if (typeof options.onError === 'function') {
                                options.onError(error);
                            }
                        });
                    });
                }

                // Call onContentLoaded callback if provided
                if (typeof options.onContentLoaded === 'function') {
                    options.onContentLoaded();
                }
            })
            .catch(error => {
                console.error('Error loading modal content:', error);
                if (typeof options.onError === 'function') {
                    options.onError(error);
                }
            });
        });

        modalEl.addEventListener('hidden.bs.modal', function() {
            modalEl.remove();
            if (typeof options.onHidden === 'function') {
                options.onHidden();
            }
        });

        modal.show();
        return modal;
    },

    /**
     * Creates and displays a Bootstrap modal with static HTML content
     * 
     * @method showStatic
     * @memberof WillowModal
     * 
     * @param {string} content - The HTML content to display in the modal
     * @param {Object} [options={}] - Configuration options for the modal
     * 
     * @param {string} [options.title] - The title to display in the modal header
     * @param {string} [options.dialogClass] - Additional CSS classes for the modal dialog
     * @param {boolean} [options.closeable=true] - Whether to show a close button in the header
     * @param {boolean} [options.static=false] - If true, modal won't close on backdrop click or Escape key
     * 
     * @param {Function} [options.onShown] - Callback fired when modal is fully shown
     * @param {Function} [options.onContentLoaded] - Callback fired after content is loaded
     * @param {Function} [options.onHidden] - Callback fired when modal is fully hidden
     * 
     * @returns {bootstrap.Modal} The Bootstrap modal instance
     * 
     * @example
     * WillowModal.showStatic('<p>Hello World</p>', {
     *     title: 'Static Content',
     *     closeable: true,
     *     onContentLoaded: function() {
     *         console.log('Content ready');
     *     }
     * });
     */
    showStatic: function(content, options = {}) {
        const defaults = {
            dialogClass: WillowModalConfig.modal.defaultDialogClass,
            closeable: true
        };
        const config = { ...defaults, ...options };

        const modalHtml = `
            <div class="modal fade" id="dynamicModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered ${config.dialogClass || ''}">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1 class="modal-title fs-5">${config.title || ''}</h1>
                            ${config.closeable ? '<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>' : ''}
                        </div>
                        <div class="modal-body">
                            <div id="dynamicModalContent">${content}</div>
                        </div>
                    </div>
                </div>
            </div>`;

        document.body.insertAdjacentHTML('beforeend', modalHtml);
        const modalEl = document.getElementById('dynamicModal');
        const modal = new bootstrap.Modal(modalEl, {
            backdrop: config.static ? 'static' : true,
            keyboard: !config.static
        });

        // Add shown.bs.modal event listener before showing the modal
        modalEl.addEventListener('shown.bs.modal', function() {
            if (typeof config.onShown === 'function') {
                config.onShown();
            }
        });

        modalEl.addEventListener('hidden.bs.modal', function() {
            modalEl.remove();
            if (typeof config.onHidden === 'function') {
                config.onHidden();
            }
        });

        // Call onContentLoaded callback if provided (after a brief delay to ensure DOM is ready)
        if (typeof config.onContentLoaded === 'function') {
            setTimeout(() => config.onContentLoaded(), 10);
        }

        modal.show();
        // Inject CSS for smooth animations if not already present
        this._injectWillowModalCSS();
        
        return modal;
    },

    /**
     * Inject CSS for smooth modal animations
     * @private
     */
    _injectWillowModalCSS: function() {
        if (document.getElementById('willow-modal-styles')) return;
        
        const css = `
            .willow-loading-overlay {
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(255, 255, 255, 0.9);
                backdrop-filter: blur(2px);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10;
                border-radius: 0.375rem;
            }
            
            .willow-loading .willow-loading-overlay {
                animation: fadeIn 0.2s ease-in;
            }
            
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            
            .willow-search-form {
                background: #f8f9fa;
                border-bottom: 1px solid #dee2e6;
                position: sticky;
                top: 0;
                z-index: 5;
            }
            
            .willow-results-container {
                min-height: 300px;
                position: relative;
            }
            
            .willow-picker-card {
                transition: all 0.2s ease;
                border: 2px solid transparent;
            }
            
            .willow-picker-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.1);
                border-color: #0d6efd;
            }
            
            .willow-empty-state {
                min-height: 200px;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                color: #6c757d;
            }
            
            .modal-dialog {
                max-width: 90vw;
                width: 1000px;
            }
            
            .modal-body {
                max-height: 80vh;
                overflow: hidden;
                display: flex;
                flex-direction: column;
            }
        `;
        
        const style = document.createElement('style');
        style.id = 'willow-modal-styles';
        style.textContent = css;
        document.head.appendChild(style);
    },

    /**
     * ========================================
     * MEDIA SELECTION METHODS
     * ========================================
     */

    /**
     * Show image selector modal for editors
     * @param {Object} editor - Editor instance (Trumbowyg or detected from DOM)
     * @param {Object} [options={}] - Modal configuration options
     * @returns {bootstrap.Modal} The Bootstrap modal instance
     */
    showImageSelector: function(editor, options = {}) {
        return this._showMediaSelector('image', editor, {
            title: 'Insert Image from Library',
            ...options
        });
    },

    /**
     * Show video selector modal for editors
     * @param {Object} editor - Editor instance (Trumbowyg or detected from DOM)
     * @param {Object} [options={}] - Modal configuration options
     * @returns {bootstrap.Modal} The Bootstrap modal instance
     */
    showVideoSelector: function(editor, options = {}) {
        return this._showMediaSelector('video', editor, {
            title: 'Insert YouTube Video',
            ...options
        });
    },

    /**
     * Show gallery selector modal for editors
     * @param {Object} editor - Editor instance (Trumbowyg or detected from DOM)
     * @param {Object} [options={}] - Modal configuration options
     * @returns {bootstrap.Modal} The Bootstrap modal instance
     */
    showGallerySelector: function(editor, options = {}) {
        return this._showMediaSelector('gallery', editor, {
            title: 'Insert Image Gallery',
            ...options
        });
    },

    /**
     * Internal method for handling media selection modals
     * @private
     */
    _showMediaSelector: function(type, editor, options = {}) {
        const defaults = {
            dialogClass: WillowModalConfig.modal.defaultDialogClass,
            closeable: true,
            handleForm: false
        };

        const config = { ...defaults, ...options };
        const endpointMap = {
            image: WillowModalConfig.endpoints.imageSelect,
            video: WillowModalConfig.endpoints.videoSelect,
            gallery: WillowModalConfig.endpoints.galleryPicker
        };
        const url = endpointMap[type];

        // Store media context for callbacks
        this._currentMediaContext = {
            type: type,
            editor: editor,
            editorType: this._detectEditorType(editor)
        };

        // Enhanced content loaded handler for media
        const originalOnContentLoaded = config.onContentLoaded;
        config.onContentLoaded = () => {
            this._initializeMediaHandlers();
            if (originalOnContentLoaded) originalOnContentLoaded();
        };

        return this.show(url, config);
    },

    /**
     * Initialize media-specific handlers after content loads
     * @private
     */
    _initializeMediaHandlers: function() {
        const context = this._currentMediaContext;
        if (!context) return;

        if (context.type === 'image') {
            this._initializeImageHandlers();
        } else if (context.type === 'video') {
            this._initializeVideoHandlers();
        } else if (context.type === 'gallery') {
            this._initializeGalleryHandlers();
        }
    },

    /**
     * Initialize image-specific handlers
     * @private
     */
    _initializeImageHandlers: function() {
        // Try both new and old container IDs for compatibility
        const container = document.getElementById('image-results') || document.getElementById('image-gallery');
        if (!container) return;

        // Search handler with debouncing
        const searchInput = document.getElementById('imageSearch');
        if (searchInput) {
            this._bindSearchHandler(searchInput, 'image');
        }

        // Image selection handler
        this._bindImageSelection(container);

        // Pagination handler
        this._bindPaginationHandler(container);
    },

    /**
     * Initialize video-specific handlers  
     * @private
     */
    _initializeVideoHandlers: function() {
        // Try both new and old container IDs for compatibility
        const container = document.getElementById('video-results') || document.getElementById('video-gallery');
        if (!container) return;

        // Search handler with debouncing
        const searchInput = document.getElementById('videoSearch');
        if (searchInput) {
            this._bindSearchHandler(searchInput, 'video');
        }

        // Video selection handler
        this._bindVideoSelection(container);

        // Clear search button handlers (rebind after AJAX updates)
        this._bindVideoClearButtons();

        // Pagination handler
        this._bindPaginationHandler(container);
    },

    /**
     * Bind image selection events
     * @private
     */
    _bindImageSelection: function(container) {
        // Check if already bound to prevent duplicate handlers
        if (container.dataset[WillowModalConfig.events.datasetMarker] === 'true') {
            return;
        }
        
        container.addEventListener('click', (e) => {
            const imageElement = e.target.closest('img.insert-image');
            if (imageElement) {
                e.preventDefault();
                this._handleImageSelect(imageElement);
            }
        });
        
        // Mark as bound
        container.dataset[WillowModalConfig.events.datasetMarker] = 'true';
    },

    /**
     * Bind video clear button handlers
     * @private
     */
    _bindVideoClearButtons: function() {
        // Clear search button in search form
        const clearVideoSearch = document.getElementById('clearVideoSearch');
        if (clearVideoSearch && !clearVideoSearch.dataset.handlerBound) {
            clearVideoSearch.addEventListener('click', function() {
                const searchInput = document.getElementById('videoSearch');
                if (searchInput) {
                    searchInput.value = '';
                    searchInput.dispatchEvent(new Event('input', { bubbles: true }));
                    searchInput.focus();
                }
            });
            clearVideoSearch.dataset.handlerBound = 'true';
        }
        
        // Clear search button in empty state
        const clearVideoSearchBtn = document.getElementById('clearVideoSearchBtn');
        if (clearVideoSearchBtn && !clearVideoSearchBtn.dataset.handlerBound) {
            clearVideoSearchBtn.addEventListener('click', function() {
                const searchInput = document.getElementById('videoSearch');
                if (searchInput) {
                    searchInput.value = '';
                    searchInput.dispatchEvent(new Event('input', { bubbles: true }));
                    searchInput.focus();
                }
            });
            clearVideoSearchBtn.dataset.handlerBound = 'true';
        }
    },

    /**
     * Bind video selection events
     * @private
     */
    _bindVideoSelection: function(container) {
        // Check if already bound to prevent duplicate handlers
        if (container.dataset.videoHandlerBound === 'true') {
            return;
        }
        
        container.addEventListener('click', (e) => {
            const videoElement = e.target.closest('.select-video');
            if (videoElement) {
                e.preventDefault();
                this._handleVideoSelect(videoElement);
            }
        });
        
        // Mark as bound
        container.dataset.videoHandlerBound = 'true';
    },

    /**
     * Handle image selection and insertion
     * @private
     */
    _handleImageSelect: function(imageElement) {
        const imageData = {
            id: imageElement.dataset.id,
            src: imageElement.dataset.src,
            name: imageElement.dataset.name,
            alt: imageElement.dataset.alt || imageElement.dataset.name
        };

        // Get the selected image size from the dropdown
        const sizeDropdown = document.getElementById(imageData.id + '_size');
        const selectedSize = sizeDropdown ? sizeDropdown.value : WillowModalConfig.media.defaultImageSize;

        // Update imageData with selected size
        imageData.selectedSize = selectedSize;

        const context = this._currentMediaContext;
        if (!context) return;

        // Insert image using content insertion strategy
        const inserter = this._createContentInserter(context.editorType, context.editor);
        if (inserter && inserter.insertImage) {
            inserter.insertImage(imageData);
        } else {
            // Fallback: insert as HTML with selected size
            const imgHtml = `<img src="${WillowModalConfig.media.imagePath}${selectedSize}/${imageData.src}" alt="${imageData.alt}" title="${imageData.name}">`;
            const contentInserter = this._createContentInserter(context.editorType, context.editor);
            if (contentInserter) {
                contentInserter.insertContent(imgHtml);
            }
        }

        this._closeCurrentModal();
    },

    /**
     * Handle video selection and insertion
     * @private
     */
    _handleVideoSelect: function(videoElement) {
        const videoData = {
            id: videoElement.dataset.videoId,
            title: videoElement.dataset.title || 'YouTube Video'
        };

        const context = this._currentMediaContext;
        if (!context) return;

        // Insert video using content insertion strategy
        const inserter = this._createContentInserter(context.editorType, context.editor);
        if (inserter && inserter.insertVideo) {
            inserter.insertVideo(videoData);
        } else {
            // Fallback: insert as placeholder
            const videoPlaceholder = WillowModalConfig.media.videoPlaceholderFormat
                .replace('{id}', videoData.id)
                .replace('{title}', videoData.title);
            const contentInserter = this._createContentInserter(context.editorType, context.editor);
            if (contentInserter) {
                contentInserter.insertContent(videoPlaceholder);
            }
        }

        this._closeCurrentModal();
    },

    /**
     * Initialize gallery-specific handlers
     * @private
     */
    _initializeGalleryHandlers: function() {
        // Try both old and new container IDs for compatibility
        const container = document.getElementById('gallery-results') || document.getElementById('gallery-selector');
        if (!container) return;

        // Search handler with debouncing
        const searchInput = document.getElementById('gallerySearch');
        if (searchInput) {
            this._bindSearchHandler(searchInput, 'gallery');
        }

        // Gallery selection handler
        this._bindGallerySelection(container);

        // Pagination handler
        this._bindPaginationHandler(container);
    },

    /**
     * Bind search functionality with debouncing
     * @private
     */
    _bindSearchHandler: function(searchInput, type) {
        // Check if already bound to prevent duplicate handlers
        if (searchInput.dataset[WillowModalConfig.events.datasetMarker] === 'true') {
            return;
        }
        
        let debounceTimer;
        const handler = (event) => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                const searchTerm = event.target.value.trim();
                this._loadMediaContent(this._buildSearchUrl(type, searchTerm));
            }, WillowModalConfig.search.delay);
        };

        searchInput.addEventListener('input', handler, { passive: true });
        
        // Mark as bound
        searchInput.dataset[WillowModalConfig.events.datasetMarker] = 'true';
    },

    /**
     * Bind gallery selection events
     * @private
     */
    _bindGallerySelection: function(container) {
        // Check if already bound to prevent duplicate handlers
        if (container.dataset.galleryHandlerBound === 'true') {
            return;
        }
        
        container.addEventListener('click', (e) => {
            const galleryElement = e.target.closest('.select-gallery');
            if (galleryElement) {
                e.preventDefault();
                this._handleGallerySelect(galleryElement);
            }
        });
        
        // Mark as bound
        container.dataset.galleryHandlerBound = 'true';
    },

    /**
     * Bind pagination handler
     * @private
     */
    _bindPaginationHandler: function(container) {
        // Check if already bound to prevent duplicate handlers
        if (container.dataset.paginationHandlerBound === 'true') {
            return;
        }
        
        container.addEventListener('click', (e) => {
            const paginationLink = e.target.closest('.pagination a');
            if (paginationLink) {
                e.preventDefault();
                const url = new URL(paginationLink.href);
                url.searchParams.set('gallery_only', '1');
                this._loadMediaContent(url.toString());
            }
        });
        
        // Mark as bound
        container.dataset.paginationHandlerBound = 'true';
    },

    /**
     * Handle gallery selection and insertion
     * @private
     */
    _handleGallerySelect: function(galleryElement) {
        const galleryData = {
            id: galleryElement.dataset.galleryId,
            name: galleryElement.dataset.galleryName,
            slug: galleryElement.dataset.gallerySlug,
            imageCount: galleryElement.dataset.imageCount,
            theme: galleryElement.dataset.theme || 'default'
        };

        const context = this._currentMediaContext;
        if (!context) return;

        // Insert gallery using content insertion strategy
        const inserter = this._createContentInserter(context.editorType, context.editor);
        if (inserter) {
            const placeholder = WillowModalConfig.media.galleryPlaceholderFormat
                .replace('{id}', galleryData.id)
                .replace('{theme}', galleryData.theme)
                .replace('{title}', galleryData.name);
            inserter.insertContent(placeholder);
        }

        this._closeCurrentModal();
    },

    /**
     * Content insertion strategy factory
     * @private
     */
    _createContentInserter: function(editorType, editor) {
        switch (editorType) {
            case 'trumbowyg':
                return new this._TrumbowygInserter(editor);
            case 'markdown':
                return new this._MarkdownInserter();
            default:
                console.warn('Unknown editor type:', editorType);
                return null;
        }
    },

    /**
     * Trumbowyg content inserter
     * @private
     */
    _TrumbowygInserter: function(editor) {
        this.editor = editor;
        this.insertContent = function(content) {
            if (!this.editor) return;
            this.editor.restoreRange();
            this.editor.execCmd('insertHTML', content, false, true);
        };
        this.insertImage = function(imageData) {
            if (!this.editor || !imageData) return;
            const size = imageData.selectedSize || WillowModalConfig.media.defaultImageSize;
            const imgHtml = `<img src="${WillowModalConfig.media.imagePath}${size}/${imageData.src}" alt="${imageData.alt}" title="${imageData.name}">`;
            this.insertContent(imgHtml);
        };
        this.insertVideo = function(videoData) {
            if (!this.editor || !videoData) return;
            const videoPlaceholder = WillowModalConfig.media.videoPlaceholderFormat
                .replace('{id}', videoData.id)
                .replace('{title}', videoData.title);
            this.insertContent(videoPlaceholder);
        };
    },

    /**
     * Markdown content inserter
     * @private
     */
    _MarkdownInserter: function() {
        this.insertContent = function(content) {
            const textarea = document.getElementById('article-markdown');
            if (!textarea) return;

            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const text = textarea.value;
            
            textarea.value = text.substring(0, start) + content + text.substring(end);
            textarea.focus();
            textarea.setSelectionRange(start + content.length, start + content.length);
            
            // Trigger input event for markdown preview
            textarea.dispatchEvent(new Event('input', {
                bubbles: true,
                cancelable: true
            }));
        };
        this.insertImage = function(imageData) {
            if (!imageData) return;
            const size = imageData.selectedSize || WillowModalConfig.media.defaultImageSize;
            const imgMarkdown = `![${imageData.alt}](${WillowModalConfig.media.imagePath}${size}/${imageData.src} "${imageData.name}")`;
            this.insertContent(imgMarkdown);
        };
        this.insertVideo = function(videoData) {
            if (!videoData) return;
            const videoPlaceholder = WillowModalConfig.media.videoPlaceholderFormat
                .replace('{id}', videoData.id)
                .replace('{title}', videoData.title);
            this.insertContent(videoPlaceholder);
        };
    },

    /**
     * Load media content via AJAX with smooth animations
     * @private
     */
    _loadMediaContent: function(url) {
        // Smart container targeting - prefer results containers over full containers
        const resultsContainer = document.querySelector('#gallery-results, #image-results, #video-results');
        const fallbackContainer = document.querySelector('#gallery-selector, #image-gallery, #video-gallery');
        const container = resultsContainer || fallbackContainer;
        
        if (!container) return;

        // Add smooth loading state with fade effect
        this._showLoadingState(container);

        fetch(url, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-Token': window.csrfToken || ''
            }
        })
        .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.text();
        })
        .then(html => {
            this._updateContentWithAnimation(container, html);
        })
        .catch(error => {
            console.error('Error loading media content:', error);
            this._showErrorState(container);
        });
    },

    /**
     * Show smooth loading state
     * @private
     */
    _showLoadingState: function(container) {
        // Add loading class for smooth transition
        container.classList.add('willow-loading');
        
        const loadingHtml = `
            <div class="willow-loading-overlay">
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-2 text-muted small">Searching...</div>
                </div>
            </div>`;
        
        // Create loading overlay without removing existing content
        const loadingDiv = document.createElement('div');
        loadingDiv.innerHTML = loadingHtml;
        loadingDiv.className = 'willow-loading-container';
        
        container.style.position = 'relative';
        container.appendChild(loadingDiv.firstElementChild);
    },

    /**
     * Update content with smooth animation
     * @private
     */
    _updateContentWithAnimation: function(container, html) {
        // Remove loading overlay
        const loadingOverlay = container.querySelector('.willow-loading-overlay');
        if (loadingOverlay) {
            loadingOverlay.remove();
        }
        
        // Fade out current content
        container.style.opacity = '0.5';
        container.style.transform = 'translateY(10px)';
        container.style.transition = 'opacity 0.2s ease, transform 0.2s ease';
        
        setTimeout(() => {
            container.innerHTML = html;
            container.classList.remove('willow-loading');
            
            // Fade in new content
            container.style.opacity = '0';
            container.style.transform = 'translateY(-10px)';
            
            // Force reflow
            container.offsetHeight;
            
            container.style.opacity = '1';
            container.style.transform = 'translateY(0)';
            
            // Clean up transition after animation
            setTimeout(() => {
                container.style.transition = '';
                container.style.transform = '';
            }, 200);
            
            this._initializeMediaHandlers();
        }, 100);
    },

    /**
     * Show error state with retry option
     * @private
     */
    _showErrorState: function(container) {
        const loadingOverlay = container.querySelector('.willow-loading-overlay');
        if (loadingOverlay) {
            loadingOverlay.remove();
        }
        
        container.classList.remove('willow-loading');
        
        const errorHtml = `
            <div class="alert alert-danger d-flex align-items-center" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <div class="flex-grow-1">Error loading content. Please try again.</div>
                <button class="btn btn-sm btn-outline-danger ms-2" onclick="location.reload()">
                    <i class="fas fa-redo"></i> Retry
                </button>
            </div>`;
        
        container.innerHTML = errorHtml;
    },

    /**
     * Build search URL with parameters
     * @private
     */
    _buildSearchUrl: function(type, searchTerm = '') {
        const endpoints = {
            image: '/admin/images/image-select',
            video: '/admin/videos/video-select',
            gallery: '/admin/image-galleries/picker'
        };

        const url = new URL(endpoints[type], window.location.origin);
        
        // Set appropriate parameters for each type
        if (type === 'image') {
            url.searchParams.set('gallery_only', '1');
        } else if (type === 'video') {
            url.searchParams.set('gallery_only', '1');
            
            // For video type, check if channel filter checkbox is checked
            const channelFilter = document.getElementById('channelFilter');
            if (channelFilter) {
                url.searchParams.set('channel_filter', channelFilter.checked ? '1' : '0');
            }
        } else if (type === 'gallery') {
            url.searchParams.set('gallery_only', '1');
        }
        
        if (searchTerm) {
            url.searchParams.set('search', searchTerm);
        }

        return url.toString();
    },

    /**
     * Detect editor type from editor instance or DOM context
     * @private
     */
    _detectEditorType: function(editor) {
        if (!editor) {
            // Try to detect from DOM context
            if (document.getElementById('article-markdown')) return 'markdown';
            return 'unknown';
        }
        
        // Check for Trumbowyg
        if (editor.o && editor.execCmd) return 'trumbowyg';
        
        // Check for markdown editor context
        if (document.getElementById('article-markdown')) return 'markdown';
        
        return 'unknown';
    },

    /**
     * Close the current modal
     * @private
     */
    _closeCurrentModal: function() {
        const modal = bootstrap.Modal.getInstance(document.getElementById('dynamicModal'));
        if (modal) {
            modal.hide();
            return;
        }

        // Fallback: find any open modal and close it
        const openModal = document.querySelector('.modal.show');
        if (openModal) {
            const modalInstance = bootstrap.Modal.getInstance(openModal);
            if (modalInstance) modalInstance.hide();
        }
    }
};

// ----- END FILE: webroot/js/willow-modal.js -----

FILE: webroot/coverage/_js/file.js
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 1529 bytes
CONTENT:
  $(function() {
   var $window     = $(window)
     , $top_link   = $('#toplink')
     , $body       = $('body, html')
     , offset      = $('#code').offset().top
     , hidePopover = function ($target) {
        $target.data('popover-hover', false);

        setTimeout(function () {
         if (!$target.data('popover-hover')) {
          $target.popover('hide');
         }
        }, 300);
     };

   $top_link.hide().click(function(event) {
    event.preventDefault();
    $body.animate({scrollTop:0}, 800);
   });

   $window.scroll(function() {
    if($window.scrollTop() > offset) {
     $top_link.fadeIn();
    } else {
     $top_link.fadeOut();
    }
   }).scroll();

   $('.popin')
    .popover({trigger: 'manual'})
    .on({
     'mouseenter.popover': function () {
      var $target = $(this);
      var $container = $target.children().first();

      $target.data('popover-hover', true);

      // popover already displayed
      if ($target.next('.popover').length) {
       return;
      }

      // show the popover
      $container.popover('show');

      // register mouse events on the popover
      $target.next('.popover:not(.popover-initialized)')
       .on({
        'mouseenter': function () {
         $target.data('popover-hover', true);
        },
        'mouseleave': function () {
         hidePopover($container);
        }
       })
       .addClass('popover-initialized');
     },
     'mouseleave.popover': function () {
      hidePopover($(this).children().first());
     }
    });
  });


// ----- END FILE: webroot/coverage/_js/file.js -----

FILE: webroot/coverage/_css/custom.css
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 0 bytes
CONTENT:


// ----- END FILE: webroot/coverage/_css/custom.css -----

FILE: webroot/coverage/_css/style.css
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 2562 bytes
CONTENT:
body {
 font-family: sans-serif;
 font-size: 1em;
 font-kerning: normal;
 font-variant-ligatures: common-ligatures;
 text-rendering: optimizeLegibility;
 padding-top: 10px;
}

.popover {
 max-width: none;
}

.octicon {
 margin-right:.25em;
 vertical-align: baseline;
 width: 0.75em;
}

.table-bordered>thead>tr>td {
 border-bottom-width: 1px;
}

.table tbody>tr>td, .table thead>tr>td {
 padding-top: 3px;
 padding-bottom: 3px;
}

.table-condensed tbody>tr>td {
 padding-top: 0;
 padding-bottom: 0;
}

.table .progress {
 margin-bottom: inherit;
}

.table-borderless th, .table-borderless td {
 border: 0 !important;
}

.table tbody tr.covered-by-large-tests, li.covered-by-large-tests, tr.success, td.success, li.success, span.success {
 background-color: #dff0d8;
}

.table tbody tr.covered-by-medium-tests, li.covered-by-medium-tests {
 background-color: #c3e3b5;
}

.table tbody tr.covered-by-small-tests, li.covered-by-small-tests {
 background-color: #99cb84;
}

.table tbody tr.warning, .table tbody td.warning, li.warning, span.warning {
 background-color: #fcf8e3;
}

.table tbody tr.danger, .table tbody td.danger, li.danger, span.danger {
 background-color: #f2dede;
}

.table tbody td.info {
 background-color: #d9edf7;
}

td.big {
 vertical-align: middle;
 width: 117px;
}

td.small {
}

td.codeLine {
 font-family: "Source Code Pro", "SFMono-Regular", Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
 white-space: pre-wrap;
}

td span.comment {
 color: #888a85;
}

td span.default {
 color: #2e3436;
}

td span.html {
 color: #888a85;
}

td span.keyword {
 color: #2e3436;
 font-weight: bold;
}

pre span.string {
 color: #2e3436;
}

span.success, span.warning, span.danger {
 margin-right: 2px;
 padding-left: 10px;
 padding-right: 10px;
 text-align: center;
}

#toplink {
 position: fixed;
 left: 5px;
 bottom: 5px;
 outline: 0;
}

svg text {
 font-family: "Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif;
 font-size: 11px;
 color: #666;
 fill: #666;
}

.scrollbox {
 height:245px;
 overflow-x:scroll;
 overflow-y:scroll;
}

table + .structure-heading {
 border-top: 1px solid lightgrey;
 padding-top: 0.5em;
}

.legend {
 font-weight: bold;
 margin-right: 2px;
 padding-left: 10px;
 padding-right: 10px;
 text-align: center;
}

.covered-by-small-tests {
 background-color: #99cb84;
}

.covered-by-medium-tests {
 background-color: #c3e3b5;
}

.covered-by-large-tests {
 background-color: #dff0d8;
}

.not-covered {
 background-color: #f2dede;
}

.not-coverable {
 background-color: #fcf8e3;
}


// ----- END FILE: webroot/coverage/_css/style.css -----

FILE: webroot/coverage/_css/octicons.css
LAST MODIFIED: 2025-07-14 07:03:33
SIZE: 88 bytes
CONTENT:
.octicon {
  display: inline-block;
  vertical-align: text-top;
  fill: currentColor;
}


// ----- END FILE: webroot/coverage/_css/octicons.css -----

FILE: plugins/AdminTheme/webroot/css/semantic-ui-dropdown.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 2055 bytes
CONTENT:
/* Semantic UI Dropdown Theme Support */
[data-bs-theme="dark"] .ui.dropdown {
    background-color: #2b3035 !important;
    border-color: #495057 !important;
    color: #e9ecef !important;
}

[data-bs-theme="dark"] .ui.dropdown .menu {
    background-color: #2b3035 !important;
    border-color: #495057 !important;
}

[data-bs-theme="dark"] .ui.dropdown .menu > .item {
    color: #e9ecef !important;
    border-top-color: #495057 !important;
}

[data-bs-theme="dark"] .ui.dropdown .menu > .item:hover {
    background-color: #343a40 !important;
    color: #fff !important;
}

[data-bs-theme="dark"] .ui.dropdown .menu > .selected.item {
    background-color: #0d6efd !important;
    color: #fff !important;
}

[data-bs-theme="dark"] .ui.dropdown .dropdown.icon {
    color: #e9ecef !important;
}

/* Selected tags in the dropdown */
[data-bs-theme="dark"] .ui.dropdown > .label {
    background-color: #0d6efd !important;
    color: #fff !important;
    border-color: #0a58ca !important;
}

/* Light mode (default) styles */
.ui.dropdown {
    background-color: #fff !important;
    border-color: #dee2e6 !important;
    color: #212529 !important;
}

.ui.dropdown .menu {
    background-color: #fff !important;
    border-color: #dee2e6 !important;
}

.ui.dropdown .menu > .item {
    color: #212529 !important;
}

.ui.dropdown .menu > .item:hover {
    background-color: #f8f9fa !important;
    color: #16181b !important;
}

.ui.dropdown .menu > .selected.item {
    background-color: #0d6efd !important;
    color: #fff !important;
}

/* Remove underlines from selected tags and x icons */
[data-bs-theme="dark"] .ui.dropdown > .label,
[data-bs-theme="light"] .ui.dropdown > .label {
    text-decoration: none !important;
}

[data-bs-theme="dark"] .ui.dropdown > .label > .delete.icon,
[data-bs-theme="light"] .ui.dropdown > .label > .delete.icon {
    text-decoration: none !important;
}

/* Additional specificity if needed */
.ui.selection.dropdown .ui.label,
.ui.selection.dropdown .ui.label .delete.icon {
    text-decoration: none !important;
}

// ----- END FILE: plugins/AdminTheme/webroot/css/semantic-ui-dropdown.css -----

FILE: plugins/AdminTheme/webroot/css/images-grid.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 9084 bytes
CONTENT:
/**
 * Images & Gallery Grid Styles
 * Consolidated CSS for Image and Gallery admin interfaces
 */

/* ===== BASIC IMAGE GRID LAYOUT ===== */
.images-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 5px;
}

.image-item {
    border: 1px solid #ccc;
    padding: 5px;
    text-align: center;
}

.image-item img {
    max-width: 100%;
    height: auto;
}

/* ===== GALLERY MANAGEMENT STYLES ===== */
.gallery-manage-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 15px;
    margin: 20px 0;
}

.gallery-image-item {
    position: relative;
    border: 2px solid var(--bs-border-color);
    border-radius: 8px;
    padding: 5px;
    background: var(--bs-body-bg);
    cursor: move;
    transition: all 0.2s ease;
    overflow: hidden;
    min-height: 180px;
    display: flex;
    flex-direction: column;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.gallery-image-item:hover {
    border-color: var(--bs-primary);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.gallery-image-item.sortable-ghost {
    opacity: 0.4;
}

.gallery-image-item.sortable-chosen {
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    border-color: var(--bs-primary);
}

.gallery-image-actions {
    text-align: center;
    margin-top: 10px;
}

.gallery-image-actions .btn {
    padding: 5px 10px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
    font-size: 12px;
    margin: 2px;
}

.gallery-image-actions .btn-danger {
    background-color: var(--bs-danger);
    color: white;
    border: none;
}

.gallery-image-actions .btn-danger:hover {
    background-color: var(--bs-danger);
    filter: brightness(0.9);
}

.gallery-image-actions .btn-primary {
    background-color: var(--bs-primary);
    color: white;
    border: none;
}

.gallery-image-actions .btn-primary:hover {
    background-color: var(--bs-primary);
    filter: brightness(0.9);
}

/* Override Bootstrap thumbnail styling and make images fill containers */
.gallery-image-item img {
    width: 100%;
    height: auto;
    min-height: 140px;
    object-fit: cover;
    border-radius: 4px;
    border: none !important;
    padding: 0 !important;
    background: none !important;
    flex: 1;
}

.gallery-image-item .img-thumbnail {
    border: none !important;
    padding: 0 !important;
    background-color: transparent !important;
    border-radius: 4px;
}

/* Ensure the image container takes up most of the space */
.gallery-image-item > div:first-child {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

/* Modal styles */
#imageSelectModal {
    z-index: 99999 !important;
}

/* Dark theme adjustments */
[data-bs-theme="dark"] .gallery-image-item {
    box-shadow: 0 2px 4px rgba(255, 255, 255, 0.1);
}

[data-bs-theme="dark"] .gallery-image-item:hover {
    box-shadow: 0 4px 8px rgba(255, 255, 255, 0.15);
}

[data-bs-theme="dark"] .gallery-image-item.sortable-chosen {
    box-shadow: 0 5px 15px rgba(255, 255, 255, 0.2);
}

/* ===== GALLERY GRID VIEW STYLES ===== */

/* Gallery Preview Container */
.gallery-preview-overlay {
    position: relative;
    height: 250px;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.2s ease;
}

.gallery-preview-overlay:hover {
    transform: scale(1.01);
}

/* Gallery Preview Image */
.gallery-preview-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
    background: var(--bs-light);
    transition: transform 0.2s ease;
}

.gallery-preview-image:hover {
    transform: scale(1.02);
}

/* Play Button Overlay */
.gallery-play-button {
    display: none;
    transition: opacity 0.2s ease;
}

.gallery-preview-overlay:hover .gallery-play-button {
    display: block !important;
    opacity: 0.9;
}

.gallery-play-button i {
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
}

/* Gallery Cards */
.gallery-card {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    border: 1px solid var(--bs-border-color);
}

.gallery-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    border-color: var(--bs-primary);
}

/* Gallery Card Headers */
.gallery-card-header {
    background: var(--bs-light);
    border-bottom: 1px solid var(--bs-border-color);
    padding: 0.75rem 1rem;
}

.gallery-card-header h6 {
    margin: 0;
    font-weight: 600;
    color: var(--bs-dark);
}

/* Gallery Card Body */
.gallery-card-body {
    padding: 0;
}

.gallery-card-info {
    padding: 1rem;
}

/* Gallery Card Footer */
.gallery-card-footer {
    background: var(--bs-light);
    border-top: 1px solid var(--bs-border-color);
    padding: 0.75rem;
}

/* Gallery Status Badges */
.gallery-status-badge {
    font-size: 0.75rem;
    font-weight: 500;
}

/* Gallery Image Count Badge */
.gallery-image-count {
    position: absolute;
    bottom: 0.5rem;
    right: 0.5rem;
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 500;
}

/* ===== GALLERY LIST VIEW STYLES ===== */

/* Gallery Preview Thumbnails */
.gallery-preview-thumb {
    width: 80px;
    height: 60px;
    object-fit: contain;
    background: var(--bs-light);
    border-radius: 4px;
    border: 1px solid var(--bs-border-color);
    transition: transform 0.2s ease;
}

.gallery-preview-thumb:hover {
    transform: scale(1.1);
    border-color: var(--bs-primary);
}

/* Gallery Table Rows */
.gallery-table-row {
    transition: background-color 0.2s ease;
}

.gallery-table-row:hover {
    background-color: var(--bs-light);
}

/* ===== GALLERY SEARCH STYLES ===== */

/* Search Loading State */
.search-loading {
    z-index: 1050;
}

/* Search Input Focus */
#gallery-search:focus {
    border-color: var(--bs-primary);
    box-shadow: 0 0 0 0.2rem rgba(var(--bs-primary-rgb), 0.25);
}

/* ===== GALLERY EMPTY STATES ===== */

/* No Galleries State */
.gallery-empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--bs-secondary);
}

.gallery-empty-state i {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.gallery-empty-state h4 {
    margin-bottom: 0.5rem;
    font-weight: 300;
}

.gallery-empty-state p {
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
}

/* No Images in Gallery State */
.gallery-no-images {
    text-align: center;
    padding: 2rem;
    color: var(--bs-secondary);
    background: var(--bs-light);
    border-radius: 8px;
    margin: 1rem 0;
}

.gallery-no-images i {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    opacity: 0.5;
}

/* ===== RESPONSIVE DESIGN ===== */

/* Mobile Styles */
@media (max-width: 768px) {
    .gallery-manage-grid {
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 0.75rem;
    }
    
    .gallery-image-item {
        padding: 0.5rem;
        min-height: 140px;
    }
    
    .gallery-image-item img {
        min-height: 80px;
        max-height: 100px;
    }
    
    .gallery-preview-overlay {
        height: 150px;
    }
    
    .gallery-card-header,
    .gallery-card-footer {
        padding: 0.5rem;
    }
    
    .gallery-card-info {
        padding: 0.75rem;
    }
}

/* Tablet Styles */
@media (max-width: 992px) {
    .gallery-manage-grid {
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
    }
    
    .gallery-preview-overlay {
        height: 180px;
    }
}

/* ===== DARK THEME SUPPORT ===== */

/* Dark Theme Adjustments for Gallery Management */
[data-bs-theme="dark"] .gallery-image-item {
    box-shadow: 0 2px 4px rgba(255, 255, 255, 0.1);
    background: var(--bs-dark);
}

[data-bs-theme="dark"] .gallery-image-item:hover {
    box-shadow: 0 4px 8px rgba(255, 255, 255, 0.15);
}

[data-bs-theme="dark"] .gallery-image-item.sortable-chosen {
    box-shadow: 0 5px 15px rgba(255, 255, 255, 0.2);
}

/* Dark Theme for Gallery Cards */
[data-bs-theme="dark"] .gallery-card {
    background: var(--bs-dark);
    border-color: var(--bs-border-color-translucent);
}

[data-bs-theme="dark"] .gallery-card:hover {
    box-shadow: 0 4px 12px rgba(255, 255, 255, 0.1);
}

[data-bs-theme="dark"] .gallery-card-header,
[data-bs-theme="dark"] .gallery-card-footer {
    background: var(--bs-dark);
    border-color: var(--bs-border-color-translucent);
}

[data-bs-theme="dark"] .gallery-empty-state,
[data-bs-theme="dark"] .gallery-no-images {
    background: var(--bs-dark);
}

/* ===== ACCESSIBILITY IMPROVEMENTS ===== */

/* Focus Styles */
.gallery-image-item:focus,
.gallery-preview-overlay:focus {
    outline: 2px solid var(--bs-primary);
    outline-offset: 2px;
}

/* Reduced Motion Support */
@media (prefers-reduced-motion: reduce) {
    .gallery-image-item,
    .gallery-preview-image,
    .gallery-card,
    .gallery-image-actions .btn {
        transition: none;
    }
}

/* High Contrast Mode */
@media (prefers-contrast: high) {
    .gallery-image-item {
        border-width: 3px;
    }
    
    .gallery-card {
        border-width: 2px;
    }
}

// ----- END FILE: plugins/AdminTheme/webroot/css/images-grid.css -----

FILE: plugins/AdminTheme/webroot/css/admin-layout.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 10993 bytes
CONTENT:
/**
 * AdminTheme Layout CSS
 * Core layout styles for the Willow CMS admin interface
 */

/* Layout Base */
body.admin-layout {
  height: 100vh;
  overflow: hidden;
  margin: 0 !important;
  padding: 0 !important;
}

html, body {
  margin: 0;
  padding: 0;
}

.admin-header {
  height: 60px;
  min-height: 60px;
  z-index: 1030;
}

.admin-container {
  display: flex;
  height: calc(100vh - 60px);
  overflow: hidden;
  width: 100%;
}

/* Sidebar Base Styles */
.admin-sidebar {
  width: 200px;
  min-width: 200px;
  height: 100%;
  overflow-y: auto;
  overflow-x: hidden;
  z-index: 1020;
  transition: width 0.3s ease, min-width 0.3s ease;
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
  position: relative;
  left: 0;
}

.admin-sidebar::-webkit-scrollbar {
  display: none; /* Chrome, Safari and Opera */
}

/* Sidebar Collapsed State */
.admin-sidebar.collapsed {
  width: 60px !important;
  min-width: 60px !important;
  max-width: 60px !important;
  position: relative;
  left: 0;
  overflow-y: auto !important;
  overflow-x: visible !important;
  margin: 0 !important;
  padding: 0 !important;
  height: 100%;
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
}

.admin-sidebar.collapsed::-webkit-scrollbar {
  display: none; /* Chrome, Safari and Opera */
}

/* Main Content Area */
.admin-main {
  flex: 1;
  height: 100%;
  overflow-y: auto;
  background-color: var(--bs-body-bg);
  transition: margin-left 0.3s ease;
  min-width: 0; /* Allows flex item to shrink below content size */
}

.admin-content {
  min-height: 100%;
  width: 100%;
  max-width: 100%;
  position: relative;
}

/* Sidebar Content */
.sidebar-content {
  padding: 1rem 0;
  width: 100%;
  box-sizing: border-box;
}

.admin-sidebar.collapsed .sidebar-content {
  padding: 2px 0;
  width: 60px;
  overflow: visible;
  margin: 0;
  height: 100%;
}

.admin-sidebar.collapsed .list-group {
  width: 60px;
  margin: 0;
  padding: 0;
}

.admin-sidebar.collapsed .list-group-flush {
  border: none;
}

/* Sidebar Headers */
.sidebar-header {
  background-color: transparent !important;
  padding: 0.75rem 1rem 0.25rem;
}

.sidebar-header h6 {
  font-size: 0.75rem;
  font-weight: 600;
  letter-spacing: 0.05em;
  text-transform: uppercase;
}

/* Sidebar Links */
.sidebar-link {
  padding: 0.75rem 1rem;
  border: none !important;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
}

.sidebar-link:hover {
  background-color: var(--bs-primary-bg-subtle);
  color: var(--bs-primary);
}

.sidebar-link.active {
  background-color: var(--bs-primary) !important;
  color: white !important;
  border-radius: 0;
}

.sidebar-link.active:hover {
  background-color: var(--bs-primary) !important;
  color: white !important;
}

/* Collapsed sidebar hover states - no animation */
.admin-sidebar.collapsed .sidebar-link:hover {
  background-color: var(--bs-primary-bg-subtle);
  color: var(--bs-primary);
  border-radius: 6px;
  margin: 0 4px 0 4px;
  width: 52px;
  padding: 0;
  line-height: 40px;
  height: 40px;
}

.admin-sidebar.collapsed .sidebar-link.active {
  background-color: var(--bs-primary);
  color: white;
  border-radius: 6px;
  margin: 0 4px 0 4px;
  width: 52px;
  padding: 0;
  line-height: 40px;
  height: 40px;
}

/* Sidebar Icons */
.sidebar-icon {
  width: 1.25rem;
  text-align: center;
  flex-shrink: 0;
  margin-right: 0.5rem;
}

.sidebar-text {
  transition: opacity 0.3s ease;
  white-space: nowrap;
}

/* Preload collapsed state - applies immediately without transition */
.sidebar-preload-collapsed .admin-sidebar {
  width: 60px !important;
  min-width: 60px !important;
  max-width: 60px !important;
  transition: none !important;
}

.sidebar-preload-collapsed .admin-sidebar .sidebar-text {
  opacity: 0 !important;
  visibility: hidden !important;
}

.sidebar-preload-collapsed .admin-sidebar .sidebar-header {
  display: none !important;
}

.sidebar-preload-collapsed .admin-sidebar .sidebar-link {
  padding: 0 !important;
  margin-bottom: 0 !important;
  width: 60px !important;
  display: block !important;
  text-align: center !important;
  position: relative !important;
  line-height: 40px !important;
  height: 40px !important;
}

.sidebar-preload-collapsed .admin-sidebar .sidebar-icon {
  margin: 0 auto !important;
  width: 60px !important;
  text-align: center !important;
  display: block !important;
  font-size: 16px !important;
  line-height: 40px !important;
}

.sidebar-preload-collapsed .admin-sidebar .list-group-item {
  padding: 0 !important;
  margin-bottom: 0 !important;
  width: 60px !important;
  display: block !important;
  text-align: center !important;
  line-height: 40px !important;
  height: 40px !important;
}

/* Collapsed state */
.admin-sidebar.collapsed .sidebar-text {
  opacity: 0;
  visibility: hidden;
}

.admin-sidebar.collapsed .sidebar-header {
  display: none !important;
}

.admin-sidebar.collapsed .sidebar-header h6 {
  display: none;
}

.admin-sidebar.collapsed .sidebar-header::before {
  display: none;
}

.admin-sidebar.collapsed .sidebar-link {
  padding: 0;
  margin-bottom: 0;
  width: 60px;
  display: block;
  text-align: center;
  position: relative;
  line-height: 40px;
  height: 40px;
}

.admin-sidebar.collapsed .sidebar-icon {
  margin: 0 auto;
  width: 60px;
  text-align: center;
  display: block;
  font-size: 16px;
  line-height: 40px;
}

/* Ensure all FontAwesome icons are centered - this targets icons inside sidebar-icon class */
.admin-sidebar.collapsed .sidebar-icon.fa,
.admin-sidebar.collapsed .sidebar-icon.fas,
.admin-sidebar.collapsed .sidebar-icon.far,
.admin-sidebar.collapsed .sidebar-icon.fab {
  display: block !important;
  font-size: 16px;
  line-height: 40px;
  margin: 0 auto;
  text-align: center;
  width: 60px;
}

.admin-sidebar.collapsed .list-group-item {
  padding: 0;
  margin-bottom: 0;
  width: 60px;
  display: block;
  text-align: center;
  line-height: 40px;
  height: 40px;
}

/* Tooltip positioning for collapsed sidebar */
.admin-sidebar.collapsed .sidebar-link[data-bs-toggle="tooltip"] {
  cursor: pointer;
}

/* Mobile Responsiveness */
@media (max-width: 991.98px) {
  .admin-sidebar {
    display: none;
  }
  
  .admin-main {
    width: 100%;
  }
}

/* Fix for mobile table overflow */
.table-responsive {
  -webkit-overflow-scrolling: touch;
}

/* Theme-specific adjustments */
[data-bs-theme="dark"] .admin-sidebar {
  background-color: var(--bs-dark) !important;
  border-color: var(--bs-border-color) !important;
}

[data-bs-theme="dark"] .sidebar-link {
  background-color: transparent;
  color: var(--bs-body-color);
}

[data-bs-theme="dark"] .sidebar-link:hover {
  background-color: var(--bs-primary-bg-subtle);
  color: var(--bs-primary);
}

[data-bs-theme="dark"] .sidebar-link.active {
  background-color: var(--bs-primary) !important;
  color: white !important;
}

[data-bs-theme="dark"] .sidebar-link.active:hover {
  background-color: var(--bs-primary) !important;
  color: white !important;
}

[data-bs-theme="dark"] .sidebar-header h6 {
  color: var(--bs-secondary);
}

[data-bs-theme="dark"] .admin-sidebar.collapsed .sidebar-header::before {
  background-color: var(--bs-secondary);
}

[data-bs-theme="dark"] .admin-sidebar.collapsed .sidebar-link:hover {
  background-color: var(--bs-primary-bg-subtle);
  color: var(--bs-primary);
}

/* Ensure Flash messages are visible */
.alert {
  margin-bottom: 1rem;
}

/* Better mobile navigation */
.admin-header .container-fluid {
  padding-left: 1rem;
  padding-right: 1rem;
}

.offcanvas-body {
  padding: 0;
}

/* Custom offcanvas width - make it more compact */
.offcanvas.offcanvas-start {
  width: 220px !important;
  max-width: 75vw;
}

/* Ensure offcanvas content fits properly */
.offcanvas .list-group-item {
  white-space: nowrap;
  padding: 0.75rem 1rem;
}

.offcanvas .sidebar-header {
  padding: 0.75rem 1rem 0.25rem;
}

.offcanvas .sidebar-header h6 {
  font-size: 0.75rem;
  font-weight: 600;
  letter-spacing: 0.05em;
  text-transform: uppercase;
  margin-bottom: 0.5rem;
}

/* Improved accessibility */
.sidebar-link:focus {
  outline: 2px solid var(--bs-primary);
  outline-offset: -2px;
}

/* Toggle button styling */
#sidebarToggle {
  transition: transform 0.3s ease;
}

#sidebarToggle:hover {
  transform: scale(1.1);
}

/* Header layout adjustments */
.admin-header .container-fluid {
  padding-left: 1rem;
  padding-right: 1rem;
}

/* Center the burger menu button better by adjusting the flex container */
.admin-header .d-flex.align-items-center:first-child {
  margin-left: -0.5rem;
}

/* Page actions floating styling */
.page-actions-floating {
  position: relative;
  display: flex;
  justify-content: flex-end;
  margin-bottom: 1rem;
  z-index: 10;
}

.page-actions-floating .btn-group {
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  border-radius: 0.5rem;
  overflow: hidden;
  border: 1px solid rgba(255,255,255,0.2);
}

.page-actions-floating .btn {
  border: none;
  font-size: 0.875rem;
  padding: 0.6rem 1rem;
  transition: all 0.2s ease;
  position: relative;
}

.page-actions-floating .btn + .btn {
  border-left: 1px solid rgba(255,255,255,0.3);
}

.page-actions-floating .btn:hover {
  transform: translateY(-1px);
  box-shadow: 0 3px 6px rgba(0,0,0,0.15);
}

.page-actions-floating .btn:first-child {
  border-top-left-radius: 0.5rem;
  border-bottom-left-radius: 0.5rem;
}

.page-actions-floating .btn:last-child {
  border-top-right-radius: 0.5rem;
  border-bottom-right-radius: 0.5rem;
}

/* Improved button color harmony */
.page-actions-floating .btn-secondary {
  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
  border: none;
  color: white;
}

.page-actions-floating .btn-primary {
  background: linear-gradient(135deg, #0d6efd 0%, #0b5ed7 100%);
  border: none;
  color: white;
}

.page-actions-floating .btn-success {
  background: linear-gradient(135deg, #198754 0%, #157347 100%);
  border: none;
  color: white;
}

.page-actions-floating .btn-warning {
  background: linear-gradient(135deg, #ffc107 0%, #ffb302 100%);
  border: none;
  color: #212529;
}

.page-actions-floating .btn-danger {
  background: linear-gradient(135deg, #dc3545 0%, #bb2d3b 100%);
  border: none;
  color: white;
}

/* Responsive adjustments for page actions */
@media (max-width: 767.98px) {
  .page-actions-floating {
    justify-content: center;
  }
  
  .page-actions-floating .btn-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    box-shadow: none;
    border: none;
  }
  
  .page-actions-floating .btn {
    border-radius: 0.5rem !important;
    margin-bottom: 0.25rem;
    min-width: auto;
  }

  .page-actions-floating .btn + .btn {
    border-left: none;
  }
}

/* Dashboard and content layout improvements */
.container-fluid {
  max-width: 100%;
  padding-left: 1rem;
  padding-right: 1rem;
}

/* Ensure cards and content expand properly */
.row {
  margin-left: 0;
  margin-right: 0;
}

.row > * {
  padding-left: 0.75rem;
  padding-right: 0.75rem;
}

// ----- END FILE: plugins/AdminTheme/webroot/css/admin-layout.css -----

FILE: plugins/AdminTheme/webroot/css/photo-gallery.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 18296 bytes
CONTENT:
/**
 * Photo Gallery Styles
 * Beautiful image gallery component styles
 */

/* Gallery Grid Layout */
.photo-gallery {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    margin: 1.5rem 0;
}

.gallery-item {
    position: relative;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    background: #fff;
}

.gallery-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.gallery-item a {
    display: block;
    text-decoration: none;
    color: inherit;
}

.gallery-item img {
    width: 100%;
    height: 200px;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.gallery-item:hover img {
    transform: scale(1.05);
}

/* Gallery Item Overlay */
.gallery-item-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
    color: white;
    padding: 1rem;
    transform: translateY(100%);
    transition: transform 0.3s ease;
}

.gallery-item:hover .gallery-item-overlay {
    transform: translateY(0);
}

.gallery-item-title {
    font-weight: 600;
    font-size: 0.9rem;
    margin-bottom: 0.25rem;
}

.gallery-item-caption {
    font-size: 0.8rem;
    opacity: 0.9;
    line-height: 1.3;
}

/* Gallery Header */
.gallery-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #e9ecef;
}

.gallery-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: #495057;
    margin: 0;
}

.gallery-count {
    background: #6c757d;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 500;
}

/* Empty Gallery State */
.gallery-empty {
    text-align: center;
    padding: 3rem 1rem;
    color: #6c757d;
}

.gallery-empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.gallery-empty-text {
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
}

.gallery-empty-subtext {
    font-size: 0.9rem;
    opacity: 0.7;
}

/* PhotoSwipe Custom Styles */
.pswp__custom-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.9), transparent);
    color: white;
    padding: 1.5rem;
    text-align: left;
    backdrop-filter: blur(10px);
    transition: all 0.4s ease-in-out;
    transform: translateY(100%);
    opacity: 0;
}

/* Show caption with slide-up animation */
.pswp__slide--active .pswp__custom-caption {
    transform: translateY(0);
    opacity: 1;
    animation: captionSlideUp 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

@keyframes captionSlideUp {
    0% {
        transform: translateY(100%);
        opacity: 0;
    }
    100% {
        transform: translateY(0);
        opacity: 1;
    }
}

.pswp__caption-title {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.pswp__caption-description {
    font-size: 0.95rem;
    line-height: 1.4;
    opacity: 0.9;
}

/* Slideshow Controls */
.pswp__slideshow-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-left: 1rem;
}

.pswp__slideshow-controls .pswp__button {
    width: 44px;
    height: 44px;
    background: rgba(0, 0, 0, 0.3);
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    backdrop-filter: blur(8px);
}

.pswp__slideshow-controls .pswp__button:hover {
    background: rgba(0, 0, 0, 0.6);
    transform: scale(1.1);
}

.pswp__slideshow-controls .pswp__button:active {
    transform: scale(0.95);
}

.pswp__slideshow-controls svg {
    width: 20px;
    height: 20px;
}

/* Image Counter - Clean text only */
.pswp__image-counter {
    color: white !important;
    font-size: 1rem !important;
    font-weight: 500 !important;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8) !important;
    margin-left: auto !important;
    margin-right: 1rem !important;
    padding: 0.25rem 0 !important;
    background: none !important;
    border: none !important;
    backdrop-filter: none !important;
    box-shadow: none !important;
}

/* Progress Indicator */
.pswp__slideshow-progress {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: rgba(255, 255, 255, 0.2);
    z-index: 9999;
}

.pswp__progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #007bff, #28a745);
    width: 0%;
    border-radius: 2px;
    box-shadow: 0 0 8px rgba(0, 123, 255, 0.5);
}

@keyframes slideshow-progress {
    0% {
        width: 0%;
        opacity: 0.8;
        box-shadow: 0 0 8px rgba(0, 123, 255, 0.5);
    }
    50% {
        opacity: 1;
        box-shadow: 0 0 12px rgba(0, 123, 255, 0.8);
    }
    100% {
        width: 100%;
        opacity: 0.9;
        box-shadow: 0 0 8px rgba(40, 167, 69, 0.5);
    }
}

/* Pulsing effect for progress bar */
@keyframes progressPulse {
    0%, 100% {
        transform: scaleY(1);
    }
    50% {
        transform: scaleY(1.2);
    }
}

/* Enhanced progress bar animation */
.pswp__progress-bar {
    animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);
    position: relative;
}

.pswp__progress-bar:before {
    content: '';
    position: absolute;
    top: -2px;
    left: 0;
    right: 0;
    bottom: -2px;
    background: linear-gradient(90deg, 
        rgba(0, 123, 255, 0.3) 0%, 
        rgba(40, 167, 69, 0.3) 100%);
    border-radius: 4px;
    animation: progressPulse 2s ease-in-out infinite;
}

/* Enhanced PhotoSwipe UI */
.pswp__top-bar {
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), transparent);
    backdrop-filter: blur(8px);
    display: flex;
    align-items: center;
    padding: 1rem;
}

.pswp__button {
    transition: all 0.2s ease;
}

.pswp__button:hover {
    transform: scale(1.1);
}

/* Slideshow Status Indicator */
.pswp__slideshow-status {
    position: absolute;
    top: 1rem;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    z-index: 10000;
    backdrop-filter: blur(8px);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.pswp__slideshow-status.show {
    opacity: 1;
}

/* No custom transitions - let PhotoSwipe handle everything */

/* Smooth background transitions */
.pswp {
    transition: background-color 0.3s ease-in-out;
}

/* Enhanced button hover effects */
.pswp__button {
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transform-origin: center;
}

.pswp__button:hover {
    transform: scale(1.1);
    filter: brightness(1.2);
}

.pswp__button:active {
    transform: scale(0.95);
}

/* Enhanced Mobile optimizations for AdminTheme */
@media (max-width: 768px) {
    .pswp__slideshow-controls .pswp__button {
        width: 48px; /* Larger touch targets */
        height: 48px;
        min-width: 48px; /* Ensure minimum touch target size */
        min-height: 48px;
    }
    
    .pswp__slideshow-controls svg {
        width: 20px; /* Slightly larger for better visibility */
        height: 20px;
    }
    
    .pswp__image-counter {
        font-size: 0.95rem;
        padding: 0.5rem 1rem;
        margin-right: 0.75rem;
        background: rgba(0, 0, 0, 0.5) !important;
        border-radius: 20px !important;
        backdrop-filter: blur(8px) !important;
    }
    
    .pswp__slideshow-controls {
        margin-left: 0.75rem;
        gap: 0.5rem;
    }
    
    /* Better touch interactions for mobile admin */
    .gallery-item {
        min-height: 180px; /* Larger touch targets for gallery items */
    }
    
    .gallery-item-overlay {
        /* Always show overlay slightly on mobile for better UX */
        transform: translateY(80%);
        background: linear-gradient(to top, rgba(0, 0, 0, 0.9), rgba(0, 0, 0, 0.3));
    }
    
    .gallery-item:hover .gallery-item-overlay,
    .gallery-item:focus .gallery-item-overlay,
    .gallery-item:active .gallery-item-overlay {
        transform: translateY(0);
    }
    
    /* Enhanced button styles for mobile admin */
    .pswp__button {
        min-width: 44px;
        min-height: 44px;
        border-radius: 8px !important; /* More admin-like appearance */
        background: rgba(33, 37, 41, 0.8) !important;
        backdrop-filter: blur(12px) !important;
    }
    
    .pswp__button:hover {
        background: rgba(33, 37, 41, 0.95) !important;
        transform: scale(1.05); /* Less aggressive scaling on mobile */
    }
}

/* Responsive Design */
@media (max-width: 768px) {
    .photo-gallery {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 0.75rem;
    }
    
    .gallery-item img {
        height: 150px;
    }
    
    .gallery-item-overlay {
        padding: 0.75rem;
    }
    
    .gallery-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
    
    .pswp__custom-caption {
        padding: 1rem;
    }
    
    .pswp__caption-title {
        font-size: 1rem;
    }
    
    .pswp__caption-description {
        font-size: 0.85rem;
    }
}

@media (max-width: 480px) {
    .photo-gallery {
        grid-template-columns: repeat(2, 1fr);
        gap: 0.75rem; /* Slightly larger gap for better touch targets */
    }
    
    .gallery-item img {
        height: 140px; /* Larger images on small screens */
    }
    
    .gallery-item {
        min-height: 140px;
    }
    
    /* Stack admin actions vertically on very small screens */
    .admin-gallery .btn-group {
        flex-direction: column;
        width: 100%;
    }
    
    .admin-gallery .btn-group .btn {
        margin-bottom: 0.5rem;
    }
    
    /* Improve slideshow controls on very small screens */
    .pswp__slideshow-controls {
        justify-content: center;
        margin: 0 auto;
        width: auto;
    }
    
    .pswp__image-counter {
        position: absolute;
        top: 1rem;
        right: 1rem;
        margin: 0;
        font-size: 0.85rem;
        padding: 0.4rem 0.8rem;
    }
}

/* Loading State and Lazy Loading */
.gallery-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 3rem;
    color: #6c757d;
}

.gallery-loading-spinner {
    display: inline-block;
    width: 2rem;
    height: 2rem;
    border: 2px solid #e9ecef;
    border-radius: 50%;
    border-top-color: #007bff;
    animation: spin 1s ease-in-out infinite;
    margin-right: 0.75rem;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

/* Lazy Loading States */
.gallery-image[data-src],
.gallery-preview-image[data-src] {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
}

.gallery-image.lazy-loading,
.gallery-preview-image.lazy-loading {
    background: linear-gradient(90deg, #f8f9fa 25%, #e9ecef 50%, #f8f9fa 75%);
    background-size: 200% 100%;
    animation: shimmer 1.2s infinite;
}

.gallery-image.lazy-loaded,
.gallery-preview-image.lazy-loaded {
    animation: fadeIn 0.3s ease-in;
}

.gallery-image.lazy-error,
.gallery-preview-image.lazy-error {
    background: #f8d7da;
    position: relative;
}

.gallery-image.lazy-error::after,
.gallery-preview-image.lazy-error::after {
    content: '\f071'; /* Font Awesome warning icon */
    font-family: 'Font Awesome 5 Free';
    font-weight: 900;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #721c24;
    font-size: 1.5rem;
}

@keyframes shimmer {
    0% {
        background-position: -200% 0;
    }
    100% {
        background-position: 200% 0;
    }
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

/* Performance optimizations */
.gallery-item img {
    will-change: transform; /* Optimize for transforms */
}

.gallery-item:hover img {
    will-change: auto; /* Reset after hover */
}

/* Bulk Actions Styling */
.gallery-item-selected {
    outline: 3px solid var(--bs-primary, #007bff);
    outline-offset: 2px;
    box-shadow: 0 0 0 5px rgba(0, 123, 255, 0.2);
    transform: scale(1.02);
    z-index: 5;
}

.gallery-selection-checkbox {
    transition: all 0.2s ease;
}

.gallery-selection-checkbox:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.gallery-selection-checkbox .form-check-input {
    width: 20px;
    height: 20px;
    border-width: 2px;
    border-color: var(--bs-primary, #007bff);
}

.gallery-selection-checkbox .form-check-input:checked {
    background-color: var(--bs-primary, #007bff);
    border-color: var(--bs-primary, #007bff);
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.3);
}

/* Bulk Actions Panel */
.bulk-actions-panel {
    background: var(--bs-light, #f8f9fa);
    border: 1px solid var(--bs-border-color, #dee2e6);
    border-radius: 8px;
    padding: 1.5rem;
}

.bulk-actions-panel .btn-group-vertical {
    width: 100%;
}

.bulk-actions-panel .btn {
    text-align: left;
    justify-content: flex-start;
}

.bulk-actions-panel .btn:disabled {
    opacity: 0.5;
    pointer-events: none;
}

/* Statistics Cards */
.gallery-stats-card {
    border: none;
    border-radius: 12px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.gallery-stats-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);
}

.gallery-stats-card .card-body {
    padding: 1.5rem;
}

.gallery-stats-card h3 {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
}

.gallery-stats-card p {
    font-size: 0.9rem;
    margin-bottom: 0;
    opacity: 0.9;
}

/* Selection Status Alert */
#selection-status {
    border-radius: 8px;
    border: none;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
}

/* Quick Actions */
.quick-actions .btn {
    margin: 0.25rem;
    border-radius: 6px;
    font-weight: 500;
}

.quick-actions .btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

/* Enhanced admin theme integration */
.admin-gallery .gallery-item-selected {
    outline-color: var(--bs-primary);
    box-shadow: 0 0 0 5px rgba(var(--bs-primary-rgb, 0, 123, 255), 0.2);
    border-color: var(--bs-primary);
}

.admin-gallery .bulk-actions-panel {
    background: var(--bs-body-bg);
    border-color: var(--bs-border-color);
}

.admin-gallery .gallery-stats-card {
    background: var(--bs-body-bg);
    border-color: var(--bs-border-color);
}

/* Responsive adjustments for bulk actions */
@media (max-width: 768px) {
    .gallery-selection-checkbox {
        top: 8px;
        left: 8px;
        padding: 3px;
    }
    
    .gallery-selection-checkbox .form-check-input {
        width: 18px;
        height: 18px;
    }
    
    .bulk-actions-panel .btn-group-vertical {
        gap: 0.5rem;
    }
    
    .quick-actions {
        text-align: center;
    }
    
    .quick-actions .btn {
        margin: 0.25rem 0;
        width: 100%;
    }
}

/* Reduce motion for users who prefer it */
@media (prefers-reduced-motion: reduce) {
    .gallery-item img,
    .gallery-item-overlay,
    .pswp__button,
    .gallery-image.lazy-loaded,
    .gallery-preview-image.lazy-loaded {
        transition: none;
        animation: none;
    }
    
    .gallery-image.lazy-loading,
    .gallery-preview-image.lazy-loading {
        animation: none;
        background: #f8f9fa;
    }
    
    .gallery-item-selected {
        transform: none;
    }
    
    .gallery-selection-checkbox:hover {
        transform: none;
    }
    
    .gallery-stats-card:hover {
        transform: none;
    }
}

/* Admin Theme Integration */
.admin-gallery {
    background: var(--bs-body-bg);
    border: 1px solid var(--bs-border-color);
    border-radius: 8px;
    padding: 1.5rem;
}

.admin-gallery .gallery-header {
    border-bottom-color: var(--bs-border-color);
}

.admin-gallery .gallery-header .gallery-title {
    color: var(--bs-body-color);
}

.admin-gallery .gallery-item {
    background: var(--bs-body-bg);
    border: 1px solid var(--bs-border-color);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.admin-gallery .gallery-item:hover {
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
    border-color: var(--bs-primary);
}

.admin-gallery .gallery-empty {
    color: var(--bs-text-muted);
}

.admin-gallery .gallery-count {
    background: var(--bs-secondary);
    color: var(--bs-light);
}

/* Default Theme Integration */
.default-gallery {
    margin: 2rem 0;
}

.default-gallery .gallery-item {
    border-radius: 4px;
}

/* Ensure images maintain aspect ratio and don't fill entire viewport */
.pswp__img {
    object-fit: contain !important;
}

/* Prevent zoom container from forcing full viewport */
.pswp__zoom-wrap {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
}

/* Remove grey background box behind images */
.pswp__item {
    background: transparent !important;
}

.pswp__img--placeholder {
    background: transparent !important;
}

.pswp__content {
    background: transparent !important;
}

/* Gallery Item Link Improvements */
.gallery-item a {
    display: block;
    text-decoration: none !important;
    color: inherit;
    border: none !important;
    outline: none !important;
    border-radius: 8px;
    overflow: hidden;
}

.gallery-item a:hover,
.gallery-item a:focus,
.gallery-item a:active {
    text-decoration: none !important;
    border: none !important;
    outline: none !important;
    box-shadow: none !important;
}

.gallery-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    transition: transform 0.3s ease;
    border: none !important;
    border-radius: 8px;
}

.gallery-item:hover .gallery-image {
    transform: scale(1.05);
}

/* High DPI / Retina Support */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .gallery-item img {
        image-rendering: -webkit-optimize-contrast;
        image-rendering: crisp-edges;
    }
}

// ----- END FILE: plugins/AdminTheme/webroot/css/photo-gallery.css -----

FILE: plugins/AdminTheme/webroot/css/markdown.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 2337 bytes
CONTENT:
/* Base markdown preview styles */
#markdown-preview {
    font-family: var(--bs-body-font-family);
    line-height: 1.6;
}

/* Headings */
#markdown-preview h1,
#markdown-preview h2,
#markdown-preview h3,
#markdown-preview h4,
#markdown-preview h5,
#markdown-preview h6 {
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    font-weight: 600;
    line-height: 1.25;
}

/* Lists */
#markdown-preview ul,
#markdown-preview ol {
    padding-left: 2rem;
    margin-bottom: 1rem;
}

#markdown-preview li {
    margin-bottom: 0.25rem;
}

/* Code blocks and inline code */
#markdown-preview code {
    padding: 2px 4px;
    border-radius: 4px;
    font-family: monospace;
}

#markdown-preview pre {
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 4px;
    overflow-x: auto;
}

#markdown-preview pre code {
    padding: 0;
    border-radius: 0;
    background: transparent;
}

/* Light/Dark mode support */
:root {
    --md-code-bg: #f8f9fa;
    --md-code-color: #212529;
    --md-pre-bg: #f8f9fa;
    --md-pre-border: #dee2e6;
    --md-blockquote-border: #dee2e6;
}

[data-bs-theme="dark"] {
    --md-code-bg: #2d2d2d;
    --md-code-color: #e9ecef;
    --md-pre-bg: #1e1e1e;
    --md-pre-border: #373b3e;
    --md-blockquote-border: #373b3e;
}

#markdown-preview code {
    background-color: var(--md-code-bg);
    color: var(--md-code-color);
}

#markdown-preview pre {
    background-color: var(--md-pre-bg);
    border: 1px solid var(--md-pre-border);
}

/* Blockquotes */
#markdown-preview blockquote {
    padding-left: 1rem;
    margin: 1rem 0;
    border-left: 4px solid var(--md-blockquote-border);
}

/* Links */
#markdown-preview a {
    color: var(--bs-link-color);
    text-decoration: none;
}

#markdown-preview a:hover {
    color: var(--bs-link-hover-color);
    text-decoration: underline;
}

/* Tables */
#markdown-preview table {
    width: 100%;
    margin-bottom: 1rem;
    border-collapse: collapse;
}

#markdown-preview th,
#markdown-preview td {
    padding: 0.5rem;
    border: 1px solid var(--md-pre-border);
}

#markdown-preview th {
    background-color: var(--md-code-bg);
}

/* Images */
#markdown-preview img {
    max-width: 100%;
    height: auto;
    margin: 1rem 0;
}

/* Horizontal rules */
#markdown-preview hr {
    margin: 2rem 0;
    border: 0;
    border-top: 1px solid var(--md-pre-border);
}

// ----- END FILE: plugins/AdminTheme/webroot/css/markdown.css -----

FILE: plugins/AdminTheme/webroot/css/theme.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 3742 bytes
CONTENT:
/* Theme Variables */
:root {
    /* Base colors */
    --theme-bg: #ffffff;
    --theme-text: #212529;
    --theme-border: #dee2e6;
    --theme-hover: #f8f9fa;
    
    /* Component colors */
    --theme-sidebar-bg: #f8f9fa;
    --theme-sidebar-text: #212529;
    --theme-header-bg: #ffffff;
    --theme-header-text: #212529;
    
    /* Interactive elements */
    --theme-link-color: #0d6efd;
    --theme-link-hover: #0a58ca;
    --theme-button-primary: #0d6efd;
    --theme-button-hover: #0b5ed7;
    
    /* Status colors */
    --theme-success: rgb(72, 133, 102);
    --theme-error: rgb(255, 0, 0);
    --theme-warning: rgb(255, 153, 0);
    
    /* Code and pre elements */
    --theme-code-bg: #f8f9fa;
    --theme-code-text: #212529;
    --theme-pre-bg: #f5f5f5;
    --theme-pre-border: #dee2e6;
}

/* Dark theme variables */
[data-bs-theme="dark"] {
    /* Base colors */
    --theme-bg: #212529;
    --theme-text: #f8f9fa;
    --theme-border: #495057;
    --theme-hover: #343a40;
    
    /* Component colors */
    --theme-sidebar-bg: #2b3035;
    --theme-sidebar-text: #e9ecef;
    --theme-header-bg: #343a40;
    --theme-header-text: #f8f9fa;
    
    /* Interactive elements */
    --theme-link-color: #6ea8fe;
    --theme-link-hover: #8bb9fe;
    --theme-button-primary: #0d6efd;
    --theme-button-hover: #0b5ed7;
    
    /* Status colors remain the same for visibility */
    --theme-success: rgb(72, 133, 102);
    --theme-error: rgb(255, 0, 0);
    --theme-warning: rgb(255, 153, 0);
    
    /* Code and pre elements */
    --theme-code-bg: #2d2d2d;
    --theme-code-text: #e9ecef;
    --theme-pre-bg: #1e1e1e;
    --theme-pre-border: #373b3e;
}

/* Base theme styles */
body {
    background-color: var(--theme-bg);
    color: var(--theme-text);
}

/* Links */
a {
    color: var(--theme-link-color);
    text-decoration: none;
}

a:hover {
    color: var(--theme-link-hover);
    text-decoration: none;
}

/* Borders and dividers */
.border {
    border-color: var(--theme-border) !important;
}

/* Code elements */
pre, .pre {
    background-color: var(--theme-pre-bg) !important;
    border: 1px solid var(--theme-pre-border) !important;
    color: var(--theme-code-text) !important;
    padding: 1rem;
}

code, .code {
    background-color: var(--theme-code-bg) !important;
    color: var(--theme-code-text) !important;
    padding: 0.2em 0.4em;
    border-radius: 3px;
}

/* For code blocks within pre elements */
pre code {
    background-color: transparent !important;
    padding: 0;
    border-radius: 0;
}

/* Status backgrounds */
.bg-success {
    background-color: var(--theme-success) !important;
}

.bg-error {
    background-color: var(--theme-error) !important;
}

.bg-warning {
    background-color: var(--theme-warning) !important;
}

/* Form controls */
.form-control {
    background-color: var(--theme-bg);
    color: var(--theme-text);
    border-color: var(--theme-border);
}

.form-control:focus {
    background-color: var(--theme-bg);
    color: var(--theme-text);
    border-color: var(--theme-link-color);
}

/* Tables */
.table {
    color: var(--theme-text);
    border-color: var(--theme-border);
}

.table th {
    background-color: var(--theme-code-bg);
}

/* Cards */
.card {
    background-color: var(--theme-bg);
    border-color: var(--theme-border);
}

.card-header {
    background-color: var(--theme-code-bg);
    border-bottom-color: var(--theme-border);
}

/* Syntax highlighting adjustments */
[data-bs-theme="dark"] .hljs-string {
    color: #add8e6 !important; /* Light blue for better contrast in dark mode */
}

/* Syntax highlighting adjustments */
[data-bs-theme="dark"] .hljs-regexp {
    color: #00fff2 !important; /* Light green for better contrast in dark mode */
}

// ----- END FILE: plugins/AdminTheme/webroot/css/theme.css -----

FILE: plugins/AdminTheme/webroot/css/willow-admin.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 8260 bytes
CONTENT:
@media (min-width: 768px) {
    .bd-placeholder-img-lg {
        font-size: 3.5rem;
    }
}

.bi {
    vertical-align: -.125em;
    fill: currentColor;
}

.btn-bd-primary {
    --bd-violet-bg: #712cf9;
    --bd-violet-rgb: 112.520718, 44.062154, 249.437846;
    --bs-btn-font-weight: 600;
    --bs-btn-color: var(--bs-white);
    --bs-btn-bg: var(--bd-violet-bg);
    --bs-btn-border-color: var(--bd-violet-bg);
    --bs-btn-hover-color: var(--bs-white);
    --bs-btn-hover-bg: #6528e0;
    --bs-btn-hover-border-color: #6528e0;
    --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);
    --bs-btn-active-color: var(--bs-btn-hover-color);
    --bs-btn-active-bg: #5a23c8;
    --bs-btn-active-border-color: #5a23c8;
}

.bd-mode-toggle {
    z-index: 1500;
}

.bd-mode-toggle .dropdown-menu .active .bi {
    display: block !important;
}

.form-control-dark {
    border-color: var(--bs-gray);
}

.form-control-dark:focus {
    border-color: #fff;
    box-shadow: 0 0 0 .25rem rgba(255, 255, 255, .25);
}

.text-small {
    font-size: 85%;
}

.dropdown-toggle:not(:focus) {
    outline: 0;
}

.bg-debug {
    background-color: rgb(72, 133, 102);
}

.bg-error {
    background-color: rgb(255, 0, 0);
}

.bg-notice {
    background-color: rgb(255, 153, 0);
}

code {
    padding: 2px 4px;
    border-radius: 4px;
    font-family: monospace;
}

pre {
    background-color: #f5f5f5;
    padding: 10px;
    border-radius: 4px;
    overflow-x: auto;
}

/* Base markdown preview styles */
#markdown-preview {
    font-family: var(--bs-body-font-family);
    line-height: 1.6;
}

/* Headings */
#markdown-preview h1,
#markdown-preview h2,
#markdown-preview h3,
#markdown-preview h4,
#markdown-preview h5,
#markdown-preview h6 {
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    font-weight: 600;
    line-height: 1.25;
}

/* Lists */
#markdown-preview ul,
#markdown-preview ol {
    padding-left: 2rem;
    margin-bottom: 1rem;
}

#markdown-preview li {
    margin-bottom: 0.25rem;
}

/* Code blocks and inline code */
#markdown-preview code {
    padding: 2px 4px;
    border-radius: 4px;
    font-family: monospace;
}

#markdown-preview pre {
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 4px;
    overflow-x: auto;
}

#markdown-preview pre code {
    padding: 0;
    border-radius: 0;
    background: transparent;
}

/* Light/Dark mode support */
:root {
    --md-code-bg: #f8f9fa;
    --md-code-color: #212529;
    --md-pre-bg: #f8f9fa;
    --md-pre-border: #dee2e6;
    --md-blockquote-border: #dee2e6;
}

[data-bs-theme="dark"] {
    --md-code-bg: #2d2d2d;
    --md-code-color: #e9ecef;
    --md-pre-bg: #1e1e1e;
    --md-pre-border: #373b3e;
    --md-blockquote-border: #373b3e;
}

#markdown-preview code {
    background-color: var(--md-code-bg);
    color: var(--md-code-color);
}

#markdown-preview pre {
    background-color: var(--md-pre-bg);
    border: 1px solid var(--md-pre-border);
}

/* Blockquotes */
#markdown-preview blockquote {
    padding-left: 1rem;
    margin: 1rem 0;
    border-left: 4px solid var(--md-blockquote-border);
}

/* Links */
#markdown-preview a {
    color: var(--bs-link-color);
    text-decoration: none;
}

#markdown-preview a:hover {
    color: var(--bs-link-hover-color);
    text-decoration: underline;
}

/* Tables */
#markdown-preview table {
    width: 100%;
    margin-bottom: 1rem;
    border-collapse: collapse;
}

#markdown-preview th,
#markdown-preview td {
    padding: 0.5rem;
    border: 1px solid var(--md-pre-border);
}

#markdown-preview th {
    background-color: var(--md-code-bg);
}

/* Images */
#markdown-preview img {
    max-width: 100%;
    height: auto;
    margin: 1rem 0;
}

/* Horizontal rules */
#markdown-preview hr {
    margin: 2rem 0;
    border: 0;
    border-top: 1px solid var(--md-pre-border);
}

/* Semantic UI Dropdown Theme Support */
[data-bs-theme="dark"] .ui.dropdown {
    background-color: #2b3035 !important;
    border-color: #495057 !important;
    color: #e9ecef !important;
}

[data-bs-theme="dark"] .ui.dropdown .menu {
    background-color: #2b3035 !important;
    border-color: #495057 !important;
}

[data-bs-theme="dark"] .ui.dropdown .menu > .item {
    color: #e9ecef !important;
    border-top-color: #495057 !important;
}

[data-bs-theme="dark"] .ui.dropdown .menu > .item:hover {
    background-color: #343a40 !important;
    color: #fff !important;
}

[data-bs-theme="dark"] .ui.dropdown .menu > .selected.item {
    background-color: #0d6efd !important;
    color: #fff !important;
}

[data-bs-theme="dark"] .ui.dropdown .dropdown.icon {
    color: #e9ecef !important;
}

/* Selected tags in the dropdown */
[data-bs-theme="dark"] .ui.dropdown > .label {
    background-color: #0d6efd !important;
    color: #fff !important;
    border-color: #0a58ca !important;
}

/* Light mode (default) styles */
.ui.dropdown {
    background-color: #fff !important;
    border-color: #dee2e6 !important;
    color: #212529 !important;
}

.ui.dropdown .menu {
    background-color: #fff !important;
    border-color: #dee2e6 !important;
}

.ui.dropdown .menu > .item {
    color: #212529 !important;
}

.ui.dropdown .menu > .item:hover {
    background-color: #f8f9fa !important;
    color: #16181b !important;
}

.ui.dropdown .menu > .selected.item {
    background-color: #0d6efd !important;
    color: #fff !important;
}

/* Remove underlines from selected tags and x icons */
[data-bs-theme="dark"] .ui.dropdown > .label,
[data-bs-theme="light"] .ui.dropdown > .label {
    text-decoration: none !important;
}

[data-bs-theme="dark"] .ui.dropdown > .label > .delete.icon,
[data-bs-theme="light"] .ui.dropdown > .label > .delete.icon {
    text-decoration: none !important;
}

/* Additional specificity if needed */
.ui.selection.dropdown .ui.label,
.ui.selection.dropdown .ui.label .delete.icon {
    text-decoration: none !important;
}

.images-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 5px;
}

.image-item {
    border: 1px solid #ccc;
    padding: 5px;
    text-align: center;
}

.image-item img {
    max-width: 100%;
    height: auto;
}

#imageSelectModal {
    z-index: 99999 !important;
}

/* Trumbowyg Dark Mode Support */
[data-bs-theme="dark"] .trumbowyg-box,
[data-bs-theme="dark"] .trumbowyg-editor {
    background: #212529;
    color: #f8f9fa;
    border-color: #495057;
}

[data-bs-theme="dark"] .trumbowyg-button-pane {
    background: #343a40;
    border-bottom-color: #495057;
}

[data-bs-theme="dark"] .trumbowyg-button-pane button {
    background: #343a40;
    color: #f8f9fa;
}

[data-bs-theme="dark"] .trumbowyg-button-pane button:hover,
[data-bs-theme="dark"] .trumbowyg-button-pane button:focus {
    background: #495057;
}

[data-bs-theme="dark"] .trumbowyg-button-pane .trumbowyg-button-group::after {
    background: #495057;
}

[data-bs-theme="dark"] .trumbowyg-editor table {
    border-color: #495057;
}

[data-bs-theme="dark"] .trumbowyg-editor td,
[data-bs-theme="dark"] .trumbowyg-editor th {
    border: 1px solid #495057;
    color: #f8f9fa;
}

[data-bs-theme="dark"] .trumbowyg-editor th {
    background: #343a40;
}

.trumbowyg-editor table {
    width: 100%;
    border-collapse: collapse;
    margin: 1em 0;
}

.trumbowyg-editor td,
.trumbowyg-editor th {
    border: 1px solid #dee2e6;
    padding: 8px;
    min-width: 50px;
}

.trumbowyg-fullscreen .trumbowyg-editor {
    color: black !important;
}

[data-bs-theme="dark"] .trumbowyg-modal,
[data-bs-theme="dark"] .trumbowyg-modal-box {
    background: #212529;
    color: #f8f9fa;
}

[data-bs-theme="dark"] .trumbowyg-modal-box .trumbowyg-modal-title {
    background: #343a40;
    color: #f8f9fa;
    border-bottom: 1px solid #495057;
}

[data-bs-theme="dark"] .trumbowyg-modal-box label {
    color: #f8f9fa;
}

[data-bs-theme="dark"] .trumbowyg-modal-box input {
    background: #343a40;
    color: #f8f9fa;
    border: 1px solid #495057;
}

[data-bs-theme="dark"] .trumbowyg-modal-button {
    background-color: #343a40;
    color: #f8f9fa;
    border: 1px solid #495057;
}

[data-bs-theme="dark"] .trumbowyg-modal-button.trumbowyg-modal-submit {
    background: #0d6efd;
}

[data-bs-theme="dark"] .trumbowyg-overlay {
    background-color: rgba(0, 0, 0, 0.5);
}

#trumbowyg-icons {
    display: none;
}

// ----- END FILE: plugins/AdminTheme/webroot/css/willow-admin.css -----

FILE: plugins/AdminTheme/webroot/css/trumbowyg.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 2104 bytes
CONTENT:
/* Trumbowyg Dark Mode Support */
[data-bs-theme="dark"] .trumbowyg-box,
[data-bs-theme="dark"] .trumbowyg-editor {
    background: #212529;
    color: #f8f9fa;
    border-color: #495057;
}

[data-bs-theme="dark"] .trumbowyg-button-pane {
    background: #343a40;
    border-bottom-color: #495057;
}

[data-bs-theme="dark"] .trumbowyg-button-pane button {
    background: #343a40;
    color: #f8f9fa;
}

[data-bs-theme="dark"] .trumbowyg-button-pane button:hover,
[data-bs-theme="dark"] .trumbowyg-button-pane button:focus {
    background: #495057;
}

[data-bs-theme="dark"] .trumbowyg-button-pane .trumbowyg-button-group::after {
    background: #495057;
}

[data-bs-theme="dark"] .trumbowyg-editor table {
    border-color: #495057;
}

[data-bs-theme="dark"] .trumbowyg-editor td,
[data-bs-theme="dark"] .trumbowyg-editor th {
    border: 1px solid #495057;
    color: #f8f9fa;
}

[data-bs-theme="dark"] .trumbowyg-editor th {
    background: #343a40;
}

.trumbowyg-editor table {
    width: 100%;
    border-collapse: collapse;
    margin: 1em 0;
}

.trumbowyg-editor td,
.trumbowyg-editor th {
    border: 1px solid #dee2e6;
    padding: 8px;
    min-width: 50px;
}

.trumbowyg-fullscreen .trumbowyg-editor {
    color: black !important;
}

[data-bs-theme="dark"] .trumbowyg-modal,
[data-bs-theme="dark"] .trumbowyg-modal-box {
    background: #212529;
    color: #f8f9fa;
}

[data-bs-theme="dark"] .trumbowyg-modal-box .trumbowyg-modal-title {
    background: #343a40;
    color: #f8f9fa;
    border-bottom: 1px solid #495057;
}

[data-bs-theme="dark"] .trumbowyg-modal-box label {
    color: #f8f9fa;
}

[data-bs-theme="dark"] .trumbowyg-modal-box input {
    background: #343a40;
    color: #f8f9fa;
    border: 1px solid #495057;
}

[data-bs-theme="dark"] .trumbowyg-modal-button {
    background-color: #343a40;
    color: #f8f9fa;
    border: 1px solid #495057;
}

[data-bs-theme="dark"] .trumbowyg-modal-button.trumbowyg-modal-submit {
    background: #0d6efd;
}

[data-bs-theme="dark"] .trumbowyg-overlay {
    background-color: rgba(0, 0, 0, 0.5);
}

#trumbowyg-icons {
    display: none;
}

// ----- END FILE: plugins/AdminTheme/webroot/css/trumbowyg.css -----

FILE: plugins/AdminTheme/webroot/css/base.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 1440 bytes
CONTENT:
@media (min-width: 768px) {
    .bd-placeholder-img-lg {
        font-size: 3.5rem;
    }
}

.bi {
    vertical-align: -.125em;
    fill: currentColor;
}

.btn-bd-primary {
    --bd-violet-bg: #712cf9;
    --bd-violet-rgb: 112.520718, 44.062154, 249.437846;
    --bs-btn-font-weight: 600;
    --bs-btn-color: var(--bs-white);
    --bs-btn-bg: var(--bd-violet-bg);
    --bs-btn-border-color: var(--bd-violet-bg);
    --bs-btn-hover-color: var(--bs-white);
    --bs-btn-hover-bg: #6528e0;
    --bs-btn-hover-border-color: #6528e0;
    --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);
    --bs-btn-active-color: var(--bs-btn-hover-color);
    --bs-btn-active-bg: #5a23c8;
    --bs-btn-active-border-color: #5a23c8;
}

.bd-mode-toggle {
    z-index: 1500;
}

.bd-mode-toggle .dropdown-menu .active .bi {
    display: block !important;
}

.form-control-dark {
    border-color: var(--bs-gray);
}

.form-control-dark:focus {
    border-color: #fff;
    box-shadow: 0 0 0 .25rem rgba(255, 255, 255, .25);
}

.text-small {
    font-size: 85%;
}

.dropdown-toggle:not(:focus) {
    outline: 0;
}

.bg-debug {
    background-color: rgb(72, 133, 102);
}

.bg-error {
    background-color: rgb(255, 0, 0);
}

.bg-notice {
    background-color: rgb(255, 153, 0);
}

code {
    padding: 2px 4px;
    border-radius: 4px;
    font-family: monospace;
}

pre {
    background-color: #f5f5f5;
    padding: 10px;
    border-radius: 4px;
    overflow-x: auto;
}

// ----- END FILE: plugins/AdminTheme/webroot/css/base.css -----

FILE: plugins/AdminTheme/webroot/js/color-modes.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 2596 bytes
CONTENT:
/*!
 * Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)
 * Copyright 2011-2024 The Bootstrap Authors
 * Licensed under the Creative Commons Attribution 3.0 Unported License.
 */

(() => {
  'use strict'

  const getStoredTheme = () => localStorage.getItem('theme')
  const setStoredTheme = theme => localStorage.setItem('theme', theme)

  const getPreferredTheme = () => {
    const storedTheme = getStoredTheme()
    if (storedTheme) {
      return storedTheme
    }

    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
  }

  const setTheme = theme => {
    if (theme === 'auto') {
      document.documentElement.setAttribute('data-bs-theme', (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'))
    } else {
      document.documentElement.setAttribute('data-bs-theme', theme)
    }
  }

  setTheme(getPreferredTheme())

  const showActiveTheme = (theme, focus = false) => {
    const themeSwitcher = document.querySelector('#bd-theme')

    if (!themeSwitcher) {
      return
    }

    const themeSwitcherText = document.querySelector('#bd-theme-text')
    const activeThemeIcon = document.querySelector('.theme-icon-active use')
    const btnToActive = document.querySelector(`[data-bs-theme-value="${theme}"]`)
    const svgOfActiveBtn = btnToActive.querySelector('svg use').getAttribute('href')

    document.querySelectorAll('[data-bs-theme-value]').forEach(element => {
      element.classList.remove('active')
      element.setAttribute('aria-pressed', 'false')
    })

    btnToActive.classList.add('active')
    btnToActive.setAttribute('aria-pressed', 'true')
    activeThemeIcon.setAttribute('href', svgOfActiveBtn)
    const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`
    themeSwitcher.setAttribute('aria-label', themeSwitcherLabel)

    if (focus) {
      themeSwitcher.focus()
    }
  }

  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    const storedTheme = getStoredTheme()
    if (storedTheme !== 'light' && storedTheme !== 'dark') {
      setTheme(getPreferredTheme())
    }
  })

  window.addEventListener('DOMContentLoaded', () => {
    showActiveTheme(getPreferredTheme())

    document.querySelectorAll('[data-bs-theme-value]')
      .forEach(toggle => {
        toggle.addEventListener('click', () => {
          const theme = toggle.getAttribute('data-bs-theme-value')
          setStoredTheme(theme)
          setTheme(theme)
          showActiveTheme(theme, true)
        })
      })
  })
})()


// ----- END FILE: plugins/AdminTheme/webroot/js/color-modes.js -----

FILE: plugins/AdminTheme/webroot/js/gallery-search.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 5757 bytes
CONTENT:
/**
 * Gallery Search Handler
 * Provides debounced AJAX search functionality for gallery list and grid views
 */
(function() {
    'use strict';

    let searchTimer = null;
    let config = {};

    /**
     * Initialize gallery search functionality
     */
    function init(options = {}) {
        config = Object.assign({
            searchInputId: 'gallery-search',
            searchFormId: 'gallery-search-form',
            ajaxTargetId: 'ajax-target',
            debounceDelay: 300,
            onSearchComplete: null
        }, options);

        const searchInput = document.getElementById(config.searchInputId);
        const searchForm = document.getElementById(config.searchFormId);

        if (!searchInput || !searchForm) {
            console.warn('Gallery search elements not found');
            return;
        }

        bindSearchEvents(searchInput, searchForm);
    }

    /**
     * Bind search input and form events
     */
    function bindSearchEvents(searchInput, searchForm) {
        // Debounced input search
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimer);
            searchTimer = setTimeout(() => {
                performSearch();
            }, config.debounceDelay);
        });

        // Form submission
        searchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            clearTimeout(searchTimer);
            performSearch();
        });
    }

    /**
     * Perform AJAX search request
     */
    function performSearch() {
        const searchInput = document.getElementById(config.searchInputId);
        const ajaxTarget = document.getElementById(config.ajaxTargetId);
        
        if (!searchInput || !ajaxTarget) {
            console.error('Required search elements not found');
            return;
        }

        const searchTerm = searchInput.value.trim();
        
        // Only search if 3+ characters or empty (to show all results)
        if (searchTerm.length > 0 && searchTerm.length < 3) {
            return;
        }
        
        const url = new URL(window.location.href);

        // Update URL parameters
        if (searchTerm) {
            url.searchParams.set('search', searchTerm);
        } else {
            url.searchParams.delete('search');
        }

        // Show loading state
        addLoadingState(ajaxTarget);

        fetch(url.toString(), {
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Accept': 'text/html'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.text();
        })
        .then(html => {
            ajaxTarget.innerHTML = html;
            removeLoadingState(ajaxTarget);
            
            // Trigger callback for additional processing
            if (config.onSearchComplete && typeof config.onSearchComplete === 'function') {
                config.onSearchComplete();
            }

            // Update browser history without page reload
            window.history.replaceState({}, '', url.toString());
        })
        .catch(error => {
            console.error('Gallery search error:', error);
            removeLoadingState(ajaxTarget);
            showSearchError();
        });
    }

    /**
     * Add loading state visual feedback
     */
    function addLoadingState(target) {
        target.style.opacity = '0.6';
        target.style.pointerEvents = 'none';
        
        // Add loading spinner if not present
        if (!target.querySelector('.search-loading')) {
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'search-loading position-absolute top-50 start-50 translate-middle';
            loadingDiv.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
            target.style.position = 'relative';
            target.appendChild(loadingDiv);
        }
    }

    /**
     * Remove loading state
     */
    function removeLoadingState(target) {
        target.style.opacity = '';
        target.style.pointerEvents = '';
        
        const loading = target.querySelector('.search-loading');
        if (loading) {
            loading.remove();
        }
    }

    /**
     * Show search error message
     */
    function showSearchError() {
        const ajaxTarget = document.getElementById(config.ajaxTargetId);
        if (ajaxTarget) {
            ajaxTarget.innerHTML = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Search Error:</strong> Unable to perform search. Please try again.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
        }
    }

    /**
     * Clear current search
     */
    function clearSearch() {
        const searchInput = document.getElementById(config.searchInputId);
        if (searchInput) {
            searchInput.value = '';
            performSearch();
        }
    }

    // Auto-initialize on DOM ready
    document.addEventListener('DOMContentLoaded', function() {
        // Check if we're on a gallery page
        if (document.getElementById('gallery-search')) {
            init();
        }
    });

    // Export for manual initialization and control
    window.GallerySearch = {
        init: init,
        clearSearch: clearSearch,
        performSearch: performSearch
    };

})();

// ----- END FILE: plugins/AdminTheme/webroot/js/gallery-search.js -----

FILE: plugins/AdminTheme/webroot/js/utils/popover-manager.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 2069 bytes
CONTENT:
/**
 * AdminTheme Popover Manager Utility
 * Centralized Bootstrap popover management
 */

class PopoverManager {
    constructor() {
        this.popovers = new Map();
        this.init();
    }
    
    init() {
        this.initializeAll();
        this.bindEvents();
    }
    
    initializeAll() {
        const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        popoverTriggerList.forEach((popoverTriggerEl) => {
            const popover = new bootstrap.Popover(popoverTriggerEl);
            this.popovers.set(popoverTriggerEl, popover);
        });
    }
    
    bindEvents() {
        // Auto-initialize popovers when new content is added to the DOM
        document.addEventListener('DOMContentLoaded', () => {
            this.initializeAll();
        });
    }
    
    refresh() {
        // Dispose existing popovers
        this.disposeAll();
        // Re-initialize all popovers
        this.initializeAll();
    }
    
    disposeAll() {
        this.popovers.forEach((popover) => {
            popover.dispose();
        });
        this.popovers.clear();
    }
    
    dispose(element) {
        const popover = this.popovers.get(element);
        if (popover) {
            popover.dispose();
            this.popovers.delete(element);
        }
    }
    
    // Static method for global access
    static getInstance() {
        if (!window.AdminTheme.popoverManagerInstance) {
            window.AdminTheme.popoverManagerInstance = new PopoverManager();
        }
        return window.AdminTheme.popoverManagerInstance;
    }
    
    // Utility method for components that dynamically add content
    static refreshPopovers() {
        const instance = PopoverManager.getInstance();
        instance.refresh();
    }
}

// Global namespace for AdminTheme utilities
window.AdminTheme = window.AdminTheme || {};
window.AdminTheme.PopoverManager = PopoverManager;

// Auto-initialize on DOM ready
document.addEventListener('DOMContentLoaded', function() {
    PopoverManager.getInstance();
});

// ----- END FILE: plugins/AdminTheme/webroot/js/utils/popover-manager.js -----

FILE: plugins/AdminTheme/webroot/js/utils/search-handler.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 3460 bytes
CONTENT:
/**
 * AdminTheme Search Handler Utility
 * Reusable AJAX search functionality for admin interfaces
 */

class SearchHandler {
    constructor(config) {
        this.searchInputId = config.searchInputId;
        this.resultsContainerId = config.resultsContainerId;
        this.baseUrl = config.baseUrl;
        this.currentFilter = config.currentFilter || null;
        this.debounceDelay = config.debounceDelay || 300;
        
        this.debounceTimer = null;
        this.searchInput = null;
        this.resultsContainer = null;
        
        this.init();
    }
    
    init() {
        this.searchInput = document.getElementById(this.searchInputId);
        this.resultsContainer = document.querySelector(this.resultsContainerId);
        
        if (!this.searchInput || !this.resultsContainer) {
            console.error('SearchHandler: Required elements not found');
            return;
        }
        
        this.bindEvents();
        this.initializePopovers();
    }
    
    bindEvents() {
        this.searchInput.addEventListener('input', (e) => {
            this.handleSearch(e.target.value);
        });
    }
    
    handleSearch(searchTerm) {
        clearTimeout(this.debounceTimer);
        this.debounceTimer = setTimeout(() => {
            this.performSearch(searchTerm.trim());
        }, this.debounceDelay);
    }
    
    performSearch(searchTerm) {
        // Only search if 3+ characters or empty (to show all results)
        if (searchTerm.length > 0 && searchTerm.length < 3) {
            return;
        }
        
        let url = this.baseUrl;
        
        // Add current filter if exists
        if (this.currentFilter !== null) {
            url += `?status=${encodeURIComponent(this.currentFilter)}`;
        }
        
        // Add search term if provided
        if (searchTerm.length > 0) {
            url += (url.includes('?') ? '&' : '?') + `search=${encodeURIComponent(searchTerm)}`;
        }
        
        fetch(url, {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.text())
        .then(html => {
            this.resultsContainer.innerHTML = html;
            this.initializePopovers();
        })
        .catch(error => {
            console.error('Search error:', error);
            this.showError('Search failed. Please try again.');
        });
    }
    
    initializePopovers() {
        // Re-initialize popovers after updating the content
        const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
        popoverTriggerList.map(function (popoverTriggerEl) {
            return new bootstrap.Popover(popoverTriggerEl);
        });
    }
    
    showError(message) {
        // Create a simple error display
        const errorHtml = `
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                ${message}
            </div>
        `;
        this.resultsContainer.innerHTML = errorHtml;
    }
    
    // Static method to initialize search handlers from templates
    static init(config) {
        document.addEventListener('DOMContentLoaded', function() {
            new SearchHandler(config);
        });
    }
}

// Global namespace for AdminTheme utilities
window.AdminTheme = window.AdminTheme || {};
window.AdminTheme.SearchHandler = SearchHandler;

// ----- END FILE: plugins/AdminTheme/webroot/js/utils/search-handler.js -----

FILE: plugins/AdminTheme/webroot/js/image-preview.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 342 bytes
CONTENT:
document.addEventListener('DOMContentLoaded', function() {
    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl, {
            container: 'body'
        })
    })
});

// ----- END FILE: plugins/AdminTheme/webroot/js/image-preview.js -----

FILE: plugins/AdminTheme/webroot/js/universal-search.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 6308 bytes
CONTENT:
/**
 * Universal Search Handler
 * Provides consistent search behavior across all admin interfaces
 * Automatically triggers search after 3+ characters with 300ms debounce
 */
(function() {
    'use strict';

    /**
     * Initialize universal search on any search input
     * @param {Object} options Configuration options
     * @param {string} options.inputSelector - CSS selector for search input
     * @param {string} options.formSelector - CSS selector for search form
     * @param {string} options.targetSelector - CSS selector for results container
     * @param {string} options.baseUrl - Base URL for search requests
     * @param {number} [options.minChars=3] - Minimum characters to trigger search
     * @param {number} [options.debounceDelay=300] - Debounce delay in milliseconds
     * @param {Function} [options.onComplete] - Callback after search completes
     */
    function initUniversalSearch(options) {
        const config = Object.assign({
            minChars: 3,
            debounceDelay: 300,
            onComplete: null
        }, options);

        const searchInput = document.querySelector(config.inputSelector);
        const searchForm = document.querySelector(config.formSelector);
        const resultsContainer = document.querySelector(config.targetSelector);

        if (!searchInput || !searchForm || !resultsContainer) {
            console.warn('Universal search: Required elements not found', {
                input: !!searchInput,
                form: !!searchForm,
                results: !!resultsContainer
            });
            return;
        }

        let debounceTimer = null;

        function performSearch(searchTerm) {
            // Only search if meets minimum character requirement or is empty (show all)
            if (searchTerm.length > 0 && searchTerm.length < config.minChars) {
                return;
            }

            // Build URL with search parameters
            const url = new URL(config.baseUrl, window.location.origin);
            if (searchTerm.length > 0) {
                url.searchParams.set('search', searchTerm);
            }

            // Preserve existing URL parameters
            const currentParams = new URLSearchParams(window.location.search);
            currentParams.forEach((value, key) => {
                if (key !== 'search') {
                    url.searchParams.set(key, value);
                }
            });

            // Add loading state
            resultsContainer.style.opacity = '0.6';
            resultsContainer.style.pointerEvents = 'none';

            fetch(url.toString(), {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'text/html'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.text();
            })
            .then(html => {
                resultsContainer.innerHTML = html;
                resultsContainer.style.opacity = '';
                resultsContainer.style.pointerEvents = '';
                
                // Update browser history
                window.history.replaceState({}, '', url.toString());
                
                // Call completion callback
                if (config.onComplete && typeof config.onComplete === 'function') {
                    config.onComplete();
                }
            })
            .catch(error => {
                console.error('Universal search error:', error);
                resultsContainer.style.opacity = '';
                resultsContainer.style.pointerEvents = '';
                
                resultsContainer.innerHTML = `
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Search failed. Please try again.
                    </div>
                `;
            });
        }

        // Bind input events
        searchInput.addEventListener('input', function() {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => {
                performSearch(this.value.trim());
            }, config.debounceDelay);
        });

        // Bind form submission
        searchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            clearTimeout(debounceTimer);
            performSearch(searchInput.value.trim());
        });
    }

    /**
     * Auto-initialize universal search for common patterns
     */
    function autoInitialize() {
        // Standard admin search pattern
        const standardSearch = document.querySelector('#search-form');
        if (standardSearch) {
            const searchInput = standardSearch.querySelector('input[type="search"]');
            const resultsContainer = document.querySelector('#ajax-target');
            
            if (searchInput && resultsContainer) {
                initUniversalSearch({
                    inputSelector: `#${searchInput.id}`,
                    formSelector: '#search-form',
                    targetSelector: '#ajax-target',
                    baseUrl: window.location.pathname,
                    onComplete: function() {
                        // Re-initialize Bootstrap popovers
                        const popovers = document.querySelectorAll('[data-bs-toggle="popover"]');
                        popovers.forEach(el => {
                            const existingPopover = bootstrap.Popover.getInstance(el);
                            if (existingPopover) {
                                existingPopover.dispose();
                            }
                            new bootstrap.Popover(el);
                        });
                    }
                });
            }
        }
    }

    // Export for manual usage
    window.UniversalSearch = {
        init: initUniversalSearch,
        autoInit: autoInitialize
    };

    // Auto-initialize on DOM ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', autoInitialize);
    } else {
        autoInitialize();
    }

})();

// ----- END FILE: plugins/AdminTheme/webroot/js/universal-search.js -----

FILE: plugins/AdminTheme/webroot/js/articles_tree.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 1586 bytes
CONTENT:
document.addEventListener('DOMContentLoaded', function() {
    var nestedSortables = [].slice.call(document.querySelectorAll('.sortable-list'));

    for (var i = 0; i < nestedSortables.length; i++) {
        new Sortable(nestedSortables[i], {
            group: 'nested',
            animation: 150,
            fallbackOnBody: true,
            swapThreshold: 0.65,
            onEnd: function (evt) {
                var itemEl = evt.item;
                var newIndex = evt.newIndex;
                var newParentId = evt.to.closest('li') ? evt.to.closest('li').dataset.id : 'root';

                fetch('/admin/articles/updateTree', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken // Make sure to set this variable with your CSRF token
                    },
                    body: JSON.stringify({
                        id: itemEl.dataset.id,
                        newIndex: newIndex,
                        newParentId: newParentId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('Tree updated successfully');
                    } else {
                        console.error('Error updating tree');
                    }
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
            }
        });
    }
});

// ----- END FILE: plugins/AdminTheme/webroot/js/articles_tree.js -----

FILE: plugins/AdminTheme/webroot/js/markdown-it-media-insert.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 847 bytes
CONTENT:
/**
 * Media insertion handlers for markdown editor - BRILLIANT unified WillowModal approach
 */
document.addEventListener('DOMContentLoaded', function() {
    // Image insertion handler
    document.getElementById('insertImageBtn')?.addEventListener('click', function() {
        WillowModal.showImageSelector(null, {
            title: 'Select Image from Library'
        });
    });

    // Video insertion handler
    document.getElementById('insertVideoBtn')?.addEventListener('click', function() {
        WillowModal.showVideoSelector(null, {
            title: 'Insert YouTube Video'
        });
    });

    // Gallery insertion handler
    document.getElementById('insertGalleryBtn')?.addEventListener('click', function() {
        WillowModal.showGallerySelector(null, {
            title: 'Insert Image Gallery'
        });
    });
});

// ----- END FILE: plugins/AdminTheme/webroot/js/markdown-it-media-insert.js -----

FILE: plugins/AdminTheme/webroot/js/gallery-grid-interactions.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 15229 bytes
CONTENT:
/**
 * Gallery Grid Interactions
 * Handles preview hover effects, slideshow initialization, and PhotoSwipe integration
 */
(function() {
    'use strict';

    let config = {};

    /**
     * Initialize gallery grid interactions
     */
    function init(options = {}) {
        config = Object.assign({
            previewSelector: '.gallery-preview-overlay',
            playButtonSelector: '.gallery-play-button',
            galleryCardSelector: '.card',
            photoGallerySelector: '.photo-gallery',
            galleryItemSelector: '.gallery-item',
            popoverSelector: '[data-bs-toggle="popover"]',
            enableHoverEffects: true,
            enablePhotoSwipe: true,
            enableLazyLoading: true,
            lazyLoadThreshold: '50px',
            enablePreloading: true
        }, options);

        initializePreviewInteractions(false);
        
        if (config.enableLazyLoading) {
            initializeLazyLoading();
        }
        
        if (config.enablePreloading) {
            initializeImagePreloading();
        }
    }

    /**
     * Initialize preview interactions and effects
     */
    function initializePreviewInteractions(isAjaxLoad = false) {
        if (config.enableHoverEffects) {
            initializeHoverEffects();
        }

        if (config.enablePhotoSwipe && isAjaxLoad) {
            reinitializePhotoSwipe();
        }

        // Initialize Bootstrap popovers for AJAX content
        if (isAjaxLoad) {
            initializePopovers();
        }
    }

    /**
     * Initialize hover effects for gallery previews
     */
    function initializeHoverEffects() {
        const previews = document.querySelectorAll(config.previewSelector);
        
        previews.forEach(container => {
            const playButton = container.querySelector(config.playButtonSelector);
            
            if (!playButton) return;

            // Check if already initialized to prevent duplicate handlers
            if (container.hasAttribute('data-gallery-initialized')) {
                return;
            }
            container.setAttribute('data-gallery-initialized', 'true');

            // Add hover event listeners
            container.addEventListener('mouseenter', function() {
                playButton.style.display = 'block';
            });
            
            container.addEventListener('mouseleave', function() {
                playButton.style.display = 'none';
            });

            // Add click handler for slideshow
            container.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                const galleryId = extractGalleryId(container);
                if (galleryId) {
                    startGallerySlideshow(galleryId);
                }
            });
        });
    }

    /**
     * Extract gallery ID from container onclick attribute or data
     */
    function extractGalleryId(container) {
        // Try to get from onclick attribute first (legacy support)
        const onclick = container.getAttribute('onclick');
        if (onclick) {
            const match = onclick.match(/startGallerySlideshow\(['"]([^'"]+)['"]\)/);
            if (match) {
                return match[1];
            }
        }

        // Try to get from data attribute
        return container.dataset.galleryId;
    }

    /**
     * Start gallery slideshow by finding and clicking first image
     */
    function startGallerySlideshow(galleryId) {
        let galleryContainer = null;
        
        // Look for the gallery container that contains this galleryId
        const galleryCards = document.querySelectorAll(config.galleryCardSelector);
        
        for (let card of galleryCards) {
            // Look for preview overlay with matching data-gallery-id
            const previewOverlay = card.querySelector(`[data-gallery-id="${galleryId}"]`);
            if (previewOverlay) {
                // Find the hidden photo gallery in the same card
                galleryContainer = card.querySelector(config.photoGallerySelector);
                break;
            }
        }
        
        // If we found the gallery, try to start PhotoSwipe manually
        if (galleryContainer) {
            const firstImageLink = galleryContainer.querySelector(`${config.galleryItemSelector} a[href]`);
            if (firstImageLink) {
                console.log('Starting gallery slideshow for:', galleryId);
                
                // Check if PhotoSwipe is available
                if (window.PhotoSwipe) {
                    // Initialize PhotoSwipe manually for this hidden gallery
                    setTimeout(() => {
                        initializeHiddenGallery(galleryContainer, 0);
                    }, 50);
                    return;
                } else {
                    console.warn('PhotoSwipe not available, trying click fallback');
                    // Fallback: try clicking the link
                    setTimeout(() => {
                        firstImageLink.click();
                    }, 50);
                    return;
                }
            } else {
                console.warn('No image links found in gallery:', galleryId);
            }
        } else {
            console.warn('Gallery container not found for:', galleryId);
        }

        // Fallback: redirect to view page
        const realGalleryId = galleryId.replace('gallery-', '');
        const viewUrl = `/admin/image-galleries/view/${realGalleryId}`;
        console.log('Falling back to view page:', viewUrl);
        window.location.href = viewUrl;
    }

    /**
     * Reinitialize PhotoSwipe galleries for AJAX-loaded content
     */
    function reinitializePhotoSwipe() {
        setTimeout(() => {
            if (window.PhotoSwipeGallery) {
                console.log('Re-initializing PhotoSwipe galleries after AJAX load...');
                try {
                    const ajaxPhotoSwipeInstance = new PhotoSwipeGallery({
                        gallerySelector: config.photoGallerySelector,
                        itemSelector: config.galleryItemSelector
                    });
                } catch (error) {
                    console.error('Error reinitializing PhotoSwipe:', error);
                }
            } else {
                console.warn('PhotoSwipeGallery not available for AJAX content');
            }
        }, 100);
    }

    /**
     * Initialize Bootstrap popovers
     */
    function initializePopovers() {
        const popoverTriggerList = [].slice.call(document.querySelectorAll(config.popoverSelector));
        popoverTriggerList.map(function (popoverTriggerEl) {
            // Dispose existing popover to avoid duplicates
            const existingPopover = bootstrap.Popover.getInstance(popoverTriggerEl);
            if (existingPopover) {
                existingPopover.dispose();
            }
            
            return new bootstrap.Popover(popoverTriggerEl);
        });
    }

    /**
     * Initialize lazy loading for gallery images
     */
    function initializeLazyLoading() {
        // Only proceed if IntersectionObserver is supported
        if (!('IntersectionObserver' in window)) {
            console.warn('IntersectionObserver not supported, skipping lazy loading');
            return;
        }

        const lazyImages = document.querySelectorAll('.gallery-preview-image[data-src], .gallery-image[data-src]');
        
        if (lazyImages.length === 0) {
            // If no data-src attributes, look for images that could benefit from lazy loading
            initializeLazyLoadingForExistingImages();
            return;
        }

        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    const src = img.dataset.src;
                    
                    if (src) {
                        // Create a new image to preload
                        const newImg = new Image();
                        newImg.onload = () => {
                            img.src = src;
                            img.classList.remove('lazy-loading');
                            img.classList.add('lazy-loaded');
                        };
                        newImg.onerror = () => {
                            img.classList.remove('lazy-loading');
                            img.classList.add('lazy-error');
                            console.warn('Failed to load lazy image:', src);
                        };
                        newImg.src = src;
                        
                        // Add loading class
                        img.classList.add('lazy-loading');
                        
                        // Remove data-src to prevent reloading
                        delete img.dataset.src;
                    }
                    
                    observer.unobserve(img);
                }
            });
        }, {
            root: null,
            rootMargin: config.lazyLoadThreshold,
            threshold: 0.1
        });

        lazyImages.forEach(img => {
            imageObserver.observe(img);
        });
        
        console.log(`Lazy loading initialized for ${lazyImages.length} images`);
    }

    /**
     * Initialize lazy loading for existing images (convert to lazy loading)
     */
    function initializeLazyLoadingForExistingImages() {
        const galleryImages = document.querySelectorAll('.gallery-preview-image, .gallery-image');
        
        const imageObserver = new IntersectionObserver((entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const img = entry.target;
                    
                    // Only process if not already processed
                    if (!img.classList.contains('lazy-processed')) {
                        img.classList.add('lazy-processed');
                        
                        // Add fade-in effect
                        img.style.opacity = '0';
                        img.style.transition = 'opacity 0.3s ease';
                        
                        // Trigger reflow and fade in
                        setTimeout(() => {
                            img.style.opacity = '1';
                        }, 50);
                    }
                    
                    observer.unobserve(img);
                }
            });
        }, {
            root: null,
            rootMargin: config.lazyLoadThreshold,
            threshold: 0.1
        });

        galleryImages.forEach(img => {
            imageObserver.observe(img);
        });
    }

    /**
     * Initialize image preloading for better performance
     */
    function initializeImagePreloading() {
        // Preload images that are likely to be viewed next
        const galleryItems = document.querySelectorAll(config.galleryItemSelector);
        
        galleryItems.forEach((item, index) => {
            const link = item.querySelector('a[href]');
            if (link && index < 6) { // Preload first 6 images
                const img = new Image();
                img.src = link.href;
                // Store preloaded images to prevent garbage collection
                if (!window.preloadedGalleryImages) {
                    window.preloadedGalleryImages = [];
                }
                window.preloadedGalleryImages.push(img);
            }
        });
    }

    /**
     * Initialize PhotoSwipe for a hidden gallery
     */
    function initializeHiddenGallery(galleryContainer, startIndex = 0) {
        if (!window.PhotoSwipe) {
            console.error('PhotoSwipe not available');
            return;
        }

        // Parse gallery items like PhotoSwipeGallery does
        const items = [];
        const itemElements = galleryContainer.querySelectorAll(config.galleryItemSelector);
        
        itemElements.forEach((itemEl) => {
            const link = itemEl.querySelector('a');
            const img = itemEl.querySelector('img');
            
            if (link && img) {
                const item = {
                    src: link.href,
                    width: parseInt(link.dataset.pswpWidth || 0) || 0,
                    height: parseInt(link.dataset.pswpHeight || 0) || 0,
                    alt: img.alt || '',
                    title: link.dataset.title || img.alt || '',
                    caption: link.dataset.caption || ''
                };
                items.push(item);
            }
        });

        if (items.length === 0) {
            console.warn('No gallery items found');
            return;
        }

        console.log(`Opening PhotoSwipe with ${items.length} items, starting at index ${startIndex}`);

        // Create PhotoSwipe instance
        const photoswipe = new PhotoSwipe({
            dataSource: items,
            index: startIndex,
            bgOpacity: 0.8,
            showHideOpacity: true,
            showAnimationDuration: 333,
            hideAnimationDuration: 333,
            spacing: 0.1,
            padding: { top: 60, bottom: 60, left: 40, right: 40 }
        });

        // Initialize and open
        photoswipe.init();
    }

    /**
     * Preload adjacent images for better PhotoSwipe performance
     */
    function preloadAdjacentImages(currentIndex, items) {
        const preloadIndexes = [currentIndex - 1, currentIndex + 1];
        
        preloadIndexes.forEach(index => {
            if (index >= 0 && index < items.length) {
                const img = new Image();
                img.src = items[index].src;
            }
        });
    }

    /**
     * Clean up event listeners (useful for AJAX reloads)
     */
    function cleanup() {
        // Remove existing event listeners by cloning and replacing elements
        const previews = document.querySelectorAll(config.previewSelector);
        previews.forEach(container => {
            const newContainer = container.cloneNode(true);
            container.parentNode.replaceChild(newContainer, container);
        });
    }

    /**
     * Refresh interactions after content change (AJAX callback)
     */
    function refresh() {
        cleanup();
        initializePreviewInteractions(true);
    }

    // Auto-initialize on DOM ready
    document.addEventListener('DOMContentLoaded', function() {
        // Check if we're on a gallery grid page
        if (document.querySelector('.gallery-preview-overlay')) {
            init();
        }
    });

    // Export for manual initialization and control
    window.GalleryGridInteractions = {
        init: init,
        refresh: refresh,
        startGallerySlideshow: startGallerySlideshow,
        initializePreviewInteractions: initializePreviewInteractions,
        initializeLazyLoading: initializeLazyLoading,
        preloadAdjacentImages: preloadAdjacentImages
    };

    // Export global function for backward compatibility
    window.startGallerySlideshow = startGallerySlideshow;

})();

// ----- END FILE: plugins/AdminTheme/webroot/js/gallery-grid-interactions.js -----

FILE: plugins/AdminTheme/webroot/js/trumbowyg-edit.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 13310 bytes
CONTENT:
/**
 * Main editor initialization and handlers
 * This file handles the Trumbowyg editor setup, image/video insertion, and code highlighting
 */
$(document).ready(function() {
    // --- Constants ---
    // URLs (Note: Ideally, these should be passed from server-side PHP if changes were allowed)
    const URLS = {
        IMAGE_SELECT: '/admin/images/image_select',
        VIDEO_SELECT: '/admin/videos/video_select',
        IMAGE_BASE_PATH: '/files/Images/image/' // Example: /files/Images/image/{size}/{filename}
    };

    // DOM Selectors
    const SELECTORS = {
        // Editor
        ARTICLE_BODY: '#article-body',
        // Image Modal & Gallery related IDs/Selectors
        IMAGE_MODAL: '#imageSelectModal',
        IMAGE_MODAL_WINDOW_ID: 'selectImageWindow', // ID for the modal body that receives AJAX content
        IMAGE_GALLERY_CONTAINER: '#image-gallery', // Actual container of images within the AJAX response
        IMAGE_SEARCH_INPUT: '#imageSearch',       // Search input within AJAX response
        // Video Modal & Gallery related IDs/Selectors
        VIDEO_MODAL: '#videoSelectModal',
        VIDEO_MODAL_WINDOW_ID: 'selectVideoWindow', // ID for the modal body that receives AJAX content
        VIDEO_GALLERY_CONTAINER: '#video-gallery', // Actual container of videos within the AJAX response
        VIDEO_SEARCH_INPUT: '#videoSearch',       // Search input within AJAX response
        VIDEO_CHANNEL_FILTER: '#channelFilter',   // Channel filter checkbox within AJAX response
        // General
        PAGINATION_LINKS: '.pagination a', // Common selector for pagination links
        TRUMBOWYG_ICON_CAMERA_REELS: 'camera-reels', // Custom Trumbowyg icon name
        TRUMBOWYG_ICON_CODE_INSERT: 'code-insert'    // Custom Trumbowyg icon name
    };
    // --- End Constants ---

    /**
     * Safely escapes HTML content to prevent XSS attacks.
     * @param {*} unsafe - The unsafe string or value to escape.
     * @returns {string} The escaped string, or an empty string if input is not a string.
     */
    function escapeHtml(unsafe) {
        if (typeof unsafe !== 'string') {
            // console.warn('escapeHtml called with non-string value:', unsafe);
            return ''; // Return empty string for non-string inputs
        }
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    /**
     * Safely highlights code blocks using highlight.js.
     * The :not(.hljs) selector in querySelectorAll prevents re-highlighting.
     */
    function safeHighlight() {
        document.querySelectorAll('pre code:not(.hljs)').forEach(block => {
            hljs.highlightElement(block);
        });
    }

    // Initialize Highlight.js on page load and Trumbowyg events
    safeHighlight();
    $(SELECTORS.ARTICLE_BODY).on('tbwchange tbwinit', function() {
        safeHighlight();
    });

    /**
     * Debounce function to limit the rate at which a function can fire.
     * @param {function} func - The function to debounce.
     * @param {number} delay - The delay in milliseconds.
     * @returns {function} - The debounced function.
     */
    function debounce(func, delay) {
        let debounceTimer;
        return function() {
            const context = this;
            const args = arguments;
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => func.apply(context, args), delay);
        };
    }

    // --- Trumbowyg Custom Plugins ----
    $.extend(true, $.trumbowyg, {
        plugins: {
            insertImageFromLibrary: {
                init: function(trumbowyg) {
                    trumbowyg.o.plugins.insertImageFromLibrary = trumbowyg.o.plugins.insertImageFromLibrary || {};
                    trumbowyg.addBtnDef('insertImageFromLibrary', {
                        fn: function() {
                            trumbowyg.saveRange();
                            
                            // Use brilliant enhanced WillowModal directly
                            WillowModal.showImageSelector(trumbowyg, {
                                title: 'Insert Image from Library'
                            });
                        },
                        title: 'Insert Image from Library',
                        ico: 'insertImage' // Standard Trumbowyg icon
                    });
                }
            },

            insertVideoFromLibrary: {
                init: function(trumbowyg) {
                    trumbowyg.o.plugins.insertVideoFromLibrary = trumbowyg.o.plugins.insertVideoFromLibrary || {};
                    trumbowyg.addBtnDef('insertVideoFromLibrary', {
                        fn: function() {
                            trumbowyg.saveRange();
                            
                            // Use brilliant enhanced WillowModal directly
                            WillowModal.showVideoSelector(trumbowyg, {
                                title: 'Insert YouTube Video'
                            });
                        },
                        title: 'Insert Video from Library',
                        ico: SELECTORS.TRUMBOWYG_ICON_CAMERA_REELS // Custom icon name
                    });
                }
            },

            insertGalleryFromLibrary: {
                init: function(trumbowyg) {
                    trumbowyg.o.plugins.insertGalleryFromLibrary = trumbowyg.o.plugins.insertGalleryFromLibrary || {};
                    trumbowyg.addBtnDef('insertGalleryFromLibrary', {
                        fn: function() {
                            trumbowyg.saveRange();
                            
                            // Use brilliant enhanced WillowModal directly
                            WillowModal.showGallerySelector(trumbowyg, {
                                title: 'Insert Image Gallery'
                            });
                        },
                        title: 'Insert Image Gallery',
                        ico: 'gallery' // Custom gallery icon
                    });
                }
            },

            highlight: {
                init: function(trumbowyg) {
                    trumbowyg.o.plugins.highlight = trumbowyg.o.plugins.highlight || {};
                    trumbowyg.addBtnDef('highlight', {
                        fn: function() {
                            trumbowyg.saveRange();
                            
                            const highlightModalHtmlContent = `
                                <div class="form-group mb-3">
                                    <label for="code-language">Language</label>
                                    <select class="form-select" id="code-language">
                                        <option value="php">PHP</option>
                                        <option value="javascript">JavaScript</option>
                                        <option value="css">CSS</option>
                                        <option value="html">HTML</option>
                                        <option value="sql">SQL</option>
                                        <option value="bash">Bash</option>
                                        <option value="json">JSON</option>
                                        <option value="xml">XML</option>
                                        <option value="plaintext">Plain Text</option>
                                    </select>
                                </div>
                                <div class="form-group mb-3">
                                    <label for="code-content">Code</label>
                                    <textarea class="form-control" id="code-content" rows="10"></textarea>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-primary" id="insertCode">Insert</button>
                                </div>
                            `;

                            // Use WillowModal for consistent modal handling
                            WillowModal.showStatic(highlightModalHtmlContent, {
                                title: 'Insert Code Snippet',
                                dialogClass: 'modal-dialog',
                                closeable: true,
                                onContentLoaded: function() {
                                    const modal = document.getElementById('dynamicModal');
                                    const insertButton = modal.querySelector('#insertCode');
                                    
                                    if (insertButton && insertButton.dataset[WillowModalConfig.events.datasetMarker] !== 'true') {
                                        insertButton.addEventListener('click', function() {
                                            const languageSelect = modal.querySelector('#code-language');
                                            const codeTextarea = modal.querySelector('#code-content');
                                            
                                            if (languageSelect && codeTextarea) {
                                                const language = escapeHtml(languageSelect.value);
                                                const rawCode = codeTextarea.value;
                                                const escapedCodeForHtml = escapeHtml(rawCode);
                                                
                                                const htmlToInsert = `<pre><code class="language-${language}">${escapedCodeForHtml}</code></pre>`;
                                                
                                                trumbowyg.restoreRange();
                                                trumbowyg.execCmd('insertHTML', htmlToInsert, false, true);
                                                
                                                setTimeout(safeHighlight, 50);
                                                
                                                const modalInstance = bootstrap.Modal.getInstance(modal);
                                                if (modalInstance) modalInstance.hide();
                                            }
                                        });
                                        
                                        insertButton.dataset[WillowModalConfig.events.datasetMarker] = 'true';
                                    }
                                }
                            });
                        },
                        title: 'Insert Code Snippet',
                        ico: SELECTORS.TRUMBOWYG_ICON_CODE_INSERT // Custom icon name
                    });
                }
            }
        }
    });

    // Initialize Trumbowyg editor if the target element exists
    const $articleBody = $(SELECTORS.ARTICLE_BODY);
    if ($articleBody.length) {
        $articleBody.trumbowyg({
            btns: [
                ['viewHTML'],
                ['formatting'],
                ['textFormat'], // Custom definition
                ['link'],
                ['insertImageFromLibrary', 'insertVideoFromLibrary', 'insertGalleryFromLibrary', 'highlight'],
                ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull'],
                ['unorderedList', 'orderedList'],
                ['table'],
                ['tableCellBackgroundColor', 'tableBorderColor'], // Requires 'colors' plugin
                ['removeformat'],
                ['fullscreen']
            ],
            btnsDef: {
                textFormat: {
                    dropdown: ['bold', 'italic', 'underline', 'strikethrough', 'preformatted', 'superscript', 'subscript'],
                    ico: 'strong'
                }
            },
            plugins: {
                // Explicitly list plugins being used.
                // Options can be passed here if needed, e.g., colors: { colorList: [...] }
                insertImageFromLibrary: {},
                insertVideoFromLibrary: {},
                insertGalleryFromLibrary: {},
                highlight: {},
                table: {},       // For table creation
                colors: {},      // For text and table cell colors
                preformatted: {} // For the 'preformatted' option in textFormat dropdown
            },
            // Phase 3: Enhanced Trumbowyg configuration for better content alignment
            semantic: true,  // Use semantic HTML elements
            resetCss: false, // Don't reset CSS - preserve our alignment styles
            removeformatPasted: false, // Preserve formatting when pasting
            autogrow: true,
            autogrowOnEnter: true,
            minHeight: 400
        });
        // safeHighlight is called on 'tbwinit' and 'tbwchange', so no explicit call needed here after init.
    } else {
        // console.warn(`Trumbowyg target element "${SELECTORS.ARTICLE_BODY}" not found on this page.`);
    }
});

// ----- END FILE: plugins/AdminTheme/webroot/js/trumbowyg-edit.js -----

FILE: plugins/AdminTheme/webroot/js/image_gallery_manager.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 11945 bytes
CONTENT:
/**
 * Image Gallery Manager
 * Handles drag-and-drop image ordering, adding/removing images, and caption editing
 */
window.ImageGalleryManager = (function() {
    'use strict';

    let config = {};
    let sortable = null;
    let selectedImages = new Set();
    let currentPage = 1;
    let isLoading = false;

    /**
     * Initialize the gallery manager
     */
    function init(options) {
        config = Object.assign({
            galleryId: null,
            csrfToken: null,
            urls: {
                addImages: '',
                removeImage: '',
                updateOrder: '',
                loadImages: ''
            }
        }, options);

        if (!config.galleryId) {
            console.error('Gallery ID is required');
            return;
        }

        initializeSortable();
        bindEvents();
        loadAvailableImages();
    }

    /**
     * Initialize sortable drag-and-drop functionality
     */
    function initializeSortable() {
        const gallery = document.getElementById('gallery-images-grid');
        if (!gallery) return;

        sortable = Sortable.create(gallery, {
            animation: 150,
            ghostClass: 'sortable-ghost',
            dragClass: 'sortable-drag',
            chosenClass: 'sortable-chosen',
            onEnd: function(evt) {
                updateImageOrder();
            }
        });
    }

    /**
     * Bind event handlers
     */
    function bindEvents() {
        // Remove image buttons
        document.addEventListener('click', function(e) {
            if (e.target.closest('.btn-remove-image')) {
                e.preventDefault();
                const btn = e.target.closest('.btn-remove-image');
                const imageId = btn.dataset.imageId;
                removeImageFromGallery(imageId);
            }
        });

        // Add selected images button
        const addSelectedBtn = document.getElementById('add-selected-images');
        if (addSelectedBtn) {
            addSelectedBtn.addEventListener('click', addSelectedImages);
        }

        // Image search
        const searchInput = document.getElementById('image-search');
        if (searchInput) {
            let searchTimeout;
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    const searchTerm = this.value.trim();
                    // Only search if 3+ characters or empty (to show all results)
                    if (searchTerm.length > 0 && searchTerm.length < 3) {
                        return;
                    }
                    currentPage = 1;
                    loadAvailableImages(searchTerm);
                }, 300);
            });
        }

        // Load more images
        const loadMoreBtn = document.getElementById('load-more-images');
        if (loadMoreBtn) {
            loadMoreBtn.addEventListener('click', function() {
                currentPage++;
                loadAvailableImages(document.getElementById('image-search').value, true);
            });
        }

        // Image selection in modal
        document.addEventListener('click', function(e) {
            if (e.target.closest('.image-item')) {
                const item = e.target.closest('.image-item');
                toggleImageSelection(item);
            }
        });

        // Edit caption modal
        const editCaptionModal = document.getElementById('editCaptionModal');
        if (editCaptionModal) {
            editCaptionModal.addEventListener('show.bs.modal', function(e) {
                const button = e.relatedTarget;
                const imageId = button.dataset.imageId;
                const caption = button.dataset.caption || '';
                
                const textarea = editCaptionModal.querySelector('#image-caption');
                textarea.value = caption;
                
                const saveBtn = editCaptionModal.querySelector('#save-caption');
                saveBtn.onclick = () => saveCaptionForImage(imageId, textarea.value);
            });
        }

        // Reset modal state when closed
        const addImagesModal = document.getElementById('addImagesModal');
        if (addImagesModal) {
            addImagesModal.addEventListener('hidden.bs.modal', function() {
                selectedImages.clear();
                updateSelectedCount();
                currentPage = 1;
            });
        }
    }

    /**
     * Load available images for selection
     */
    function loadAvailableImages(search = '', append = false) {
        if (isLoading) return;
        isLoading = true;

        const params = new URLSearchParams({
            page: currentPage,
            limit: 12
        });

        if (search) {
            params.append('search', search);
        }

        fetch(`${config.urls.loadImages}?${params}`)
            .then(response => response.text())
            .then(html => {
                const container = document.getElementById('available-images');
                if (!container) return;

                if (append) {
                    container.insertAdjacentHTML('beforeend', html);
                } else {
                    container.innerHTML = html;
                }

                // Update load more button visibility
                const loadMoreBtn = document.getElementById('load-more-images');
                const hasMore = container.children.length % 12 === 0 && container.children.length > 0;
                loadMoreBtn.style.display = hasMore ? 'block' : 'none';

                isLoading = false;
            })
            .catch(error => {
                console.error('Error loading images:', error);
                showNotification('Error loading images', 'error');
                isLoading = false;
            });
    }

    /**
     * Toggle image selection
     */
    function toggleImageSelection(item) {
        const imageId = item.dataset.imageId;
        
        if (selectedImages.has(imageId)) {
            selectedImages.delete(imageId);
            item.classList.remove('selected');
        } else {
            selectedImages.add(imageId);
            item.classList.add('selected');
        }
        
        updateSelectedCount();
    }

    /**
     * Update selected images count
     */
    function updateSelectedCount() {
        const countElement = document.getElementById('selected-count');
        const addBtn = document.getElementById('add-selected-images');
        
        if (countElement) {
            countElement.textContent = selectedImages.size;
        }
        
        if (addBtn) {
            addBtn.disabled = selectedImages.size === 0;
        }
    }

    /**
     * Add selected images to gallery
     */
    function addSelectedImages() {
        if (selectedImages.size === 0) return;

        const imageIds = Array.from(selectedImages);
        const formData = new FormData();
        
        imageIds.forEach(id => {
            formData.append('image_ids[]', id);
        });
        formData.append('_csrfToken', config.csrfToken);

        fetch(config.urls.addImages, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification(data.message, 'success');
                // Close modal and reload page to show new images
                const modal = bootstrap.Modal.getInstance(document.getElementById('addImagesModal'));
                modal.hide();
                setTimeout(() => window.location.reload(), 500);
            } else {
                showNotification(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error adding images:', error);
            showNotification('Error adding images to gallery', 'error');
        });
    }

    /**
     * Remove image from gallery
     */
    function removeImageFromGallery(imageId) {
        if (!confirm('Are you sure you want to remove this image from the gallery?')) {
            return;
        }

        fetch(`${config.urls.removeImage}/${imageId}`, {
            method: 'DELETE',
            headers: {
                'X-CSRF-Token': config.csrfToken,
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Remove the image from DOM
                const imageCard = document.querySelector(`[data-image-id="${imageId}"]`);
                if (imageCard) {
                    imageCard.remove();
                    updatePositionBadges();
                }
                showNotification(data.message, 'success');
            } else {
                showNotification(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error removing image:', error);
            showNotification('Error removing image from gallery', 'error');
        });
    }

    /**
     * Update image order after drag and drop
     */
    function updateImageOrder() {
        const cards = document.querySelectorAll('#gallery-images-grid [data-image-id]');
        const imageIds = Array.from(cards).map(card => card.dataset.imageId);

        const formData = new FormData();
        formData.append('gallery_id', config.galleryId);
        imageIds.forEach(id => {
            formData.append('image_ids[]', id);
        });
        formData.append('_csrfToken', config.csrfToken);

        fetch(config.urls.updateOrder, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                updatePositionBadges();
                showNotification('Image order updated', 'success');
            } else {
                showNotification(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error updating order:', error);
            showNotification('Error updating image order', 'error');
        });
    }

    /**
     * Update position badges after reordering
     */
    function updatePositionBadges() {
        const cards = document.querySelectorAll('#gallery-images-grid [data-image-id]');
        cards.forEach((card, index) => {
            const badge = card.querySelector('.badge');
            if (badge) {
                badge.textContent = index + 1;
            }
            card.dataset.position = index;
        });
    }

    /**
     * Save caption for image
     */
    function saveCaptionForImage(imageId, caption) {
        // This would need a new endpoint in the controller
        // For now, just close the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('editCaptionModal'));
        modal.hide();
        showNotification('Caption saving functionality to be implemented', 'info');
    }

    /**
     * Show notification to user
     */
    function showNotification(message, type = 'info') {
        // Create a simple toast notification
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(toast);
        
        // Auto remove after 5 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 5000);
    }

    // Public API
    return {
        init: init
    };
})();

// ----- END FILE: plugins/AdminTheme/webroot/js/image_gallery_manager.js -----

FILE: plugins/AdminTheme/webroot/js/tags_tree.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 1582 bytes
CONTENT:
document.addEventListener('DOMContentLoaded', function() {
    var nestedSortables = [].slice.call(document.querySelectorAll('.sortable-list'));

    for (var i = 0; i < nestedSortables.length; i++) {
        new Sortable(nestedSortables[i], {
            group: 'nested',
            animation: 150,
            fallbackOnBody: true,
            swapThreshold: 0.65,
            onEnd: function (evt) {
                var itemEl = evt.item;
                var newIndex = evt.newIndex;
                var newParentId = evt.to.closest('li') ? evt.to.closest('li').dataset.id : 'root';

                fetch('/admin/tags/updateTree', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken // Make sure to set this variable with your CSRF token
                    },
                    body: JSON.stringify({
                        id: itemEl.dataset.id,
                        newIndex: newIndex,
                        newParentId: newParentId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('Tree updated successfully');
                    } else {
                        console.error('Error updating tree');
                    }
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
            }
        });
    }
});

// ----- END FILE: plugins/AdminTheme/webroot/js/tags_tree.js -----

FILE: plugins/AdminTheme/webroot/js/admin-layout.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 1968 bytes
CONTENT:
/**
 * AdminTheme Layout JavaScript
 * Core layout functionality for the Willow CMS admin interface
 */

document.addEventListener('DOMContentLoaded', function() {
    const sidebarToggle = document.getElementById('sidebarToggle');
    const sidebar = document.getElementById('adminSidebarDesktop');
    
    // Initialize tooltips
    function initializeTooltips() {
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    }

    // Load saved sidebar state
    const savedState = localStorage.getItem('sidebarCollapsed');
    if (savedState === 'true') {
        sidebar.classList.add('collapsed');
        initializeTooltips();
    }
    
    // Remove preload class to enable transitions
    document.documentElement.classList.remove('sidebar-preload-collapsed');

    sidebarToggle.addEventListener('click', function() {
        sidebar.classList.toggle('collapsed');
        
        // Save state to localStorage
        const isCollapsed = sidebar.classList.contains('collapsed');
        localStorage.setItem('sidebarCollapsed', isCollapsed);
        
        if (isCollapsed) {
            // Initialize tooltips when collapsed
            setTimeout(initializeTooltips, 300); // Wait for animation to complete
        } else {
            // Dispose tooltips when expanded
            const tooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            tooltips.forEach(tooltip => {
                const tooltipInstance = bootstrap.Tooltip.getInstance(tooltip);
                if (tooltipInstance) {
                    tooltipInstance.dispose();
                }
            });
        }
    });

    // Initialize tooltips if sidebar is already collapsed
    if (sidebar.classList.contains('collapsed')) {
        initializeTooltips();
    }
});

// ----- END FILE: plugins/AdminTheme/webroot/js/admin-layout.js -----

FILE: plugins/AdminTheme/webroot/js/image_bulk_upload.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 8193 bytes
CONTENT:
Dropzone.autoDiscover = false; // Recommended

document.addEventListener('DOMContentLoaded', function() {
    const dropzoneForm = document.getElementById('imageUploadDropzone');
    if (!dropzoneForm) {
        console.error('Dropzone form #imageUploadDropzone not found.');
        return;
    }

    const uploadUrl = dropzoneForm.dataset.uploadUrl;
    const deleteUrl = dropzoneForm.dataset.deleteUrl;
    const csrfToken = dropzoneForm.dataset.csrfToken;
    const notificationsDiv = document.getElementById('upload-notifications');
    const refreshButton = document.getElementById('refreshPageButton');

    let successfulUploadsCount = 0;
    let failedUploadsCount = 0;

    const myDropzone = new Dropzone("#imageUploadDropzone", {
        paramName: "image",
        maxFilesize: 20, // MB
        maxFiles: 50,
        acceptedFiles: `image/*,.zip,.tar,.tar.gz,.tgz`,
        addRemoveLinks: true, // Enable remove links
        headers: {
            'X-CSRF-Token': csrfToken,
            'Accept': 'application/json' // Crucial for CakePHP content negotiation
        },
        dictDefaultMessage: "Drop files here or click to upload",
        dictRemoveFile: "Remove file",
        dictFileTooBig: "File is too big ({{filesize}}MB). Max filesize: {{maxFilesize}}MB.",
        dictInvalidFileType: "You can't upload files of this type.",
        dictResponseError: "Server responded with {{statusCode}} code.",
        dictCancelUpload: "Cancel upload",
        dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
        dictMaxFilesExceeded: "You cannot upload any more files.",

        init: function() {
            this.on("addedfile", function(file) {
                // Reset notifications on new batch if it's the first file of a new potential batch
                if (this.getQueuedFiles().length === 1 && this.getUploadingFiles().length === 0 && this.files.filter(f => f.status === Dropzone.SUCCESS || f.status === Dropzone.ERROR).length === 0) {
                    successfulUploadsCount = 0;
                    failedUploadsCount = 0;
                    if (notificationsDiv) notificationsDiv.innerHTML = '';
                    if (refreshButton) refreshButton.style.display = 'none';
                }
            });

            this.on("success", function(file, response) {
                file.previewElement.classList.add("dz-success");
                const successMessage = file.previewElement.querySelector("[data-dz-successmessage]"); // Dropzone 6+
                if(successMessage) successMessage.textContent = response.message || "Uploaded successfully";

                if (response.image && response.image.id) {
                    file.serverId = response.image.id; // Store server ID for deletion
                }
                successfulUploadsCount++;
                // Optional: remove file preview after a delay
                // setTimeout(() => { this.removeFile(file); }, 5000);
            });

            this.on("error", function(file, errorMessage, xhr) {
                file.previewElement.classList.add("dz-error");
                const errorDisplay = file.previewElement.querySelector("[data-dz-errormessage]");
                let displayMessage = "Upload failed.";

                if (typeof errorMessage === "object" && errorMessage !== null) { // Our JSON response
                    displayMessage = errorMessage.message || "An error occurred.";
                    if (errorMessage.errors) {
                        let validationMsgs = [];
                        for (const field in errorMessage.errors) {
                            validationMsgs.push(Object.values(errorMessage.errors[field]).join(', '));
                        }
                        displayMessage += "<br><small>" + validationMsgs.join('<br>') + "</small>";
                    }
                } else if (typeof errorMessage === "string") {
                    displayMessage = errorMessage;
                } else if (xhr && xhr.statusText) {
                     displayMessage = `Error ${xhr.status}: ${xhr.statusText}`;
                }

                if (errorDisplay) {
                    errorDisplay.innerHTML = displayMessage;
                }
                console.error("Upload error:", file.name, errorMessage, xhr);
                failedUploadsCount++;
            });

            this.on("queuecomplete", function() {
                if (notificationsDiv) {
                    let message = `Upload queue finished. Successful: ${successfulUploadsCount}, Failed: ${failedUploadsCount}.`;
                    notificationsDiv.className = 'alert ' + (failedUploadsCount > 0 ? 'alert-warning' : 'alert-success');
                    notificationsDiv.textContent = message;
                }
                if (refreshButton) {
                    refreshButton.style.display = 'inline-block';
                    refreshButton.onclick = function() { location.reload(); };
                }
            });

            this.on("removedfile", function(file) {
                if (file.serverId && (file.status === "success" || file.status === Dropzone.SUCCESS)) {
                    fetch(`${deleteUrl}/${file.serverId}`, {
                        method: 'DELETE',
                        headers: {
                            'X-CSRF-Token': csrfToken,
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => {
                        if (!response.ok) {
                            // Try to parse error from server if possible
                            return response.json().then(err => { throw err; });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            console.log('File deleted from server:', data.message);
                            successfulUploadsCount = Math.max(0, successfulUploadsCount - 1); // Decrement if it was a success
                        } else {
                            console.error('Failed to delete file from server:', data.message);
                            alert('Could not delete file from server: ' + data.message);
                            // Optionally, re-add the file to the Dropzone UI to indicate it wasn't deleted.
                            // This can be complex; for now, an alert is simpler.
                        }
                    })
                    .catch(error => {
                        let errorMsg = 'Error sending delete request.';
                        if (error && error.message) {
                            errorMsg = error.message;
                        }
                        console.error('Error deleting file:', error);
                        alert('Failed to delete file: ' + errorMsg);
                    })
                    .finally(() => {
                        // Update counts if queuecomplete hasn't run yet or if we want dynamic updates
                        if (this.getQueuedFiles().length === 0 && this.getUploadingFiles().length === 0) {
                             if (notificationsDiv) {
                                let message = `Summary: Successful: ${successfulUploadsCount}, Failed: ${failedUploadsCount}.`;
                                notificationsDiv.textContent = message;
                             }
                        }
                    });
                } else if (file.status === "error" || file.status === Dropzone.ERROR) {
                    failedUploadsCount = Math.max(0, failedUploadsCount - 1); // Decrement if it was a failure
                     if (this.getQueuedFiles().length === 0 && this.getUploadingFiles().length === 0) {
                         if (notificationsDiv) {
                            let message = `Summary: Successful: ${successfulUploadsCount}, Failed: ${failedUploadsCount}.`;
                            notificationsDiv.textContent = message;
                         }
                     }
                }
            });
        }
    });
});

// ----- END FILE: plugins/AdminTheme/webroot/js/image_bulk_upload.js -----

FILE: plugins/AdminTheme/webroot/js/gallery-manage-images.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 5757 bytes
CONTENT:
/**
 * Gallery Image Management
 * Handles drag-and-drop image ordering and removal for the manage images interface
 */
(function() {
    'use strict';

    let sortableInstance = null;
    let config = {};

    /**
     * Initialize the gallery image management
     */
    function init(options) {
        config = Object.assign({
            galleryId: null,
            csrfToken: null,
            updateOrderUrl: '',
            removeImageUrl: '',
            confirmMessage: 'Are you sure you want to remove this image from the gallery?'
        }, options);

        initializeSortable();
        bindRemoveEvents();
    }

    /**
     * Initialize Sortable.js for drag and drop
     */
    function initializeSortable() {
        const sortableElement = document.getElementById('sortable-images');
        if (!sortableElement || typeof Sortable === 'undefined') {
            return;
        }

        sortableInstance = Sortable.create(sortableElement, {
            animation: 150,
            ghostClass: 'sortable-ghost',
            chosenClass: 'sortable-chosen',
            dragClass: 'sortable-drag',
            onEnd: function(evt) {
                updateImageOrder();
            }
        });
    }

    /**
     * Bind remove image button events
     */
    function bindRemoveEvents() {
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('remove-image')) {
                e.preventDefault();
                const imageId = e.target.getAttribute('data-image-id');
                if (imageId) {
                    removeImage(imageId, e.target);
                }
            }
        });
    }

    /**
     * Update image order after drag and drop
     */
    function updateImageOrder() {
        if (!config.updateOrderUrl) {
            console.warn('Update order URL not configured');
            return;
        }

        const sortableElement = document.getElementById('sortable-images');
        if (!sortableElement) return;

        const imageIds = Array.from(sortableElement.children).map(item => 
            item.getAttribute('data-image-id')
        );

        const formData = new FormData();
        formData.append('gallery_id', config.galleryId);
        imageIds.forEach(imageId => {
            formData.append('image_ids[]', imageId);
        });

        fetch(config.updateOrderUrl, {
            method: 'POST',
            headers: {
                'X-CSRF-Token': config.csrfToken
            },
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Image order updated successfully', 'success');
            } else {
                showNotification('Failed to update order: ' + (data.message || 'Unknown error'), 'error');
            }
        })
        .catch(error => {
            console.error('Error updating order:', error);
            showNotification('Error updating image order', 'error');
        });
    }

    /**
     * Remove an image from the gallery
     */
    function removeImage(imageId, buttonElement) {
        if (!confirm(config.confirmMessage)) {
            return;
        }

        if (!config.removeImageUrl) {
            console.warn('Remove image URL not configured');
            return;
        }

        const url = config.removeImageUrl.replace(':imageId', imageId);

        fetch(url, {
            method: 'DELETE',
            headers: {
                'X-CSRF-Token': config.csrfToken
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Remove the image item from DOM
                const imageItem = buttonElement.closest('.gallery-image-item');
                if (imageItem) {
                    imageItem.remove();
                }
                showNotification('Image removed from gallery', 'success');
            } else {
                showNotification('Failed to remove image: ' + (data.message || 'Unknown error'), 'error');
            }
        })
        .catch(error => {
            console.error('Error removing image:', error);
            showNotification('Failed to remove image', 'error');
        });
    }

    /**
     * Show a notification to the user
     */
    function showNotification(message, type = 'info') {
        // Use existing notification system if available, otherwise create simple alert
        if (window.showToast && typeof window.showToast === 'function') {
            window.showToast(message, type);
            return;
        }

        // Fallback: create a simple notification
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show`;
        notification.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        document.body.appendChild(notification);
        
        // Auto remove after 5 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }

    // Auto-initialize if window.GalleryManageConfig is available
    document.addEventListener('DOMContentLoaded', function() {
        if (window.GalleryManageConfig) {
            init(window.GalleryManageConfig);
        }
    });

    // Export for manual initialization
    window.GalleryManage = {
        init: init
    };
})();

// ----- END FILE: plugins/AdminTheme/webroot/js/gallery-manage-images.js -----

FILE: plugins/AdminTheme/webroot/js/markdown-it-edit.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 4739 bytes
CONTENT:
document.addEventListener('DOMContentLoaded', function() {
    // Disable automatic highlighting
    hljs.configure({ ignoreUnescapedHTML: true });
    
    const md = new markdownit({
        html: true,
        linkify: true,
        typographer: true,
        highlight: function (str, lang) {
            if (lang && hljs.getLanguage(lang)) {
                try {
                    const highlighted = hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
                    return `<pre><code class="hljs language-${lang}">${highlighted}</code></pre>`;
                } catch (__) {}
            }
            return `<pre><code class="hljs">${md.utils.escapeHtml(str)}</code></pre>`;
        }
    });

    // Custom render rule for links
    const defaultRender = md.renderer.rules.link_open || function(tokens, idx, options, env, self) {
        return self.renderToken(tokens, idx, options);
    };

    md.renderer.rules.link_open = function(tokens, idx, options, env, self) {
        const aIndex = tokens[idx].attrIndex('target');
        if (aIndex < 0) {
            tokens[idx].attrPush(['target', '_blank']); 
        } else {
            tokens[idx].attrs[aIndex][1] = '_blank';    
        }

        const relIndex = tokens[idx].attrIndex('rel');
        if (relIndex < 0) {
            tokens[idx].attrPush(['rel', 'noopener']); 
        } else {
            tokens[idx].attrs[relIndex][1] = 'noopener';
        }

        return defaultRender(tokens, idx, options, env, self);
    };

    const editor = document.getElementById('article-markdown');
    const preview = document.getElementById('markdown-preview');
    const bodyTextarea = document.getElementById('article-body');

    let updateTimeout = null;

    function cleanupHighlight(element) {
        element.querySelectorAll('pre code').forEach(block => {
            // Remove all highlight.js related attributes
            block.removeAttribute('data-highlighted');
            block.className = block.className.replace(/hljs-.*\s?/g, '');
            if (block.classList.contains('hljs')) {
                const lang = Array.from(block.classList)
                    .find(cls => cls.startsWith('language-'));
                block.className = `hljs ${lang || ''}`.trim();
            }
        });
    }

    function updatePreview() {
        if (!editor || !preview || !bodyTextarea) return;

        const content = editor.value;
        // Phase 3: Process Markdown alignment syntax before rendering
        const processedContent = processMarkdownAlignmentSyntax(content);
        const rendered = md.render(processedContent);
        
        // First, update the HTML
        preview.innerHTML = rendered;
        bodyTextarea.value = rendered;
        
        // Clean up any existing highlighting
        cleanupHighlight(preview);
    }

    /**
     * Phase 3: Process custom Markdown alignment syntax
     * Converts custom alignment markers to HTML
     */
    function processMarkdownAlignmentSyntax(content) {
        // Convert alignment markers:
        // ->text<- becomes center-aligned
        // ->text becomes right-aligned  
        // <-text-> becomes justified
        
        const alignmentPatterns = [
            // Center alignment: ->text<-
            {
                pattern: /^->(.*?)<-$/gm,
                replacement: '<p style="text-align: center;">$1</p>'
            },
            // Right alignment: ->text
            {
                pattern: /^->(.*?)$/gm,
                replacement: '<p style="text-align: right;">$1</p>'
            },
            // Justify alignment: <-text->
            {
                pattern: /^<-(.*?)->$/gm,
                replacement: '<p style="text-align: justify;">$1</p>'
            },
            // Image center alignment: ->![alt](src)<-
            {
                pattern: /^->(\!\[.*?\]\(.*?\))<-$/gm,
                replacement: '<p style="text-align: center;">$1</p>'
            }
        ];
        
        let processedContent = content;
        alignmentPatterns.forEach(({pattern, replacement}) => {
            processedContent = processedContent.replace(pattern, replacement);
        });
        
        return processedContent;
    }

    if (editor && preview && bodyTextarea) {
        // Initial preview
        updatePreview();

        // Live preview functionality with debouncing
        editor.addEventListener('input', function() {
            clearTimeout(updateTimeout);
            updateTimeout = setTimeout(updatePreview, 300);
        });

        // Update preview when switching to preview tab
        $('#preview-tab').on('shown.bs.tab', function (e) {
            updatePreview();
        });
    }
});

// ----- END FILE: plugins/AdminTheme/webroot/js/markdown-it-edit.js -----

FILE: plugins/DefaultTheme/webroot/css/willow.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 27578 bytes
CONTENT:
.bd-placeholder-img {
  font-size: 1.125rem;
  text-anchor: middle;
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
}

@media (min-width: 768px) {
  .bd-placeholder-img-lg {
    font-size: 3.5rem;
  }
}

:root {
    --background-color: #ffffff;
    --text-color: #212529;
    --code-bg: #f8f9fa;
    --code-color: #212529;
    --pre-bg: #f8f9fa;
    --pre-border: #dee2e6;
    --blockquote-border: #dee2e6;
    --meta-color: #727272;
    --table-header-bg: #f8f9fa;
    --table-border: #dee2e6;
    --blockquote-bg: rgba(0, 0, 0, 0.03);
    --inline-code-color: #d63384;
}

[data-bs-theme="dark"] {
    --background-color: #1e2124;
    --text-color: #e9ecef;
    --code-bg: #2d2d2d;
    --code-color: #e9ecef;
    --pre-bg: #1e1e1e;
    --pre-border: #373b3e;
    --blockquote-border: #373b3e;
    --meta-color: #a0a0a0;
    --table-header-bg: #2d2d2d;
    --table-border: #373b3e;
    --blockquote-bg: rgba(255, 255, 255, 0.05);
    --inline-code-color: #e685b5;
}

.bi {
  vertical-align: -.125em;
  fill: currentColor;
}

.nav-scroller {
  position: relative;
  z-index: 2;
  height: 2.75rem;
  overflow-y: hidden;
}

.nav-scroller .nav {
  display: flex;
  flex-wrap: nowrap;
  padding-bottom: 1rem;
  margin-top: -1px;
  overflow-x: auto;
  text-align: center;
  white-space: nowrap;
  -webkit-overflow-scrolling: touch;
}

.btn-bd-primary {
  --bd-violet-bg: #712cf9;
  --bd-violet-rgb: 112.520718, 44.062154, 249.437846;
  --bs-btn-font-weight: 600;
  --bs-btn-color: var(--bs-white);
  --bs-btn-bg: var(--bd-violet-bg);
  --bs-btn-border-color: var(--bd-violet-bg);
  --bs-btn-hover-color: var(--bs-white);
  --bs-btn-hover-bg: #6528e0;
  --bs-btn-hover-border-color: #6528e0;
  --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);
  --bs-btn-active-color: var(--bs-btn-hover-color);
  --bs-btn-active-bg: #5a23c8;
  --bs-btn-active-border-color: #5a23c8;
}

.bd-mode-toggle {
  z-index: 1500;
}

/* Accessibility improvements */
.visually-hidden-focusable:focus {
  position: static !important;
  width: auto !important;
  height: auto !important;
  padding: 0.5rem 1rem !important;
  margin: 0 !important;
  overflow: visible !important;
  clip: auto !important;
  white-space: nowrap !important;
  z-index: 9999;
}

/* Focus indicators - only show on keyboard focus, not mouse clicks */
a:focus-visible,
button:focus-visible,
.btn:focus-visible,
.nav-link:focus-visible,
.list-group-item:focus-visible {
  outline: 2px solid var(--bs-primary);
  outline-offset: 2px;
  box-shadow: 0 0 0 0.2rem rgba(var(--bs-primary-rgb), 0.25);
}

/* Remove focus outline on mouse click for all links and interactive elements */
a:focus:not(:focus-visible),
button:focus:not(:focus-visible),
.btn:focus:not(:focus-visible),
.nav-link:focus:not(:focus-visible),
.list-group-item:focus:not(:focus-visible) {
  outline: none;
  box-shadow: none;
}

/* Sidebar sections spacing */
.sidebar-section {
  background: var(--bs-body-bg);
  border-radius: 8px;
  padding: 1rem;
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.sidebar-content {
  position: relative;
}

@media (max-width: 991.98px) {
  .sidebar-content {
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid var(--bs-border-color);
  }
}

.bd-mode-toggle .dropdown-menu .active .bi {
  display: block !important;
}

/* Blog header and typography */
.blog-header-logo {
  font-family: "Playfair Display", Georgia, "Times New Roman", serif/*rtl:Amiri, Georgia, "Times New Roman", serif*/;
  font-size: 2.25rem;
}

.blog-header-logo:hover {
  text-decoration: none;
}

h1, h2, h3, h4, h5, h6 {
  font-family: "Playfair Display", Georgia, "Times New Roman", serif/*rtl:Amiri, Georgia, "Times New Roman", serif*/;
}

.flex-auto {
  flex: 0 0 auto;
}

.h-250 { height: 250px; }
@media (min-width: 768px) {
  .h-md-250 { height: 250px; }
}

/* Pagination */
.blog-pagination {
  margin-bottom: 4rem;
}

.pagination-wrapper {
  margin: 3rem 0;
}

.pagination-lg .page-link {
  padding: 0.75rem 1rem;
  font-size: 1.125rem;
}

.pagination .page-link {
  border-radius: 0.5rem;
  margin: 0 0.125rem;
  transition: all 0.2s ease;
}

.pagination .page-link:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

/* Blog posts */
.blog-post {
  margin-bottom: 2rem;
  line-height: 1.7;
  font-size: 1.1rem;
}

/* Modern card-based article previews */
.article-preview-card {
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  border: none;
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
}

.article-preview-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(0,0,0,0.12);
}

.article-preview-image {
  height: 200px;
  object-fit: cover;
}

.article-meta {
  font-size: 0.875rem;
  color: var(--meta-color);
  margin-bottom: 0.5rem;
}

.article-summary {
  color: var(--text-color);
  line-height: 1.6;
}

.blog-post-meta {
  margin-bottom: 1.25rem;
  color: var(--meta-color);
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  gap: 1rem;
  flex-wrap: wrap;
}

.blog-post-meta .author {
  font-weight: 500;
}

.blog-post-meta .date {
  opacity: 0.8;
}

/* Login form */
.form-signin {
  max-width: 330px;
  padding: 1rem;
}

.form-signin .form-floating:focus-within {
  z-index: 2;
}

.form-signin input[type="email"] {
  margin-bottom: -1px;
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}

.form-signin input[type="password"] {
  margin-bottom: 10px;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}

/* Breadcrumbs */
.breadcrumb {
  margin-bottom: 0.2rem;
}

.breadcrumb-item {
  font-size: 0.875rem;
}

.breadcrumb-item + .breadcrumb-item::before {
  content: ">";
}

/* Enhanced Markdown content styles */
.blog-post h1,
.blog-post h2,
.blog-post h3,
.blog-post h4,
.blog-post h5,
.blog-post h6 {
  margin-top: 2.5rem;
  margin-bottom: 1.25rem;
  color: var(--text-color);
  line-height: 1.3;
  font-weight: 600;
}

.blog-post h1:first-child,
.blog-post h2:first-child,
.blog-post h3:first-child {
  margin-top: 0;
}

.blog-post h1 { font-size: 2.5rem; }
.blog-post h2 { font-size: 2rem; }
.blog-post h3 { font-size: 1.75rem; }
.blog-post h4 { font-size: 1.5rem; }
.blog-post h5 { font-size: 1.25rem; }
.blog-post h6 { font-size: 1.1rem; }

.blog-post code {
  padding: 0.2em 0.4em;
  border-radius: 4px;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;
  font-size: 0.9em;
  background-color: var(--code-bg);
  color: var(--inline-code-color);
}

.blog-post pre {
  padding: 1rem;
  margin: 1.5rem 0;
  border-radius: 6px;
  background-color: var(--pre-bg);
  border: 1px solid var(--pre-border);
  overflow-x: auto;
}

.blog-post pre code {
  padding: 0;
  background-color: transparent;
  border-radius: 0;
  color: var(--code-color);
  font-size: 0.9rem;
  line-height: 1.5;
}

.blog-post blockquote {
  padding: 1rem 1.5rem;
  margin: 1.5rem 0;
  border-left: 4px solid var(--blockquote-border);
  background-color: var(--blockquote-bg);
  font-style: italic;
}

.blog-post ul,
.blog-post ol {
  padding-left: 2rem;
  margin: 1rem 0;
}

.blog-post li {
  margin-bottom: 0.5rem;
}

.blog-post table {
  width: 100%;
  margin: 1.5rem 0;
  border-collapse: collapse;
  border: 1px solid var(--table-border);
}

.blog-post th,
.blog-post td {
  padding: 0.75rem;
  border: 1px solid var(--table-border);
}

.blog-post th {
  background-color: var(--table-header-bg);
  font-weight: 600;
}

.blog-post tr:nth-child(even) {
  background-color: var(--blockquote-bg);
}

.blog-post img {
  max-width: 100%;
  height: auto;
  margin: 1.5rem 0;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* Article header styling */
.article-header {
  border-bottom: 1px solid var(--pre-border);
  padding-bottom: 1.5rem;
}

.article-featured-image {
  text-align: center;
}

.article-body {
  font-size: 1.125rem;
  line-height: 1.8;
}

/* High specificity CSS alignment support for inline styles */
/* Target any element with text-align inline styles */
.article-body [style*="text-align: center"],
.blog-post [style*="text-align: center"],
.article-body .content-align-center,
.blog-post .content-align-center {
  text-align: center !important;
}

.article-body [style*="text-align: left"],
.blog-post [style*="text-align: left"],
.article-body .content-align-left,
.blog-post .content-align-left {
  text-align: left !important;
}

.article-body [style*="text-align: right"],
.blog-post [style*="text-align: right"],
.article-body .content-align-right,
.blog-post .content-align-right {
  text-align: right !important;
}

.article-body [style*="text-align: justify"],
.blog-post [style*="text-align: justify"],
.article-body .content-align-justify,
.blog-post .content-align-justify {
  text-align: justify !important;
}

/* High specificity image alignment for inline styles - exclude gallery images */
.article-body [style*="text-align: center"]:not(.photo-gallery) img:not(.gallery-image),
.blog-post [style*="text-align: center"]:not(.photo-gallery) img:not(.gallery-image),
.article-body .content-align-center img:not(.gallery-image),
.blog-post .content-align-center img:not(.gallery-image) {
  display: block !important;
  margin: 1.5rem auto !important;
  max-width: 100%;
  height: auto;
}

.article-body [style*="text-align: left"]:not(.photo-gallery) img:not(.gallery-image),
.blog-post [style*="text-align: left"]:not(.photo-gallery) img:not(.gallery-image),
.article-body .content-align-left img:not(.gallery-image),
.blog-post .content-align-left img:not(.gallery-image) {
  display: block !important;
  margin: 1.5rem 0 !important;
  max-width: 100%;
  height: auto;
}

.article-body [style*="text-align: right"]:not(.photo-gallery) img:not(.gallery-image),
.blog-post [style*="text-align: right"]:not(.photo-gallery) img:not(.gallery-image),
.article-body .content-align-right img:not(.gallery-image),
.blog-post .content-align-right img:not(.gallery-image) {
  display: block !important;
  margin: 1.5rem 0 1.5rem auto !important;
  max-width: 100%;
  height: auto;
}

/* Phase 4: Responsive image enhancements and typography improvements */

/* Responsive article images within content (fallback for non-aligned) - exclude gallery images */
/* Only apply to images that are not inside aligned containers */
.article-body img:not(.gallery-image) {
  max-width: 100%;
  height: auto;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

/* Default margin for images not in aligned containers */
.article-body p:not([style*="text-align"]) img:not(.gallery-image) {
  margin: 2rem auto;
  display: block;
}

.article-body img:not(.gallery-image):hover {
  transform: scale(1.02);
  box-shadow: 0 6px 20px rgba(0,0,0,0.2);
}

/* Enhanced responsive image handling - only apply when explicitly classed */
.article-body img.img-responsive,
.blog-post img.img-responsive {
  max-width: 100%;
  height: auto;
  object-fit: cover;
}

/* Remove problematic gallery overrides - let photo-gallery.css handle gallery styling */

/* Figure elements for better semantic structure */
.article-body figure,
.blog-post figure {
  margin: 2rem 0;
  padding: 0;
}

.article-body figcaption,
.blog-post figcaption {
  font-size: 0.9rem;
  color: var(--meta-color);
  text-align: center;
  margin-top: 0.5rem;
  font-style: italic;
}

/* Content alignment helper classes */
.content-align-center {
  text-align: center !important;
}

.content-align-left {
  text-align: left !important;
}

.content-align-right {
  text-align: right !important;
}

.content-align-justify {
  text-align: justify !important;
}

/* Fallback rule for any missed center-aligned images in article content */
.article-body *[style*="text-align: center"] img:not(.gallery-image),
.article-body *[style*="text-align:center"] img:not(.gallery-image),
.blog-post *[style*="text-align: center"] img:not(.gallery-image),
.blog-post *[style*="text-align:center"] img:not(.gallery-image) {
  display: block !important;
  margin-left: auto !important;
  margin-right: auto !important;
}

/* Responsive image sizes for different viewports - exclude gallery images */
@media (max-width: 576px) {
  .article-body img:not(.gallery-image),
  .blog-post img:not(.gallery-image) {
    margin: 1rem auto;
    border-radius: 6px;
  }
  
  .article-body p[style*="text-align: center"]:not(.photo-gallery) img:not(.gallery-image),
  .article-body p[style*="text-align:center"]:not(.photo-gallery) img:not(.gallery-image),
  .blog-post p[style*="text-align: center"]:not(.photo-gallery) img:not(.gallery-image),
  .blog-post p[style*="text-align:center"]:not(.photo-gallery) img:not(.gallery-image) {
    margin: 1rem auto;
  }
}

@media (min-width: 577px) and (max-width: 768px) {
  .article-body img:not(.gallery-image),
  .blog-post img:not(.gallery-image) {
    max-width: 90%;
  }
}

@media (min-width: 769px) {
  /* Floating images with text wrap on larger screens - exclude gallery images */
  .article-body p[style*="text-align: left"]:not(.photo-gallery) img:not(.gallery-image),
  .article-body p[style*="text-align:left"]:not(.photo-gallery) img:not(.gallery-image),
  .blog-post p[style*="text-align: left"]:not(.photo-gallery) img:not(.gallery-image),
  .blog-post p[style*="text-align:left"]:not(.photo-gallery) img:not(.gallery-image) {
    float: left;
    margin: 0 1.5rem 1rem 0;
    max-width: 400px;
    display: inline;
  }
  
  .article-body p[style*="text-align: right"]:not(.photo-gallery) img:not(.gallery-image),
  .article-body p[style*="text-align:right"]:not(.photo-gallery) img:not(.gallery-image),
  .blog-post p[style*="text-align: right"]:not(.photo-gallery) img:not(.gallery-image),
  .blog-post p[style*="text-align:right"]:not(.photo-gallery) img:not(.gallery-image) {
    float: right;
    margin: 0 0 1rem 1.5rem;
    max-width: 400px;
    display: inline;
  }
}

/* Typography improvements */
.article-body,
.blog-post {
  font-feature-settings: "kern" 1, "liga" 1, "calt" 1;
  text-rendering: optimizeLegibility;
}

.article-body p,
.blog-post p {
  line-height: 1.7;
  margin-bottom: 1.2rem;
  hyphens: auto;
  word-wrap: break-word;
}

.article-body h1, .article-body h2, .article-body h3,
.blog-post h1, .blog-post h2, .blog-post h3 {
  line-height: 1.3;
  letter-spacing: -0.02em;
  font-weight: 600;
}

/* Better quote styling */
.article-body blockquote,
.blog-post blockquote {
  position: relative;
  padding-left: 2rem;
  border-left: 4px solid var(--bs-primary);
  font-style: italic;
  font-size: 1.1em;
  line-height: 1.6;
  margin: 2rem 0;
}

.article-body blockquote::before,
.blog-post blockquote::before {
  content: '"';
  position: absolute;
  left: -0.5rem;
  top: -0.5rem;
  font-size: 3rem;
  color: var(--bs-primary);
  opacity: 0.3;
}

/* Print styles - exclude gallery images */
@media print {
  .article-body img:not(.gallery-image),
  .blog-post img:not(.gallery-image) {
    max-width: 100% !important;
    page-break-inside: avoid;
    margin: 1rem 0 !important;
    float: none !important;
    display: block !important;
  }
  
  .article-body,
  .blog-post {
    font-size: 12pt;
    line-height: 1.5;
  }
}

@media (min-width: 768px) {
  .article-body img.align-left {
    float: left;
    max-width: 400px;
    margin: 0 2rem 1rem 0;
    display: inline;
  }
  
  .article-body img.align-right {
    float: right;
    max-width: 400px;
    margin: 0 0 1rem 2rem;
    display: inline;
  }
}

/* Remove problematic forced floats - use responsive classes instead */
.article-content-wrapper > img,
#article-body-content img {
  max-width: 100%;
  height: auto;
  margin: 1rem 0;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

@media (min-width: 768px) {
  .article-content-wrapper > img.float-left,
  #article-body-content img.float-left {
    float: left;
    max-width: 300px;
    margin: 0 1.5rem 1rem 0;
  }
  
  .article-content-wrapper > img.float-right,
  #article-body-content img.float-right {
    float: right;
    max-width: 300px;
    margin: 0 0 1rem 1.5rem;
  }
}

/* Explicitly prevent floating on YouTube container */
.youtube-embed {
  float: none;
  clear: both;
}

.clear-float {
  clear: both;
}

.blog-post hr {
  margin: 0.5rem;
  border: 0;
  border-top: 1px solid var(--pre-border);
}

.blog-post a {
  color: var(--bs-link-color);
  text-decoration: none;
  border-bottom: 1px solid transparent;
  transition: border-color 0.2s ease;
}

.blog-post a:hover {
  color: var(--bs-link-hover-color);
  border-bottom-color: currentColor;
  text-decoration: none;
}

.blog-post p {
  margin: 1.5rem 0;
}

body {
  background-color: var(--background-color);
  color: var(--text-color);
}

/* Code block language label */
.blog-post pre[class*="language-"]::before {
  content: attr(class);
  display: block;
  background-color: var(--blockquote-bg);
  padding: 0.3em 0.6em;
  font-size: 0.8em;
  color: var(--meta-color);
  border-bottom: 1px solid var(--pre-border);
  margin-bottom: 0.5em;
  border-radius: 3px;
}

/* Syntax highlighting adjustments */
[data-bs-theme="dark"] .hljs-string {
  color: #add8e6 !important; /* Light blue for better contrast in dark mode */
}

.youtube-embed {
  width: 100%;
  max-width: 100%;
  margin: 1.5rem 0;
  border-radius: 6px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.youtube-placeholder,
.youtube-player-container {
  position: relative;
  width: 100%;
  padding-top: 56.25%; /* 16:9 Aspect Ratio */
}

.youtube-placeholder img,
.youtube-player-container iframe {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 6px;
}

.youtube-consent-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: white;
  text-align: center;
  padding: 20px;
}

@media (min-width: 768px) {
  .youtube-embed {
    margin: 2rem 0;
  }
}

/* Modern responsive image handling */
.blog-post .article-content {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

@media (min-width: 768px) {
  .blog-post .article-content {
    display: block;
    overflow: hidden;
  }
  
  .blog-post .article-content img {
    float: left;
    max-width: 250px;
    height: auto;
    margin: 0 1.5rem 1rem 0;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
}

/* Mobile-first article text */
.blog-post .article-text {
  margin: 0;
}

.blog-post .article-text p {
  margin-bottom: 1rem;
}

.blog-post .article-text p:first-child {
  margin-top: 0;
}

/* Responsive image containers */
.article-image-container {
  position: relative;
  margin: 1rem 0;
}

.article-image-container img {
  width: 100%;
  height: auto;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

@media (min-width: 768px) {
  .article-image-inline {
    float: left;
    max-width: 300px;
    margin: 0 1.5rem 1rem 0;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  
  .article-image-right {
    float: right;
    max-width: 300px;
    margin: 0 0 1rem 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
}

/* New blog layout styles */
.article-list-item {
  margin-bottom: 0.75rem;
  padding-bottom: 0.5rem;
}

.article-title {
  margin-bottom: 0.75rem;
  font-weight: 600;
  line-height: 1.3;
}

.article-meta {
  font-size: 0.875rem;
  color: var(--meta-color);
  font-style: italic;
  opacity: 0.9;
}

.article-wrap-container {
  margin-top: 1rem;
  display: flow-root; /* Create new block formatting context but allow text wrapping */
}

.article-image-container {
  float: left;
  margin: 0 1.5rem 1rem 0;
}

.article-wrap-image {
  max-width: 400px;
  height: auto;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  transition: transform 0.2s ease;
  border: none;
  outline: none;
  display: block;
}

.article-wrap-image:hover {
  transform: scale(1.02);
}

.article-text-wrap {
  line-height: 1.6;
  font-size: 1rem;
  text-align: left;
}

.article-text-wrap p {
  margin-bottom: 1rem;
}

/* Remove blue border from image links */
.article-wrap-container a {
  border: none !important;
  outline: none !important;
  text-decoration: none !important;
}

.article-wrap-container a:focus-visible {
  outline: 2px solid var(--bs-primary);
  outline-offset: 2px;
}

.article-wrap-container a:focus:not(:focus-visible) {
  outline: none;
}

.read-more-container {
  text-align: right;
  margin-top: 1rem;
  clear: both;
}

.read-more-link {
  font-size: 0.875rem;
  color: rgba(255,255,255,0.7);
  text-decoration: none;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.read-more-link:hover {
  color: rgba(255,255,255,0.9);
  background-color: rgba(255,255,255,0.1);
  text-decoration: none;
}

.article-separator {
  clear: both;
  border: none;
  border-top: 1px solid rgba(255,255,255,0.15);
  margin: 0.5rem 0 0.125rem 0;
  opacity: 0.6;
}

/* Sidebar article styles */
.sidebar-articles-list {
  padding: 0;
}

.sidebar-article-item {
  padding: 0;
}

.sidebar-article-title {
  font-size: 0.95rem;
  font-weight: 600;
  line-height: 1.3;
  margin-bottom: 0.5rem;
}

.sidebar-wrap-container {
  display: flow-root;
}

.sidebar-image-container {
  float: left;
  margin: 0 0.75rem 0.5rem 0;
}

.sidebar-wrap-image {
  max-width: 60px;
  height: auto;
  border-radius: 6px;
  box-shadow: 0 1px 4px rgba(0,0,0,0.1);
  display: block;
  border: none;
  outline: none;
}

.sidebar-text-wrap {
  line-height: 1.4;
  text-align: left;
}

.sidebar-article-summary {
  margin-bottom: 0.5rem;
}

.sidebar-article-meta {
  font-size: 0.8rem;
  font-style: italic;
  opacity: 0.8;
}

.sidebar-article-separator {
  clear: both;
  border: none;
  border-top: 1px solid rgba(255,255,255,0.1);
  opacity: 0.5;
}

/* Mobile responsive adjustments */
@media (max-width: 767.98px) {
  .article-image-float {
    float: none;
    max-width: 100%;
    width: 100%;
    margin: 0 0 1rem 0;
    display: block;
  }
  
  .sidebar-article-image {
    float: none;
    max-width: 100%;
    width: 100%;
    margin: 0 0 0.75rem 0;
    display: block;
  }
  
  .sidebar-article-item {
    overflow: visible; /* Allow content to flow normally on mobile */
  }
  
  .read-more-container {
    text-align: left;
    clear: none;
  }
  
  /* Article index mobile layout - center image and disable text wrap */
  .article-image-container {
    float: none;
    margin: 0 auto 1rem auto;
    text-align: center;
  }
  
  .article-wrap-image {
    display: block;
    margin: 0 auto;
  }
}

/* Tablet responsive adjustments */
@media (min-width: 768px) and (max-width: 991.98px) {
  .article-image-float {
    max-width: min(240px, 25vw);
  }
}

/* Breakpoint 3: Medium desktop (992px - 1199.98px) - Stop text wrapping */
@media (min-width: 992px) and (max-width: 1199.98px) {
  .article-image-container {
    float: none;
    margin: 0 auto 1rem auto;
    text-align: center;
  }
  
  .article-wrap-image {
    display: block;
    margin: 0 auto;
  }
}

/* Breakpoint 4: Large desktop (1200px - 1399.98px) - Text wrap with max 400px image */
@media (min-width: 1200px) and (max-width: 1399.98px) {
  .article-image-container {
    float: left;
    margin: 0 1.5rem 1rem 0;
  }
  
  .article-wrap-image {
    max-width: 400px;
    display: block;
  }
}

/* Breakpoint 5: Extra large desktop (1400px+) - Text wrap with max 400px image */
@media (min-width: 1400px) {
  .article-image-container {
    float: left;
    margin: 0 1.5rem 1rem 0;
  }
  
  .article-wrap-image {
    max-width: 400px;
    display: block;
  }
  
  .article-image-float {
    max-width: 320px;
  }
}
/* Content image enhancements for better alignment */
.article-body .content-image {
  max-width: 100%;
  height: auto;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.article-body .content-image:hover {
  transform: scale(1.02);
  box-shadow: 0 6px 20px rgba(0,0,0,0.2);
}

/* Enhanced spacing for aligned content */
.article-body .content-align-center {
  text-align: center \!important;
  margin: 1.5rem 0;
}

.article-body .content-align-left {
  text-align: left \!important;
  margin: 1.5rem 0;
}

.article-body .content-align-right {
  text-align: right \!important;
  margin: 1.5rem 0;
}

.article-body .content-align-justify {
  text-align: justify \!important;
  margin: 1.5rem 0;
}

/* Ensure images within aligned paragraphs follow alignment */
.article-body .content-align-center .content-image {
  display: block;
  margin: 1.5rem auto;
}

.article-body .content-align-left .content-image {
  display: block;
  margin: 1.5rem 0 1.5rem 0;
}

.article-body .content-align-right .content-image {
  display: block;
  margin: 1.5rem 0 1.5rem auto;
}

/* Preserve spacing for empty aligned paragraphs */
.article-body p[style*="text-align"]:empty,
.article-body .content-align-center:empty,
.article-body .content-align-left:empty,
.article-body .content-align-right:empty {
  height: 1.5rem;
  margin: 0.75rem 0;
}

/* Apply Trumbowyg-like styling to article content */
.article-body.trumbowyg-editor-visible {
  min-height: auto;
  padding: 0;
  border: none;
  background: transparent;
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

/* Override Trumbowyg CSS that might interfere with our layout */
.article-body.trumbowyg-editor-visible img {
  max-width: 100% !important;
  height: auto !important;
}

/* Ensure Trumbowyg alignment styles work */
.trumbowyg-editor-visible [style*="text-align: center"],
.trumbowyg-semantic [style*="text-align: center"] {
  text-align: center !important;
}

.trumbowyg-editor-visible [style*="text-align: left"],
.trumbowyg-semantic [style*="text-align: left"] {
  text-align: left !important;
}

.trumbowyg-editor-visible [style*="text-align: right"],
.trumbowyg-semantic [style*="text-align: right"] {
  text-align: right !important;
}

.trumbowyg-editor-visible [style*="text-align: justify"],
.trumbowyg-semantic [style*="text-align: justify"] {
  text-align: justify !important;
}

/* FINAL OVERRIDE - Ensure alignment works on frontend */
#article-body-content p[style*="text-align: center"],
#article-body-content .content-align-center {
  text-align: center !important;
  display: block !important;
  width: 100% !important;
  clear: both !important;
  margin: 1.5rem 0 !important;
}

#article-body-content p[style*="text-align: left"],
#article-body-content .content-align-left {
  text-align: left !important;
  display: block !important;
  width: 100% !important;
  clear: both !important;
  margin: 1.5rem 0 !important;
}

#article-body-content p[style*="text-align: right"],
#article-body-content .content-align-right {
  text-align: right !important;
  display: block !important;
  width: 100% !important;
  clear: both !important;
  margin: 1.5rem 0 !important;
}

#article-body-content p[style*="text-align: center"] img,
#article-body-content .content-align-center img {
  display: block !important;
  margin-left: auto !important;
  margin-right: auto !important;
  clear: both !important;
}

#article-body-content p[style*="text-align: right"] img,
#article-body-content .content-align-right img {
  display: block !important;
  margin-left: auto !important;
  margin-right: 0 !important;
  clear: both !important;
}

#article-body-content p[style*="text-align: left"] img,
#article-body-content .content-align-left img {
  display: block !important;
  margin-left: 0 !important;
  margin-right: auto !important;
  clear: both !important;
}



// ----- END FILE: plugins/DefaultTheme/webroot/css/willow.css -----

FILE: plugins/DefaultTheme/webroot/css/photo-gallery.css
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 11386 bytes
CONTENT:
/**
 * Photo Gallery Styles
 * Beautiful theme-aware image gallery component styles
 */

/* Gallery Grid Layout */
.photo-gallery {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    margin: 1.5rem 0;
}

.gallery-item {
    position: relative;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: none;
    transition: all 0.3s ease;
    background: transparent;
    border: none;
}

.gallery-item a {
    border-radius: 8px;
    overflow: hidden;
}

.gallery-item:hover {
    transform: translateY(-2px);
    box-shadow: none;
}

.gallery-item a {
    display: block;
    text-decoration: none !important;
    color: inherit;
    border: none !important;
    outline: none !important;
    border-radius: 8px;
    overflow: hidden;
}

.gallery-item a:hover,
.gallery-item a:focus,
.gallery-item a:active {
    text-decoration: none !important;
    border: none !important;
    outline: none !important;
    box-shadow: none !important;
}

.gallery-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    transition: transform 0.3s ease;
    border: none !important;
    border-radius: 8px;
}

.gallery-item:hover .gallery-image {
    transform: scale(1.05);
}

/* Gallery Item Overlay - Simple name display */
.gallery-item-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.7), transparent);
    color: white;
    padding: 0.75rem;
    transform: translateY(100%);
    transition: transform 0.3s ease;
}

.gallery-item:hover .gallery-item-overlay {
    transform: translateY(0);
}

.gallery-item-title {
    font-weight: 500;
    font-size: 0.85rem;
    margin: 0;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);
}

.gallery-item-caption {
    font-size: 0.75rem;
    margin-top: 0.25rem;
    opacity: 0.9;
    line-height: 1.3;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);
}

/* Gallery Header */
.gallery-header {
    margin-bottom: 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 2px solid var(--bs-border-color);
}

/* Admin theme specific header styling */
.admin-gallery .gallery-header .d-flex {
    gap: 2rem;
}

.admin-gallery .gallery-header .gallery-title {
    margin-bottom: 0.5rem;
}

.admin-gallery .gallery-header .gallery-description {
    margin-top: 0.25rem;
}

.gallery-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--bs-body-color);
    margin: 0 0 0.5rem 0;
}

.gallery-description {
    font-size: 1rem;
    line-height: 1.5;
    color: var(--bs-text-muted);
    margin: 0;
    max-width: 100%;
}

.gallery-count {
    background: var(--bs-secondary);
    color: var(--bs-secondary-color, white);
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.8rem;
    font-weight: 500;
    white-space: nowrap;
    align-self: flex-start;
}

/* Empty Gallery State */
.gallery-empty {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--bs-text-muted);
}

.gallery-empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.gallery-empty-text {
    font-size: 1.1rem;
    margin-bottom: 0.5rem;
}

.gallery-empty-subtext {
    font-size: 0.9rem;
    opacity: 0.7;
}

/* PhotoSwipe Custom Styles */
.pswp__custom-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.9), transparent);
    color: white;
    padding: 1.5rem;
    text-align: left;
    backdrop-filter: blur(10px);
    transition: all 0.4s ease-in-out;
    transform: translateY(100%);
    opacity: 0;
}

/* Show caption with slide-up animation */
.pswp__slide--active .pswp__custom-caption {
    transform: translateY(0);
    opacity: 1;
    animation: captionSlideUp 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

@keyframes captionSlideUp {
    0% {
        transform: translateY(100%);
        opacity: 0;
    }
    100% {
        transform: translateY(0);
        opacity: 1;
    }
}

.pswp__caption-title {
    font-size: 1.2rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.pswp__caption-description {
    font-size: 0.95rem;
    line-height: 1.4;
    opacity: 0.9;
}

/* Slideshow Controls */
.pswp__slideshow-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-left: 1rem;
}

.pswp__slideshow-controls .pswp__button {
    width: 44px;
    height: 44px;
    background: rgba(0, 0, 0, 0.3);
    border: none;
    border-radius: 50%;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    backdrop-filter: blur(8px);
}

.pswp__slideshow-controls .pswp__button:hover {
    background: rgba(0, 0, 0, 0.6);
    transform: scale(1.1);
}

.pswp__slideshow-controls .pswp__button:active {
    transform: scale(0.95);
}

.pswp__slideshow-controls svg {
    width: 20px;
    height: 20px;
}

/* Image Counter - Clean text only */
.pswp__image-counter {
    color: white !important;
    font-size: 1rem !important;
    font-weight: 500 !important;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8) !important;
    margin-left: auto !important;
    margin-right: 1rem !important;
    padding: 0.25rem 0 !important;
    background: none !important;
    border: none !important;
    backdrop-filter: none !important;
    box-shadow: none !important;
}

/* Progress Indicator */
.pswp__slideshow-progress {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: rgba(255, 255, 255, 0.2);
    z-index: 9999;
}

.pswp__progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #007bff, #28a745);
    width: 0%;
    border-radius: 2px;
    box-shadow: 0 0 8px rgba(0, 123, 255, 0.5);
}

@keyframes slideshow-progress {
    0% {
        width: 0%;
        opacity: 0.8;
        box-shadow: 0 0 8px rgba(0, 123, 255, 0.5);
    }
    50% {
        opacity: 1;
        box-shadow: 0 0 12px rgba(0, 123, 255, 0.8);
    }
    100% {
        width: 100%;
        opacity: 0.9;
        box-shadow: 0 0 8px rgba(40, 167, 69, 0.5);
    }
}

/* Pulsing effect for progress bar */
@keyframes progressPulse {
    0%, 100% {
        transform: scaleY(1);
    }
    50% {
        transform: scaleY(1.2);
    }
}

/* Enhanced progress bar animation */
.pswp__progress-bar {
    animation-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);
    position: relative;
}

.pswp__progress-bar:before {
    content: '';
    position: absolute;
    top: -2px;
    left: 0;
    right: 0;
    bottom: -2px;
    background: linear-gradient(90deg, 
        rgba(0, 123, 255, 0.3) 0%, 
        rgba(40, 167, 69, 0.3) 100%);
    border-radius: 4px;
    animation: progressPulse 2s ease-in-out infinite;
}

/* Enhanced PhotoSwipe UI */
.pswp__top-bar {
    background: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), transparent);
    backdrop-filter: blur(8px);
    display: flex;
    align-items: center;
    padding: 1rem;
}

.pswp__button {
    transition: all 0.2s ease;
}

.pswp__button:hover {
    transform: scale(1.1);
}

/* Slideshow Status Indicator */
.pswp__slideshow-status {
    position: absolute;
    top: 1rem;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    z-index: 10000;
    backdrop-filter: blur(8px);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.pswp__slideshow-status.show {
    opacity: 1;
}

/* No custom transitions - let PhotoSwipe handle everything */

/* Smooth background transitions */
.pswp {
    transition: background-color 0.3s ease-in-out;
}

/* Ensure images maintain aspect ratio and don't fill entire viewport */
.pswp__img {
    object-fit: contain !important;
}

/* Prevent zoom container from forcing full viewport */
.pswp__zoom-wrap {
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
}

/* Remove grey background box behind images */
.pswp__item {
    background: transparent !important;
}

.pswp__img--placeholder {
    background: transparent !important;
}

.pswp__content {
    background: transparent !important;
}

/* Enhanced button hover effects */
.pswp__button {
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transform-origin: center;
}

.pswp__button:hover {
    transform: scale(1.1);
    filter: brightness(1.2);
}

.pswp__button:active {
    transform: scale(0.95);
}

/* Mobile optimizations */
@media (max-width: 768px) {
    .pswp__slideshow-controls .pswp__button {
        width: 40px;
        height: 40px;
    }
    
    .pswp__slideshow-controls svg {
        width: 18px;
        height: 18px;
    }
    
    .pswp__image-counter {
        font-size: 0.9rem;
        padding: 0.4rem 0.8rem;
        margin-right: 0.5rem;
    }
    
    .pswp__slideshow-controls {
        margin-left: 0.5rem;
        gap: 0.3rem;
    }
}

/* Responsive Design */
@media (max-width: 768px) {
    .photo-gallery {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 0.75rem;
    }
    
    .gallery-item img {
        height: 150px;
    }
    
    .gallery-item-overlay {
        padding: 0.75rem;
    }
    
    .gallery-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
    
    .pswp__custom-caption {
        padding: 1rem;
    }
    
    .pswp__caption-title {
        font-size: 1rem;
    }
    
    .pswp__caption-description {
        font-size: 0.85rem;
    }
}

@media (max-width: 480px) {
    .photo-gallery {
        grid-template-columns: repeat(2, 1fr);
        gap: 0.5rem;
    }
    
    .gallery-item img {
        height: 120px;
    }
}

/* Loading State */
.gallery-loading {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 3rem;
    color: #6c757d;
}

.gallery-loading-spinner {
    display: inline-block;
    width: 2rem;
    height: 2rem;
    border: 2px solid #e9ecef;
    border-radius: 50%;
    border-top-color: #007bff;
    animation: spin 1s ease-in-out infinite;
    margin-right: 0.75rem;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

/* Admin Theme Integration */
.admin-gallery {
    background: var(--bs-body-bg);
    border: 1px solid var(--bs-border-color);
    border-radius: 8px;
    padding: 1.5rem;
}

.admin-gallery .gallery-header {
    border-bottom-color: var(--bs-border-color);
}

.admin-gallery .gallery-header .gallery-title {
    color: var(--bs-body-color);
}

.admin-gallery .gallery-item {
    background: var(--bs-body-bg);
    border: 1px solid var(--bs-border-color);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.admin-gallery .gallery-item:hover {
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
    border-color: var(--bs-primary);
}

.admin-gallery .gallery-empty {
    color: var(--bs-text-muted);
}

.admin-gallery .gallery-count {
    background: var(--bs-secondary);
    color: var(--bs-light);
}

/* Default Theme Integration */
.default-gallery {
    margin: 2rem 0;
}

.default-gallery .gallery-item {
    border-radius: 4px;
}

/* High DPI / Retina Support */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
    .gallery-item img {
        image-rendering: -webkit-optimize-contrast;
        image-rendering: crisp-edges;
    }
}

// ----- END FILE: plugins/DefaultTheme/webroot/css/photo-gallery.css -----

FILE: plugins/DefaultTheme/webroot/js/color-modes.js
LAST MODIFIED: 2025-07-22 02:37:39
SIZE: 2596 bytes
CONTENT:
/*!
 * Color mode toggler for Bootstrap's docs (https://getbootstrap.com/)
 * Copyright 2011-2024 The Bootstrap Authors
 * Licensed under the Creative Commons Attribution 3.0 Unported License.
 */

(() => {
  'use strict'

  const getStoredTheme = () => localStorage.getItem('theme')
  const setStoredTheme = theme => localStorage.setItem('theme', theme)

  const getPreferredTheme = () => {
    const storedTheme = getStoredTheme()
    if (storedTheme) {
      return storedTheme
    }

    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
  }

  const setTheme = theme => {
    if (theme === 'auto') {
      document.documentElement.setAttribute('data-bs-theme', (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'))
    } else {
      document.documentElement.setAttribute('data-bs-theme', theme)
    }
  }

  setTheme(getPreferredTheme())

  const showActiveTheme = (theme, focus = false) => {
    const themeSwitcher = document.querySelector('#bd-theme')

    if (!themeSwitcher) {
      return
    }

    const themeSwitcherText = document.querySelector('#bd-theme-text')
    const activeThemeIcon = document.querySelector('.theme-icon-active use')
    const btnToActive = document.querySelector(`[data-bs-theme-value="${theme}"]`)
    const svgOfActiveBtn = btnToActive.querySelector('svg use').getAttribute('href')

    document.querySelectorAll('[data-bs-theme-value]').forEach(element => {
      element.classList.remove('active')
      element.setAttribute('aria-pressed', 'false')
    })

    btnToActive.classList.add('active')
    btnToActive.setAttribute('aria-pressed', 'true')
    activeThemeIcon.setAttribute('href', svgOfActiveBtn)
    const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`
    themeSwitcher.setAttribute('aria-label', themeSwitcherLabel)

    if (focus) {
      themeSwitcher.focus()
    }
  }

  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    const storedTheme = getStoredTheme()
    if (storedTheme !== 'light' && storedTheme !== 'dark') {
      setTheme(getPreferredTheme())
    }
  })

  window.addEventListener('DOMContentLoaded', () => {
    showActiveTheme(getPreferredTheme())

    document.querySelectorAll('[data-bs-theme-value]')
      .forEach(toggle => {
        toggle.addEventListener('click', () => {
          const theme = toggle.getAttribute('data-bs-theme-value')
          setStoredTheme(theme)
          setTheme(theme)
          showActiveTheme(theme, true)
        })
      })
  })
})()


// ----- END FILE: plugins/DefaultTheme/webroot/js/color-modes.js -----



================================================================================
END SECTION: Webroot
================================================================================

